local alocal aa, ab, ac, ad, ai, aj, ak, f, g, h, i, j, k, l, m, n, o, p, q, r = { function() local b, c, d = a(1) local e return (function(...) local f, g, h = game:GetService("HttpService"), game:GetService("UserInputService"), c local i, j = h.components, c.packages local k, l, m, n, o = d(j.fusion), d(j.states), d(j.damerau), d(j.cmdr), d(c.Elements) local p, q, r, s, t = k.Children, k.ForPairs, k.New, k.Observer, c.utils local u, v, w, x, y, z, A, B = d(t.unwrap), d(t.insertitem), d(i.commandbar.bar), d(i.commandbar.suggestions), d(i.commandbar.suggestion), d(c.storage.theme), d(c.commandbar), { Version = "1.0.0", States = l, Options = {}, Connections = {}, NotificationHolder = nil, Window = nil, Unloaded = false, MinimizeKey = Enum.KeyCode.LeftControl, MinimizeKeybind = nil, GUI = nil, SilentMode = false, OnDestroy = function() end } l.Library:set(B) local C = {} C.__index = C function C.__namecall(D, E, ...) if C[E] then return C[E](...) end error(string.format("Invalid method call: %s", E)) end local D = function(D, E, F, G) D.Container = E D.Type = F D.ScrollFrame = G D.Library = B end for E, F in ipairs(o) do C["Add" .. F.__type] = function(G, H, I) D(F, G.Container, G.Type, G.ScrollFrame) return F:New(H, I) end end l.Elements:set(C) function B.CreateWindow(E, F) assert(F.Title, "[WINDOW] Missing Title") assert(F.Title, "[WINDOW] Missing Tag") if B.Window then error("Window already exists") return end if not B.GUI then if F.Debug then local G = r("Frame")({ Name = "Frame", BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, AnchorPoint = Vector2.new(0.5, 0.5), Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.fromScale(1, 1), Parent = F.Parent or game.CoreGui or game.PlayerGui, [p] = { w(), x(), q(l.Objects, function(G, H) return G, H end, k.cleanup) } }) B.GUI = G else local G, H = protectgui or (syn and syn.protect_gui) or function() end, r("ScreenGui")({ Parent = game.CoreGui or F.Parent, IgnoreGuiInset = true, ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets, [p] = { w(), x(), q(l.Objects, function(G, H) return G, H end, k.cleanup) } }) G(H) B.GUI = H end end local G = d(i.notification.notificationHolder) l.add("Objects", G, "NotificationHolder") B.MinimizeKey = F.MinimizeKey or Enum.KeyCode.LeftControl B.Theme = F.Theme or "Dark" local H = d(i.window.window)(F) B.Window = H A.DisableCommandBar = E.DisableCommandBar or false A:Initialize() return H end function B.SetTheme(E, F) l.Theme:set(F) end function B.SetSilentMode(E, F) B.SilentMode = F end function B.GetThemes(E) return z.GetSupportedThemes() end local E = d(i.notification.notification) function B.Notify(F, G) E:New(G) end function B.Destroy(F) if B.Connections then for G, H in pairs(B.Connections) do H:Disconnect() end end B.Unloaded = true if B.Window ~= nil then B.Window.Root:Destroy() B.Window = nil end if B.GUI then B.GUI:Destroy() B.GUI = nil end B.OnDestroy() end local F = s(l.toDestroy) F:onChange(function() B:Destroy() end) function B.OnDestroy(G, H) B.OnDestroy = H end B.AddModule = A:SetupModuleSystem() return B end)() end, function() local b, c, d = a(2) local e return (function(...) local f = {} for g, h in next, c:GetChildren() do table.insert(f, d(h)) end return f end)() end, function() local b, c, d = a(3) local e return (function(...) local f = c.Parent.Parent.utils local g, h, i, j, k, l = d(f.animate), d(f.color3), d(f.unwrap), d(f.insertitem), d(f.safecallback), c.Parent.Parent.packages local m, n, o = d(l.fusion), d(l.snapdragon), d(l.states) local p, q, r, s, t, u, v, w, x, y, z = m.Children, m.Computed, m.ForPairs, m.Observer, m.OnChange, m.OnEvent, m.Value, m.Tween, m.Ref, m.New, d(c.Parent.Parent.storage.theme) type ButtonProps = { Title: string, Type: string, Callback: (...any) -> ...any? } local A = {} A.__index = A A.__type = "Button" function A.New(B, C: ButtonProps) assert(C.Title, "[BUTTON] Missing Title") assert(C.Type, "[BUTTON] Missing Type") local D, E, F = { Callback = C.Callback or function(D) end, Style = string.lower(C.Type), Type = "Button" }, v(false), v(false) D.Root = y("Frame")({ Name = "Button", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [p] = { y("TextButton")({ Name = "TextButton", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = C.Title, TextColor3 = g(function() local G = D.Style if G == "default" then if i(E) then return h.lightenRGB(i(z.tertiary_text), 35) end return i(z.tertiary_text) else if i(E) then return Color3.fromRGB(255, 255, 255) end return h.lightenRGB(i(z.text), 10) end end, 25, 1), TextSize = 14, BackgroundTransparency = g(function() if i(F) then return 0.1 end return 0 end, 25, 1), BackgroundColor3 = g(function() local G, H = D.Style if G == "primary" then H = i(z.accent) elseif G == "danger" then H = i(z.danger) elseif G == "warning" then H = i(z.warning) else H = i(z.secondary_background) end if i(E) then return h.lightenRGB(H, 10) end if i(F) then return h.darkenRGB(H, 15) end return H end, 25, 1), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = g(function() if i(F) then return UDim2.new(1, -4, 0, 28) end return UDim2.new(1, 0, 0, 28) end, 25, 1), AnchorPoint = Vector2.new(0.5, 0), Position = g(function() if i(F) then return UDim2.new(0.5, 0, 0, 2) end return UDim2.new(0.5, 0, 0, 0) end, 25, 1), [p] = { y("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), y("UIStroke")({ Name = "UIStroke", ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Color = g(function() local G, H = D.Style if G == "primary" then H = i(z.accent) elseif G == "danger" then H = i(z.danger) elseif G == "warning" then H = i(z.warning) else H = i(z.secondary_background) end if i(E) then return h.lightenRGB(H, 50) end return h.lightenRGB(H, 35) end, 25, 1), Transparency = 0.25, Thickness = 1 }), q(function() if D.Style == "default" then return end return y("ImageLabel")({ Name = "ImageLabel", Image = "rbxassetid://108824901287727", Size = UDim2.fromScale(1, 1), BackgroundTransparency = 1, BackgroundColor3 = Color3.fromRGB(255, 255, 255), ImageColor3 = Color3.fromRGB(255, 255, 255), ScaleType = Enum.ScaleType.Slice, SliceScale = 0.5, SliceCenter = Rect.new(25, 25, 25, 25), Active = false }) end, m.cleanup) }, [u("Activated")] = function() k(function() D.Callback() end) end, [u("InputEnded")] = function(G) if G.UserInputType == Enum.UserInputType.MouseButton1 or G.UserInputType == Enum.UserInputType.Touch then F:set(false) end end, [u("InputBegan")] = function(G) if G.UserInputType == Enum.UserInputType.MouseButton1 or G.UserInputType == Enum.UserInputType.Touch then F:set(true) end end, [u("MouseEnter")] = function() E:set(true) end, [u("MouseLeave")] = function() E:set(false) F:set(false) end, }) } }) j(B.Container, D.Root) return D end return A end)() end, function() local b, c, d = a(4) local e return (function(...) local f = c.Parent.Parent.utils local g, h, i, j = d(f.animate), d(f.unwrap), d(f.insertitem), c.Parent.Parent.packages local k, l = d(j.fusion), d(j.states) local m, n, o, p, q, r, s, t, u, v, w, x = k.Children, k.Computed, k.Observer, k.OnEvent, k.Value, k.Ref, k.New, k.OnChange, d(c.Parent.Parent.storage.theme), game:GetService("UserInputService"), game:GetService("GuiService"), {} x.__index = x x.__type = "Colorpicker" function x.New(y, z, A) local B, C, D = { Title = q(A.Title) or nil, Description = q(A.Description) or nil, Value = A.Default or Color3.fromRGB(255, 255, 255), Type = "Colorpicker", Callback = A.Callback or function() end, Changed = function(B) end, Opened = q(false), H = nil, S = nil, V = nil, Connections = {} }, q(false), q(false) function B.SetHSVFromRGB(E, F) local G, H, I = Color3.toHSV(F) B.H = G B.S = H B.V = I end B:SetHSVFromRGB(B.Value) local E, F, G, H, I, J, K, L, M, N, O, P, Q = q(), q(), q(), q(), q(), q(), q(), q(), q(), q(), q(), q(), q(Color3.fromHSV(B.H, B.S, B.V)) local R, S, T, U, V = function() h(H).BackgroundColor3 = Color3.fromHSV(B.H, 1, 1) h(O).BackgroundColor3 = Color3.fromHSV(B.H, B.S, B.V) h(M).Text = Color3.fromHSV(B.H, B.S, B.V):ToHex() h(N).Text = string.format("%d, %d, %d", h(O).BackgroundColor3.R * 255, h(O).BackgroundColor3.G * 255, h(O).BackgroundColor3.B * 255) end, function() h(K).Position = UDim2.new(B.H, 0, 0.5, 0) h(I).Position = UDim2.new(B.S, 0, 1 - B.V, 0) end, function() local R, S, T, U = h(P).AbsolutePosition, h(P).AbsoluteSize, h(F), w:GetGuiInset() T.Position = UDim2.fromOffset(R.X, R.Y + S.Y + 5 + U.Y) end, q(), q(false) local W, X, Y, Z = function() V:set(true) end, function() V:set(false) end, g(function() if V:get() then if B.Opened:get() then return 0.15 end return 0.5 end return 1 end, 40, 1), q(Color3.fromRGB(255, 255, 255)) local _ = g(function() return Z:get() end, 40, 1) B.Picker = s("TextButton")({ [r] = F, Name = "Colorpicker", BackgroundColor3 = u.background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromOffset(241, 0), ZIndex = 9999, Visible = B.Opened, Parent = h(l.Library).GUI, [m] = { s("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), s("UIStroke")({ Name = "UIStroke", Color = u.stroke, ApplyStrokeMode = Enum.ApplyStrokeMode.Border }), s("Frame")({ [r] = G, Name = "Holder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 1), ZIndex = 9999, [m] = { s("ImageLabel")({ [r] = H, Name = "HSV", Image = "rbxassetid://4155801252", BackgroundColor3 = Color3.fromRGB(255, 138, 21), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0.0928, 0.0357), Size = UDim2.new(1, 0, 0, 140), ZIndex = 9999, [m] = { s("ImageButton")({ [r] = I, Name = "Drag", Image = "http://www.roblox.com/asset/?id=4805639000", AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(27, 42, 53), BorderSizePixel = 0, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.fromOffset(20, 20), ZIndex = 9999, [p("InputBegan")] = function(aa) if aa.UserInputType == Enum.UserInputType.MouseButton1 or aa.UserInputType == Enum.UserInputType.Touch then D:set(true) local ab ab = v.InputChanged:Connect(function(ac) if D:get() and ac.UserInputType == Enum.UserInputType.MouseMovement then local ad, ae = math.clamp((ac.Position.X - h(H).AbsolutePosition.X) / h(H).AbsoluteSize.X, 0, 1), math.clamp((ac.Position.Y - h(H).AbsolutePosition.Y) / h(H).AbsoluteSize.Y, 0, 1) B.S = ad B.V = 1 - ae h(I).Position = UDim2.new(ad, 0, ae, 0) R() S() end end) local ac ac = v.InputEnded:Connect(function(ad) if D:get() and ad.UserInputType == Enum.UserInputType.MouseButton1 then ab:Disconnect() ac:Disconnect() D:set(false) end end) table.insert(h(l.Library).Connections, ab) table.insert(h(l.Library).Connections, ac) end end, }), s("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), s("UIStroke")({ Name = "UIStroke", Color = u.stroke }) } }), s("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 10), HorizontalAlignment = Enum.HorizontalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder }), s("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10), PaddingTop = UDim.new(0, 10) }), s("Frame")({ [r] = J, Name = "Slider", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BorderColor3 = Color3.fromRGB(27, 42, 53), BorderSizePixel = 0, Position = UDim2.fromScale(0.0253, 0.744), Size = UDim2.new(1, 0, 0, 18), ZIndex = 9999, [m] = { s("UIGradient")({ Name = "UIGradient", Color = ColorSequence.new({ ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.0557, Color3.fromRGB(255, 85, 0)), ColorSequenceKeypoint.new(0.111, Color3.fromRGB(255, 170, 0)), ColorSequenceKeypoint.new(0.167, Color3.fromRGB(254, 255, 0)), ColorSequenceKeypoint.new(0.223, Color3.fromRGB(169, 255, 0)), ColorSequenceKeypoint.new(0.279, Color3.fromRGB(84, 255, 0)), ColorSequenceKeypoint.new(0.334, Color3.fromRGB(0, 255, 1)), ColorSequenceKeypoint.new(0.39, Color3.fromRGB(0, 255, 87)), ColorSequenceKeypoint.new(0.446, Color3.fromRGB(0, 255, 172)), ColorSequenceKeypoint.new(0.501, Color3.fromRGB(0, 253, 255)), ColorSequenceKeypoint.new(0.557, Color3.fromRGB(0, 168, 255)), ColorSequenceKeypoint.new(0.613, Color3.fromRGB(0, 82, 255)), ColorSequenceKeypoint.new(0.669, Color3.fromRGB(3, 0, 255)), ColorSequenceKeypoint.new(0.724, Color3.fromRGB(88, 0, 255)), ColorSequenceKeypoint.new(0.78, Color3.fromRGB(173, 0, 255)), ColorSequenceKeypoint.new(0.836, Color3.fromRGB(255, 0, 251)), ColorSequenceKeypoint.new(0.891, Color3.fromRGB(255, 0, 166)), ColorSequenceKeypoint.new(0.947, Color3.fromRGB(255, 0, 81)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0)) }) }), s("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), s("ImageButton")({ [r] = K, Name = "Drag", Image = "http://www.roblox.com/asset/?id=4805639000", AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(27, 42, 53), BorderSizePixel = 0, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.fromOffset(20, 20), ZIndex = 9999, [p("InputBegan")] = function(aa) if aa.UserInputType == Enum.UserInputType.MouseButton1 or aa.UserInputType == Enum.UserInputType.Touch then C:set(true) local ab ab = v.InputChanged:Connect(function(ac) if C:get() and ac.UserInputType == Enum.UserInputType.MouseMovement then local ad = math.clamp((ac.Position.X - h(J).AbsolutePosition.X) / h(J).AbsoluteSize.X, 0, 1) B.H = ad h(K).Position = UDim2.new(ad, 0, 0.5, 0) R() end end) local ac ac = v.InputEnded:Connect(function(ad) if C:get() and ad.UserInputType == Enum.UserInputType.MouseButton1 then ab:Disconnect() ac:Disconnect() C:set(false) end end) table.insert(h(l.Library).Connections, ab) table.insert(h(l.Library).Connections, ac) end end, }) } }), s("Frame")({ [r] = L, Name = "HEXRGB", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), ZIndex = 9999, [m] = { s("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 6), FillDirection = Enum.FillDirection.Horizontal, SortOrder = Enum.SortOrder.LayoutOrder }), s("TextBox")({ [r] = M, Name = "HEX", CursorPosition = -1, FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), PlaceholderColor3 = u.tertiary_text, PlaceholderText = "HEX", Text = "", TextColor3 = u.secondary_text, TextSize = 14, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(0.5, -3, 0, 25), ZIndex = 9999, [m] = { s("UIStroke")({ Name = "UIStroke", ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Color = u.stroke }), s("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }) }, [p("FocusLost")] = function() if string.match(h(M).Text, "^%x%x%x%x%x%x$") then B.H, B.S, B.V = Color3.fromHex(h(M).Text):ToHSV() end R() S() end, }), s("TextBox")({ [r] = N, Name = "RGB", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), PlaceholderColor3 = u.tertiary_text, PlaceholderText = "RGB", Text = "", TextColor3 = u.secondary_text, TextSize = 14, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(0.5, -3, 0, 25), ZIndex = 9999, [m] = { s("UIStroke")({ Name = "UIStroke", ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Color = u.stroke }), s("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }) }, [p("FocusLost")] = function() if string.match(h(N).Text, "^%s*(%d+)%s*,%s*(%d+)%s*,%s*(%d+)%s*$") then local aa, ab, ac = string.match(h(N).Text, "^%s*(%d+)%s*,%s*(%d+)%s*,%s*(%d+)%s*$") aa, ab, ac = math.clamp(aa, 0, 255), math.clamp(ab, 0, 255), math.clamp(ac, 0, 255) B.H, B.S, B.V = Color3.fromRGB(aa, ab, ac):ToHSV() end R() S() end, }) } }), s("TextButton")({ [r] = O, Name = "TextButton", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = "Submit", TextColor3 = u.text, TextSize = 14, BackgroundColor3 = g(function() return Q:get() end, 40, 1), Size = UDim2.new(1, 0, 0, 25), ZIndex = 9999, [m] = { s("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }), s("UIStroke")({ Name = "UIStroke", ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Color = u.stroke }) }, [p("InputEnded")] = function(aa) if aa.UserInputType == Enum.UserInputType.MouseButton1 or aa.UserInputType == Enum.UserInputType.Touch then B:Display() end end, }) } }), s("UISizeConstraint")({ Name = "UISizeConstraint", MinSize = Vector2.new(240, 255) }), s("ImageLabel")({ Name = "EShadow", Image = "rbxassetid://9313765853", ImageColor3 = u.background, ImageTransparency = 0.5, ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(45, 45, 45, 45), SliceScale = 1.2, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(27, 42, 53), ClipsDescendants = true, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.new(1, 75, 1, 75), ZIndex = -1 }) } }) B.Root = s("Frame")({ [r] = E, Name = "Text", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 0), [m] = { s("Frame")({ Name = "Addons", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(1, 0), Size = UDim2.fromScale(0, 1), [m] = { s("Frame")({ Name = "Checkbox", AnchorPoint = Vector2.new(1, 0.5), BackgroundColor3 = Color3.fromRGB(114, 149, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, LayoutOrder = 1, Position = UDim2.fromScale(1, 0.5), Size = UDim2.fromOffset(44, 24), [m] = { s("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 3) }), s("UIStroke")({ [r] = U, Name = "UIStroke", Color = _, Thickness = 2, Transparency = Y }), s("Frame")({ [r] = P, Name = "Visualize", AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = B.Value, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, LayoutOrder = 1, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.fromOffset(40, 20), [m] = { s("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 3) }) }, [p("MouseEnter")] = W, [p("MouseLeave")] = X, [p("InputEnded")] = function(aa) if aa.UserInputType == Enum.UserInputType.MouseButton1 or aa.UserInputType == Enum.UserInputType.Touch then B.Opened:set(not B.Opened:get()) end end, [t("BackgroundColor3")] = function() Z:set(h(P).BackgroundColor3) end, }) } }), s("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 15), FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }) } }), s("Frame")({ Name = "TextHolder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, -80, 1, 0), [m] = { s("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = A.Title, TextColor3 = u.secondary_text, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0) }), s("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 5), VerticalAlignment = Enum.VerticalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder }), n(function() if A.Description then return s("TextLabel")({ Name = "Description", FontFace = Font.new("rbxassetid://12187365364"), RichText = true, Text = A.Description, TextColor3 = u.tertiary_text, TextSize = 15, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0), Visible = true }) end return end, k.cleanup) }, [p("MouseEnter")] = W, [p("MouseLeave")] = X, [p("InputEnded")] = function(aa) if aa.UserInputType == Enum.UserInputType.MouseButton1 or aa.UserInputType == Enum.UserInputType.Touch then B.Opened:set(not B.Opened:get()) end end, }) } }) o(B.Opened):onChange(function() if B.Opened:get() then local aa = v.InputBegan:Connect(function(aa) if aa.KeyCode == Enum.KeyCode.Escape then B.Opened:set(false) end end) table.insert(B.Connections, aa) local ab = h(P):GetPropertyChangedSignal("AbsolutePosition"):Connect(function() T() end) table.insert(B.Connections, ab) T() else for aa, ab in pairs(B.Connections) do ab:Disconnect() end end end) function B.SetTitle(aa, ab) B.Title:set(ab) end function B.SetDescription(aa, ab) B.Description:set(ab) end function B.SetValueRGB(aa, ab, ac) B:SetHSVFromRGB(ab) B:Display() end function B.Display(aa) local ab = Color3.fromHSV(B.H, B.S, B.V) B.Value = ab h(P).BackgroundColor3 = ab h(O).BackgroundColor3 = ab B.Changed(ab) B.Callback(ab) end i(y.Container, B.Root) R() S() h(O).BackgroundColor3 = B.Value B:Display() h(l.Library).Options[z] = B return B end return x end)() end, function() local aa, ab, ac = a(5) local ad return (function(...) local ae, b = game:GetService("UserInputService"), ab.Parent.Parent.utils local c, d, e, f, g = ac(b.animate), ac(b.unwrap), ac(b.insertitem), ac(b.safecallback), ab.Parent.Parent.packages local h, i = ac(g.fusion), ac(g.states) local j, k, l, m, n, o, p, q, r, s = h.Children, h.Computed, h.Observer, h.OnEvent, h.Value, h.Ref, h.New, ac(ab.Parent.Parent.storage.theme), game:GetService("GuiService"), {} s.__index = s s.__type = "Dropdown" function s.New(t, u, v) local w, x, y, z, A = { Values = v.Values, Value = v.Default, Multi = v.Multi, Buttons = {}, Opened = n(false), Callback = v.Callback or function(w) end, Type = "Dropdown", Changed = function(w) end, AllowNull = v.AllowNull or false }, n(), n(), n(), n() local B, C = function(B) if B.UserInputType == Enum.UserInputType.MouseButton1 or B.UserInputType == Enum.UserInputType.Touch then w.Opened:set(not w.Opened:get()) end end, function() local B, C, D, E = d(x).AbsolutePosition, d(x).AbsoluteSize, d(y), r:GetGuiInset() D.Position = UDim2.fromOffset(B.X, B.Y + C.Y + 5 + E.Y) end local D, E, F, G = function() while w.Opened:get() do C() task.wait() end end, function() if #w.Values > 10 then return 310 else return d(z).AbsoluteContentSize.Y + 10 end end, function() d(y).CanvasSize = UDim2.fromOffset(0, d(z).AbsoluteContentSize.Y) end, l(w.Opened) G:onChange(function() E() F() if w.Opened:get() then coroutine.wrap(D)() end end) w.Holder = p("ScrollingFrame")({ [o] = y, Name = "Frame", AutomaticCanvasSize = Enum.AutomaticSize.Y, CanvasSize = UDim2.new(), ScrollBarThickness = 0, BackgroundColor3 = q.background, BackgroundTransparency = c(function() local H = w.Opened:get() if H then return 0 end return 1 end, 15, 1), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Selectable = false, Size = c(function() local H = w.Opened:get() if H then return UDim2.fromOffset(200, E()) end return UDim2.fromOffset(200, 0) end, 35, 1), Visible = true, Parent = d(i.Library).GUI, ZIndex = 999, [j] = { p("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }), p("UIStroke")({ Name = "UIStroke", Color = q.stroke, Transparency = c(function() local H = w.Opened:get() if H then return 0 end return 1 end, 15, 1) }), p("UIListLayout")({ [o] = z, Name = "UIListLayout", Padding = UDim.new(0, 0), SortOrder = Enum.SortOrder.LayoutOrder }), p("UIPadding")({ Name = "UIPadding", PaddingBottom = UDim.new(0, 5), PaddingLeft = UDim.new(0, 5), PaddingTop = UDim.new(0, 5) }), p("UISizeConstraint")({ Name = "UISizeConstraint", MinSize = Vector2.new(200, 0) }) } }) w.Root = p("Frame")({ Name = "Dropdown", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [j] = { p("Frame")({ Name = "Addons", AnchorPoint = Vector2.new(1, 0), AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(1, 0), Size = UDim2.fromScale(0, 1), [j] = { p("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 15), FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), p("TextButton")({ [o] = x, Name = "Interact", FontFace = Font.new("rbxassetid://12187365364"), Text = "", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 12, TextXAlignment = Enum.TextXAlignment.Left, Active = false, AnchorPoint = Vector2.new(1, 0.5), BackgroundColor3 = q.background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, ClipsDescendants = true, LayoutOrder = 1, Position = UDim2.fromScale(1, 0.5), Selectable = false, Size = UDim2.fromOffset(200, 30), [j] = { p("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }), p("ImageLabel")({ Name = "Icon", Image = "rbxassetid://88197529571865", AnchorPoint = Vector2.new(1, 0.5), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Interactable = false, LayoutOrder = 1, Position = UDim2.new(1, -5, 0.5, 0), Size = UDim2.fromOffset(14, 14), ImageColor3 = c(function() local H = w.Opened:get() if H then return q.accent:get() end return q.text:get() end, 25, 1) }), p("UIStroke")({ Name = "UIStroke", ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Color = q.stroke }), p("TextLabel")({ [o] = A, Name = "Values", FontFace = Font.new("rbxassetid://12187365364"), Text = " local H = w.Opened:get() if H then return q.text:get() end return q.secondary_text:get() end, 40, 1), TextSize = 14, TextTruncate = Enum.TextTruncate.AtEnd, TextXAlignment = Enum.TextXAlignment.Left, AnchorPoint = Vector2.new(0, 0.5), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, ClipsDescendants = true, Position = UDim2.new(0, 10, 0.5, 0), Size = UDim2.new(1, -30, 1, 0) }) }, [m("InputEnded")] = B }) } }), p("Frame")({ Name = "TextHolder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, -190, 1, 0), [j] = { p("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = v.Title, TextColor3 = c(function() local H = w.Opened:get() if H then return q.text:get() end return q.secondary_text:get() end, 40, 1), TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0) }), p("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 5), VerticalAlignment = Enum.VerticalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder }), k(function() if v.Description then return p("TextLabel")({ Name = "Description", FontFace = Font.new("rbxassetid://12187365364"), RichText = true, Text = v.Description, TextColor3 = q.tertiary_text, TextSize = 15, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0), Visible = true }) end return end, h.cleanup) } }) } }) function w.SetValues(H, I) if I then w.Values = I end w:BuildDropdownList() end function w.OnChanged(H, I) w.Changed = I I(w.Value) end function w.SetValue(H, I) if w.Multi then local J = {} for K, L in next, I do if table.find(w.Values, K) then J[K] = true end end w.Value = J else if not I then w.Value = nil elseif table.find(w.Values, I) then w.Value = I end end w:BuildDropdownList() w:Display() f(function() w.Callback(w.Value) w.Changed(w.Value) end) end function w.GetActiveValues(H) if w.Multi then local I = {} for J, K in next, w.Value do table.insert(I, J) end return I else return w.Value and 1 or 0 end end function w.Display(H) local I, J = w.Values, "" if w.Multi then for K, L in next, I do if w.Value[L] then J = J .. L .. ", " end end J = J:sub(1, #J - 2) else J = w.Value or "" end d(A).Text = (J == "" and " end function w.BuildDropdownList(H) local I = w.Values for J, K in next, d(y):GetChildren() do if K:IsA("TextButton") then K:Destroy() end end local J = 0 for K, L in next, I do local M = {} J = J + 1 local N = n() if w.Multi then N:set(w.Value[L]) else N:set(w.Value == L) end function M.UpdateButton(O) if w.Multi then N:set(w.Value[L]) else N:set(w.Value == L) end end local O = p("TextButton")({ Name = "OptionButton", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = L, TextColor3 = c(function() local O = N:get() if O then return q.accent:get() end return q.secondary_text:get() end, 45, 1), TextTransparency = c(function() local O = w.Opened:get() if O then return 0 end return 1 end, 15, 1), TextSize = 13, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, BackgroundColor3 = q.background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Selectable = false, Size = UDim2.new(1, -5, 0, 25), Parent = y, ZIndex = 1000, [j] = { p("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }), p("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 5) }) }, [m("InputBegan")] = function(O) if O.UserInputType == Enum.UserInputType.MouseButton1 or O.UserInputType == Enum.UserInputType.Touch then local P = not N:get() if not (w:GetActiveValues() == 1 and not P and not w.AllowNull) then if w.Multi then N:set(P) w.Value[L] = N:get() and true or nil else N:set(P) w.Value = N:get() and L or nil for Q, R in next, w.Buttons do R:UpdateButton() end end w:Display() M:UpdateButton() f(function() w.Callback(w.Value) w.Changed(w.Value) end) end end end, }) M:UpdateButton() w:Display() w.Buttons[O] = M end F() E() end function w.Destroy(H) d(w.Root):Destroy() d(i.Library).Options[u] = nil end local H = ae.InputBegan:Connect(function(H) if H.UserInputType == Enum.UserInputType.MouseButton1 or H.UserInputType == Enum.UserInputType.Touch then local I, J = d(y).AbsolutePosition, d(y).AbsoluteSize if w.Opened:get() and (ae:GetMouseLocation().X < I.X or ae:GetMouseLocation().X > I.X + J.X or ae:GetMouseLocation().Y < I.Y - 40) then w.Opened:set(false) end end end) table.insert(d(i.Library).Connections, H) e(t.Container, w.Root) d(i.Library).Options[u] = w w:BuildDropdownList() C() E() F() local I = {} if type(v.Default) == "string" then local J = table.find(w.Values, v.Default) if J then table.insert(I, J) end elseif type(v.Default) == "table" then for J, K in next, v.Default do local L = table.find(w.Values, K) if L then table.insert(I, L) end end elseif type(v.Default) == "number" and w.Values[v.Default] ~= nil then table.insert(I, v.Default) end if next(I) then for J = 1, #I do local K = I[J] if w.Multi then w.Value[w.Values[K]] = true else w.Value = w.Values[K] end if not w.Multi then break end end w:BuildDropdownList() w:Display() end return w end return s end)() end, function() local aa, ab, ac = a(6) local ad return (function(...) local ae = ab.Parent.Parent.utils local b, c, d, e, f = ac(ae.animate), ac(ae.unwrap), ac(ae.insertitem), ac(ae.safecallback), ab.Parent.Parent.packages local g, h, i = ac(f.fusion), ac(f.states), ac(f.audio) local j, k, l, m, n, o, p = g.Children, g.Computed, g.OnEvent, g.Value, g.Ref, g.New, ac(ab.Parent.Parent.storage.theme) type InputProps = { Title: string, Description: string?, Default: string?, Numeric: boolean?, Finished: boolean?, Placeholder: string?, Callback: (...any) -> ...any? } local q = {} q.__index = q q.__type = "Input" function q.New(r, s, t: InputProps) local u, v, w = { Value = t.Default or "", Numeric = t.Numeric or false, Finished = t.Finished or false, Callback = t.Callback or function() end, Placeholder = t.Placeholder or "...", Type = "Input", Changed = function(u) end }, m(), m(false) u.Root = o("Frame")({ Name = "Textbox", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [j] = { o("Frame")({ Name = "Addons", AnchorPoint = Vector2.new(1, 0), AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(1, 0), Size = UDim2.fromScale(0, 1), [j] = { o("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 15), FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), o("Frame")({ Name = "Holder", AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = p.background, BackgroundTransparency = 0, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, ClipsDescendants = true, Size = UDim2.fromScale(0, 1), [j] = { o("TextBox")({ [n] = v, Name = "Input", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal), PlaceholderText = u.Placeholder, Text = u.Value, TextColor3 = p.secondary_text, TextSize = 14, AutomaticSize = Enum.AutomaticSize.X, TextXAlignment = Enum.TextXAlignment.Left, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, ClipsDescendants = true, LayoutOrder = 1, Size = UDim2.new(0, 0, 0, 25), [j] = { o("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 10) }), o("UISizeConstraint")({ Name = "UISizeConstraint", MaxSize = Vector2.new(200, math.huge) }) }, [l("Focused")] = function() w:set(true) end, [l("FocusLost")] = function() w:set(false) end, }), o("UIListLayout")({ Name = "UIListLayout", FillDirection = Enum.FillDirection.Horizontal, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), o("UIStroke")({ Name = "UIStroke", ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Color = p.stroke }), o("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }), o("UIPadding")({ Name = "UIPadding", PaddingRight = UDim.new(0, 10) }) } }) } }), o("Frame")({ Name = "TextHolder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, -80, 1, 0), [j] = { o("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = t.Title, TextColor3 = b(function() if w:get() then return p.text:get() end return p.secondary_text:get() end, 40, 1), TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0) }), o("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 5), VerticalAlignment = Enum.VerticalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder }), k(function() if t.Description then return o("TextLabel")({ Name = "Description", FontFace = Font.new("rbxassetid://12187365364"), RichText = true, Text = t.Description, TextColor3 = p.tertiary_text, TextSize = 15, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0), Visible = true }) end return end, g.cleanup) } }) } }) function u.SetValue(x, y) if u.Numeric then if (not tonumber(y)) and y:len() > 0 then y = u.Value end end u.Value = y c(v).Text = y e(function() u.Callback(u.Value) u.Changed(u.Value) end) end if u.Finished then local x = c(v).FocusLost:Connect(function(x) if not x then return end u:SetValue(c(v).Text) end) table.insert(c(h.Library).Connections, x) else local x = c(v):GetPropertyChangedSignal("Text"):Connect(function() local x = c(v) local y, z = x.Text, u.Value if #y > #z then i:Play("Key") elseif #y < #z then task.wait() if x:IsFocused() then i:Play("Backspace") end end u:SetValue(y) end) table.insert(c(h.Library).Connections, x) end function u.OnChanged(x, y) u.Changed = y y(u.Value) end function u.Destroy(x) u.Root:Destroy() c(h.Library).Options[s] = nil end d(r.Container, u.Root) c(h.Library).Options[s] = u return u end return q end)() end, function() local aa, ab, ac = a(7) local ad return (function(...) local ae, b = game:GetService("UserInputService"), ab.Parent.Parent.utils local c, d, e, f, g, h = ac(b.animate), ac(b.color3), ac(b.unwrap), ac(b.insertitem), ac(b.safecallback), ab.Parent.Parent.packages local i, j, k = ac(h.fusion), ac(h.snapdragon), ac(h.states) local l, m, n, o, p, q, r, s, t, u, v = i.Children, i.Computed, i.ForPairs, i.Observer, i.OnChange, i.OnEvent, i.Value, i.Tween, i.Ref, i.New, ac(ab.Parent.Parent.storage.theme) type KeybindProps = { Title: string, Description: string?, Default: boolean?, Callback: (...any) -> ...any?, Mode: string? } local w = {} w.__index = w w.__type = "Keybind" function w.New(x, y, z: KeybindProps) local A, B, C = { Value = z.Default, Toggled = false, Mode = z.Mode or "Toggle", Type = "Keybind", Callback = z.Callback or function(A) end, Changed = function(A) end, Clicked = function(A) end }, r(false), r() A.Root = u("Frame")({ Name = "Keybind", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [l] = { u("Frame")({ Name = "Addons", AnchorPoint = Vector2.new(1, 0), AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(1, 0), Size = UDim2.fromScale(0, 1), [l] = { u("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 15), FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), u("TextButton")({ [t] = C, Name = "Interact", FontFace = Font.new("rbxassetid://12187365364"), Text = A.Value, TextColor3 = v.secondary_text, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, Active = false, AnchorPoint = Vector2.new(1, 0.5), AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = v.background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, ClipsDescendants = true, LayoutOrder = 1, Position = UDim2.fromScale(1, 0.5), Selectable = false, Size = UDim2.fromOffset(0, 25), [l] = { u("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }), u("UIStroke")({ Name = "UIStroke", ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Color = v.stroke }), u("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 11), PaddingRight = UDim.new(0, 10) }) }, [q("InputBegan")] = function(D) if D.UserInputType == Enum.UserInputType.MouseButton1 or D.UserInputType == Enum.UserInputType.Touch then local E = e(C) if not E then return end B:set(true) E.Text = "..." task.wait(0.2) local F F = ae.InputBegan:Connect(function(G) local H if G.UserInputType == Enum.UserInputType.Keyboard then H = G.KeyCode.Name elseif G.UserInputType == Enum.UserInputType.MouseButton1 then H = "MouseLeft" elseif G.UserInputType == Enum.UserInputType.MouseButton2 then H = "MouseRight" end local I I = ae.InputEnded:Connect(function(J) if J.KeyCode.Name == H or H == "MouseLeft" and J.UserInputType == Enum.UserInputType.MouseButton1 or H == "MouseRight" and J.UserInputType == Enum.UserInputType.MouseButton2 then B:set(false) E.Text = H A.Value = H g(function() A.Changed(J.KeyCode or J.UserInputType) end) F:Disconnect() I:Disconnect() end end) end) end end, }) } }), u("Frame")({ Name = "TextHolder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, -80, 1, 0), [l] = { u("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = z.Title, TextColor3 = c(function() if B:get() then return v.text:get() end return v.secondary_text:get() end, 40, 1), TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0) }), u("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 5), VerticalAlignment = Enum.VerticalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder }), m(function() if z.Description then return u("TextLabel")({ Name = "Description", FontFace = Font.new("rbxassetid://12187365364"), RichText = true, Text = z.Description, TextColor3 = v.tertiary_text, TextSize = 15, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0), Visible = true }) end return end, i.cleanup) } }) } }) function A.GetState(D) if ae:GetFocusedTextBox() and A.Mode ~= "Always" then return false end if A.Mode == "Always" then return true elseif A.Mode == "Hold" then if A.Value == "None" then return false end local E = A.Value if E == "MouseLeft" or E == "MouseRight" then return E == "MouseLeft" and ae:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) or E == "MouseRight" and ae:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) else return ae:IsKeyDown(Enum.KeyCode[A.Value]) end else return A.Toggled end end function A.SetValue(D, E, F) E = E or A.Value F = F or A.Mode e(C).Text = E A.Value = E A.Mode = F end function A.OnClick(D, E) A.Clicked = E end function A.OnChanged(D, E) A.Changed = E E(A.Value) end function A.DoClick(D) g(function() A.Callback(A.Toggled) end) g(function() A.Clicked(A.Toggled) end) end function A.Destroy(D) A.Root:Destroy() e(k.Library).Options[y] = nil end table.insert( e(k.Library).Connections, ae.InputBegan:Connect(function(D) if not B:get() and not ae:GetFocusedTextBox() then if A.Mode == "Toggle" then local E = A.Value if E == "MouseLeft" or E == "MouseRight" then if E == "MouseLeft" and D.UserInputType == Enum.UserInputType.MouseButton1 or E == "MouseRight" and D.UserInputType == Enum.UserInputType.MouseButton2 then A.Toggled = not A.Toggled A:DoClick() end elseif D.UserInputType == Enum.UserInputType.Keyboard then if D.KeyCode.Name == E then A.Toggled = not A.Toggled A:DoClick() end end end end end) ) f(x.Container, A.Root) e(k.Library).Options[y] = A return A end return w end)() end, function() local aa, ab, ac = a(8) local ad return (function(...) local ae = ab.Parent.Parent.utils local b, c, d, e, f, g = ac(ae.animate), ac(ae.color3), ac(ae.unwrap), ac(ae.insertitem), ac(ae.safecallback), ab.Parent.Parent.packages local h, i, j = ac(g.fusion), ac(g.snapdragon), ac(g.states) local k, l, m, n, o, p, q, r, s, t, u = h.Children, h.Computed, h.ForPairs, h.Observer, h.OnChange, h.OnEvent, h.Value, h.Tween, h.Ref, h.New, ac(ab.Parent.Parent.storage.theme) type RadioGroupProps = { Title: string, Options: { string }, Default: string?, Callback: (...any) -> ...any? } local v = {} v.__index = v v.__type = "Radio" function v.New(w, x, y: RadioGroupProps) local z = { Title = y.Title, Options = y.Options, Default = y.Default or y.Options[1], Callback = y.Callback or function() end, Changed = function() end } local A = q(z.Default) z.Root = t("Frame")({ Name = "RadioGroup", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [k] = { t("TextLabel")({ Name = "Title", Text = z.Title, FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), TextColor3 = u.text, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0) }), t("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 10), SortOrder = Enum.SortOrder.LayoutOrder }), m(z.Options, function(B, C) return B, t("TextButton")({ Name = "RadioButton", Text = C, FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), TextColor3 = b(function() if d(A) == C then return u.text:get() end return u.secondary_text:get() end, 40, 1), TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = u.background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [k] = { t("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }), t("UIStroke")({ Name = "UIStroke", Color = u.stroke, ApplyStrokeMode = Enum.ApplyStrokeMode.Border }), t("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 11) }), t("ImageLabel")({ Name = "RadioIcon", Image = "rbxassetid://128735638309771", ImageColor3 = b(function() if d(A) == C then return u.accent:get() end return u.background:get() end, 40, 1), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromOffset(20, 20), Position = UDim2.fromScale(0, 0.5), AnchorPoint = Vector2.new(0, 0.5) }) }, [p("Activated")] = function() A:set(C) f(function() z.Callback(C) z.Changed(C) end) end, }) end) } }) function z.OnChanged(B, C) z.Changed = C C(d(A)) end function z.SetValue(B, C) A:set(C) end e(w.Container, z.Root) d(j.Library).Options[x] = z return z end return v end)() end, function() local aa, ab, ac = a(9) local ad return (function(...) local ae = ab.Parent.Parent.utils local b, c = ac(ae.insertitem), ab.Parent.Parent.packages local d = ac(c.fusion) local e, f, g, h = d.Children, d.New, ac(ab.Parent.Parent.storage.theme), {} h.__index = h h.__type = "Seperator" function h.New(i) local j = {} j.Root = f("Frame")({ Name = "Seperator", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Interactable = false, Size = UDim2.new(1, 0, 0, 0), [e] = { f("Frame")({ Name = "Frame", AnchorPoint = Vector2.new(0, 0.5), BackgroundColor3 = g.stroke, BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0, 0.5), Size = UDim2.new(1, 0, 0, 0), [e] = { f("UIStroke")({ Name = "UIStroke", Color = g.stroke }) } }) } }) b(i.Container, j.Root) return j end return h end)() end, function() local aa, ab, ac = a(10) local ad return (function(...) local ae, b, c = game:GetService("UserInputService"), game:GetService("RunService"), ab.Parent.Parent.utils local d, e, f, g, h = ac(c.animate), ac(c.unwrap), ac(c.insertitem), ac(c.safecallback), ab.Parent.Parent.packages local i, j = ac(h.fusion), ac(h.states) local k, l, m, n, o, p, q, r, s = i.Children, i.Computed, i.Observer, i.OnEvent, i.Value, i.Ref, i.New, ac(ab.Parent.Parent.storage.theme), {} s.__index = s s.__type = "Slider" function s.New(t, u, v) local w, x, y, z, A = { Title = v.Title, Suffix = v.Suffix or "", Default = v.Default, Min = v.Min, Max = v.Max, Value = v.Default or v.Min, Rounding = v.Rounding or 0, Type = "Slider", Callback = v.Callback or function() end, Changed = function(w) end }, function(w, x) local y = 10 ^ (x or 0) return math.floor(w * y + 0.5) / y end, o(), o(false), o(false) local B = o(x(math.min(w.Default or w.Min, w.Max), w.Rounding or 0)) local C, D = m(B), o(UDim2.fromScale((e(B) - w.Min) / (w.Max - w.Min), 1)) local E = function() w.Value = tonumber(e(B)) D:set(UDim2.fromScale((e(B) - w.Min) / (w.Max - w.Min), 1)) g(function() w.Callback(e(B)) w.Changed(e(B)) end) end C:onChange(E) w.Root = q("Frame")({ Name = "Slider", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [k] = { q("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 10), SortOrder = Enum.SortOrder.LayoutOrder }), q("Frame")({ [p] = y, Name = "Bar", BackgroundColor3 = r.secondary_background, BorderSizePixel = 0, LayoutOrder = 2, Position = UDim2.fromScale(0, 0.6), Size = UDim2.new(1, 0, 0, 5), [k] = { q("UIStroke")({ Name = "UIStroke", Color = r.stroke }), q("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }), q("Frame")({ Name = "Progress", AnchorPoint = Vector2.new(0, 0.5), BackgroundColor3 = r.accent, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0, 0.5), Size = d(function() return D:get() end, 40, 1), [k] = { q("UIStroke")({ Name = "UIStroke", Color = r.stroke }), q("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }), q("Frame")({ Name = "Drag", AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = r.text, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(1, 0.5), Size = d(function() local F = A:get() if F then return UDim2.fromOffset(15, 15) end return UDim2.fromOffset(12, 12) end, 40, 1), [k] = { q("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(1, 0) }) }, [n("MouseEnter")] = function() A:set(true) end, [n("MouseLeave")] = function() A:set(false) end, }) } }) }, [n("InputBegan")] = function(F) if F.UserInputType == Enum.UserInputType.MouseButton1 or F.UserInputType == Enum.UserInputType.Touch then z:set(true) end end, [n("InputEnded")] = function(F) if F.UserInputType == Enum.UserInputType.MouseButton1 or F.UserInputType == Enum.UserInputType.Touch then z:set(false) end end, }), q("Frame")({ Name = "TextHolder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, LayoutOrder = 1, Size = UDim2.fromScale(1, 0), [k] = { q("Frame")({ Name = "Text", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [k] = { q("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = v.Title, TextColor3 = d(function() if z:get() then return r.text:get() end return r.secondary_text:get() end, 40, 1), TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0) }), l(function() if v.Description then return q("TextLabel")({ Name = "Description", FontFace = Font.new("rbxassetid://12187365364"), RichText = true, Text = v.Description, TextColor3 = r.tertiary_text, TextSize = 15, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.new(1, -50, 0, 0), Visible = true }) end return end, i.cleanup), q("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 5), VerticalAlignment = Enum.VerticalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder }) } }), q("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = l(function() local F = e(B) local G = string.format("%." .. w.Rounding .. "f", x(F, w.Rounding)) return G .. w.Suffix end), TextColor3 = d(function() if z:get() then return r.text:get() end return r.secondary_text:get() end, 40, 1), TextSize = 15, TextXAlignment = Enum.TextXAlignment.Right, AnchorPoint = Vector2.new(1, 0.5), AutomaticSize = Enum.AutomaticSize.XY, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(1, 0.5) }) } }) }, [n("InputBegan")] = function(F) if F.UserInputType == Enum.UserInputType.MouseButton1 or F.UserInputType == Enum.UserInputType.Touch then z:set(true) end end, [n("InputEnded")] = function(F) if F.UserInputType == Enum.UserInputType.MouseButton1 or F.UserInputType == Enum.UserInputType.Touch then z:set(false) end end, }) table.insert( e(j.Library).Connections, b.RenderStepped:Connect(function() if not e(z) then return end local F = e(y) local G, H = F.AbsolutePosition.X, F.AbsoluteSize.X local I = math.min(math.max(0, ae:GetMouseLocation().X - G), H) local J = w.Min + ((I / H) * (w.Max - w.Min)) J = x(J, w.Rounding) J = math.min(J, w.Max) J = math.max(J, w.Min) B:set(J) w.Value = tonumber(e(B)) end) ) g(function() w.Callback(e(B)) end) function w.OnChanged(F, G) w.Changed = G G(e(B)) end function w.SetValue(F, G) B:set(tonumber(G)) w.Value = tonumber(e(B)) end function w.UpdateMin(F, G) w.Min = G E() end function w.UpdateMax(F, G) w.Max = G E() end f(t.Container, w.Root) e(j.Library).Options[u] = w return w end return s end)() end, function() local aa, ab, ac = a(11) local ad return (function(...) local ae = ab.Parent.Parent.utils local b, c, d = ac(ae.unwrap), ac(ae.insertitem), ab.Parent.Parent.packages local e, f = ac(d.fusion), ac(d.states) local g, h, i, j, k, l, m, n = e.Children, e.Computed, e.ForPairs, e.Value, e.Ref, e.New, ac(ab.Parent.Parent.storage.theme), {} n.__index = n n.__type = "Table" function n.New(o, p, q) local r, s, t, u = { Headers = q.Headers or {}, Rows = q.Rows or {}, Type = "Table" }, j({}), j({}), j() r.Root = l("Frame")({ Name = "Table", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [g] = { l("Frame")({ Name = "TextHolder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 0), [g] = { l("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = q.Title, TextColor3 = m.secondary_text, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0) }), l("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 5), VerticalAlignment = Enum.VerticalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder }), h(function() if q.Description then return l("TextLabel")({ Name = "Description", FontFace = Font.new("rbxassetid://12187365364"), RichText = true, Text = q.Description, TextColor3 = m.tertiary_text, TextSize = 15, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0), Visible = true }) end return end, e.cleanup) } }), l("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 8), SortOrder = Enum.SortOrder.LayoutOrder }), l("Frame")({ Name = "Holder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = m.secondary_background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [g] = { l("UIStroke")({ Name = "UIStroke", Color = m.stroke }), l("UIListLayout")({ Name = "UIListLayout", SortOrder = Enum.SortOrder.LayoutOrder }), l("Frame")({ [k] = u, Name = "Top", BackgroundColor3 = m.background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, LayoutOrder = -1, Size = UDim2.new(1, 0, 0, 30), [g] = { l("UIStroke")({ Name = "UIStroke", Color = m.stroke }), l("UIListLayout")({ Name = "UIListLayout", FillDirection = Enum.FillDirection.Horizontal, SortOrder = Enum.SortOrder.LayoutOrder }), i(s, function(v, w) return v, w end, e.cleanup) } }), l("Frame")({ Name = "Entry", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 30), [g] = { l("UIListLayout")({ Name = "UIListLayout", SortOrder = Enum.SortOrder.LayoutOrder }), i(t, function(v, w) return v, w end, e.cleanup) } }) } }) } }) function r.Render(v) s:set({}) t:set({}) for w, x in next, r.Headers do local y = l("Frame")({ Name = "Header", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = h(function() return UDim2.new(1 / #b(s), 0, 1, 0) end), [g] = { l("Frame")({ Name = "UIStroke", BackgroundColor3 = m.stroke, Size = UDim2.new(0, 1, 1, 0), Position = UDim2.fromScale(1, 0) }), l("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = x.Name, TextColor3 = m.secondary_text, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, TextTruncate = Enum.TextTruncate.AtEnd, Size = UDim2.fromScale(1, 1), [g] = { l("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 10) }) } }) } }) c(s, y) end for w, x in next, r.Rows do local y, z = j({}), j(false) if q.AlternateBackground and #b(t) % 2 == 1 then z:set(true) end local A = l("Frame")({ Name = "Row", BackgroundColor3 = h(function() if z:get() then return m.background:get() end return m.secondary_background:get() end), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, LayoutOrder = -1, Size = UDim2.new(1, 0, 0, 30), [g] = { l("UIStroke")({ Name = "UIStroke", Color = m.stroke }), l("UIListLayout")({ Name = "UIListLayout", FillDirection = Enum.FillDirection.Horizontal, SortOrder = Enum.SortOrder.LayoutOrder }), i(y, function(A, B) return A, B end, e.cleanup) } }) for B, C in next, r.Headers do local D = j() local E = l("Frame")({ Name = "Entry", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = h(function() return UDim2.new(1 / #b(s), 0, 1, 0) end), [g] = { l("Frame")({ Name = "UIStroke", BackgroundColor3 = m.stroke, Size = UDim2.new(0, 1, 1, 0), Position = UDim2.fromScale(1, 0) }), l("TextBox")({ [k] = D, Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = tostring(x[C.Key] or ""), TextColor3 = m.secondary_text, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, TextTruncate = Enum.TextTruncate.AtEnd, Size = UDim2.fromScale(1, 1), ClearTextOnFocus = false, Interactable = C.Editable or false, [g] = { l("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 10) }) }, [e.OnEvent("FocusLost")] = function(E, F) if q.OnRowUpdate then local G = table.clone(x) G[C.Key] = b(D).Text q.OnRowUpdate(w, G) end end, }) } }) c(y, E) end c(t, A) end end function r.UpdateHeaders(v, w) r.Headers = w r:Render() end function r.UpdateRows(v, w) r.Rows = w r:Render() end r:Render() c(o.Container, r.Root) b(f.Library).Options[p] = r return r end return n end)() end, function() local aa, ab, ac = a(12) local ad return (function(...) local ae = ab.Parent.Parent.utils local b, c = ac(ae.insertitem), ab.Parent.Parent.packages local d = ac(c.fusion) local e, f, g, h, i = d.Children, d.Computed, d.Value, d.New, ac(ab.Parent.Parent.storage.theme) type ToggleProps = { Title: string, Description: string? } local j = {} j.__index = j j.__type = "Text" function j.New(k, l: ToggleProps) local m = { Title = g(l.Title) or nil, Description = g(l.Description) or nil } m.Root = h("Frame")({ Name = "Text", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 0), [e] = { h("Frame")({ Name = "TextHolder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, -80, 1, 0), [e] = { f(function() if m.Title then return h("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = m.Title, TextColor3 = i.secondary_text, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0) }) end return end, d.cleanup), h("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 5), VerticalAlignment = Enum.VerticalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder }), f(function() if m.Description then return h("TextLabel")({ Name = "Description", FontFace = Font.new("rbxassetid://12187365364"), RichText = true, Text = m.Description, TextColor3 = i.tertiary_text, TextSize = 15, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0), Visible = true }) end return end, d.cleanup) } }) } }) function m.SetTitle(n, o) m.Title:set(o) end function m.SetDescription(n, o) m.Description:set(o) end b(k.Container, m.Root) return m end return j end)() end, function() local aa, ab, ac = a(13) local ad return (function(...) local ae, b, c = game:GetService("GuiService"), game:GetService("UserInputService"), ab.Parent.Parent.utils local d, e, f, g, h = ac(c.animate), ac(c.unwrap), ac(c.insertitem), ac(c.safecallback), ab.Parent.Parent.packages local i, j = ac(h.fusion), ac(h.states) local k, l, m, n, o, p, q, r, s = i.Children, i.Computed, i.Observer, i.OnEvent, i.Value, i.New, i.Ref, i.OnChange, ac(ab.Parent.Parent.storage.theme) type ToggleProps = { Title: string, Description: string?, Default: boolean?, Callback: (...any) -> ...any?, KeybindDefault: boolean?, KeybindType: string?, KeybindCallback: (...any) -> ...any? } local t = {} t.__index = t t.__type = "Toggle" function t.New(u, v, w: ToggleProps) local x, y, z, A, B, C, D = { Value = w.Default or false, Callback = w.Callback or function(x) end, Type = "Toggle", Changed = function(x) end, Connections = {}, Keybind = nil }, o(false), o(nil), o(), o(false), o(), o(false) local E, F, G, H, I = function() D:set(true) end, function() D:set(false) end, d(function() if D:get() or z:get() then if z:get() then return 0.15 end return 0.85 end return 1 end, 40, 1), d(function() if z:get() then return s.accent:get() end return s.tertiary_text:get() end, 40, 1), o(false) local J, K, L = function() I:set(true) end, function() I:set(false) end, d(function() if I:get() then return s.secondary_text:get() end return s.tertiary_text:get() end, 40, 1) x.Root = p("Frame")({ Name = w.Title, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 0), [k] = { p("Frame")({ Name = "Addons", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(1, 0), Size = UDim2.fromScale(0, 1), [k] = { p("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 12), FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), l(function() if y:get() then return p("ImageButton")({ [q] = A, Name = "ImageButton", Image = "rbxassetid://86391022976797", ImageColor3 = L, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromOffset(16, 16), LayoutOrder = -1, [n("MouseEnter")] = J, [n("MouseLeave")] = K, [n("InputEnded")] = function(M) if M.UserInputType == Enum.UserInputType.MouseButton1 or M.UserInputType == Enum.UserInputType.Touch then B:set(not B:get()) end end, }) end return end, i.cleanup), p("Frame")({ Name = "Checkbox", AnchorPoint = Vector2.new(1, 0.5), BackgroundColor3 = Color3.fromRGB(114, 149, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, LayoutOrder = 1, Position = UDim2.fromScale(1, 0.5), Size = UDim2.fromOffset(24, 24), [k] = { p("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }), p("UIStroke")({ [q] = C, Name = "UIStroke", Color = H, Thickness = 2, Transparency = G }), p("ImageButton")({ Name = "Main", AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = d(function() if z:get() then return s.accent:get() end return s.background:get() end, 40, 1), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, LayoutOrder = 1, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.fromOffset(20, 20), [k] = { p("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 2) }), p("UIStroke")({ Name = "UIStroke", Color = s.stroke, Enabled = l(function() if not z:get() then return true end return false end) }), p("ImageLabel")({ Name = "ImageLabel", Image = "rbxassetid://128735638309771", ImageColor3 = Color3.fromRGB(0, 0, 0), ImageTransparency = d(function() if z:get() then return 0 end return 1 end, 15, 1), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.fromOffset(14, 14) }) }, [n("MouseEnter")] = E, [n("MouseLeave")] = F, [n("InputEnded")] = function(M) if M.UserInputType == Enum.UserInputType.MouseButton1 or M.UserInputType == Enum.UserInputType.Touch then x:SetValue(not z:get()) end end, }) } }) } }), p("Frame")({ Name = "TextHolder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, -80, 1, 0), [k] = { p("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = w.Title, TextColor3 = d(function() if z:get() then return s.text:get() end return s.secondary_text:get() end, 40, 1), TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0) }), p("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 5), VerticalAlignment = Enum.VerticalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder }), l(function() if w.Description then return p("TextLabel")({ Name = "Description", FontFace = Font.new("rbxassetid://12187365364"), RichText = true, Text = w.Description, TextColor3 = s.tertiary_text, TextSize = 15, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0), Visible = true }) end return end, i.cleanup) }, [n("MouseEnter")] = E, [n("MouseLeave")] = F, [n("InputEnded")] = function(M) if M.UserInputType == Enum.UserInputType.MouseButton1 or M.UserInputType == Enum.UserInputType.Touch then x:SetValue(not z:get()) end end, }) } }) do function x.AddKeybind(M, N) local O = v .. "_Keybind" y:set(true) local P = { Value = N.Default or ". . .", Toggled = x.Value, Mode = N.Type or "Toggle", Type = "Keybind", Callback = N.Callback or function(P) end, Changed = function(P) end, Clicked = function(P) end, SyncState = N.SyncState or false } x.Keybind = P P.Toggle = x.Value m(z):onChange(function() P.Toggle = z:get() P.Toggled = z:get() end) local Q, R, S, T, U, V = o(P.Mode), o(), o(), o(), o(), o(false) local W = function() local W, X, Y, Z = e(A).AbsolutePosition, e(A).AbsoluteSize, e(T), ae:GetGuiInset() Y.Position = UDim2.fromOffset(W.X, W.Y + X.Y + 10 + Z.Y) end m(B):onChange(function() if B:get() then local X = e(A):GetPropertyChangedSignal("AbsolutePosition"):Connect(function() W() end) table.insert(x.Connections, X) W() local Y = b.InputBegan:Connect(function(Y) if Y.UserInputType == Enum.UserInputType.MouseButton1 or Y.UserInputType == Enum.UserInputType.Touch then local Z, _ = e(T).AbsolutePosition, e(T).AbsoluteSize if B:get() and (b:GetMouseLocation().X < Z.X or b:GetMouseLocation().X > Z.X + _.X or b:GetMouseLocation().Y < Z.Y - 20) then B:set(false) end end end) table.insert(e(j.Library).Connections, Y) else for X, Y in pairs(x.Connections) do Y:Disconnect() end end end) x.KeybindMenu = p("Frame")({ [q] = T, Name = "Contexual Menu", BackgroundColor3 = s.secondary_background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = l(function() return UDim2.new(0, 235, 0, S:get()) end), Visible = B, Parent = e(j.Library).GUI, ZIndex = 9999, Interactable = true, Active = true, [k] = { p("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), p("UIStroke")({ Name = "UIStroke", Color = s.stroke }), p("Frame")({ [q] = R, Name = "Holder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [k] = { p("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 5), HorizontalAlignment = Enum.HorizontalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder }), p("Frame")({ Name = "Keybind", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = s.secondary_background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, -10, 0, 0), [k] = { p("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), p("UIStroke")({ Name = "UIStroke", Color = s.stroke }), p("Frame")({ Name = "Picker", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [k] = { p("TextButton")({ [q] = U, Name = "Interact", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = N.Default or ". . .", TextColor3 = s.tertiary_text, TextSize = 14, AnchorPoint = Vector2.new(1, 0.5), AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.new(1, -10, 0.5, 0), Size = UDim2.fromOffset(0, 25), [n("InputBegan")] = function(X) if X.UserInputType == Enum.UserInputType.MouseButton1 or X.UserInputType == Enum.UserInputType.Touch then local Y = e(U) if not Y then return end V:set(true) Y.Text = "..." task.wait(0.2) local Z Z = b.InputBegan:Connect(function(_) local af if _.UserInputType == Enum.UserInputType.Keyboard and _.KeyCode.Name ~= "Escape" then af = _.KeyCode.Name elseif _.UserInputType == Enum.UserInputType.MouseButton1 then af = "MouseLeft" elseif _.UserInputType == Enum.UserInputType.MouseButton2 then af = "MouseRight" end local ag ag = b.InputEnded:Connect(function(ah) if ah.KeyCode.Name == af or af == "MouseLeft" and ah.UserInputType == Enum.UserInputType.MouseButton1 or af == "MouseRight" and ah.UserInputType == Enum.UserInputType.MouseButton2 then V:set(false) Y.Text = af P.Value = af g(function() P.Changed(ah.KeyCode or ah.UserInputType) end) Z:Disconnect() ag:Disconnect() end end) end) end end, }), p("Frame")({ Name = "Text", AutomaticSize = Enum.AutomaticSize.XY, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, [k] = { p("TextLabel")({ Name = "TextLabel", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = "Keybind", TextColor3 = s.secondary_text, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.XY, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(10, 0) }), p("ImageLabel")({ Name = "ImageLabel", Image = "rbxassetid://95416489678224", ImageColor3 = s.tertiary_text, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, LayoutOrder = -1, Size = UDim2.fromOffset(16, 16) }), p("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 7), FillDirection = Enum.FillDirection.Horizontal, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), p("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 8) }) } }) } }), p("Frame")({ Name = "Types", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 30), [k] = { p("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 4), FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), p("TextButton")({ Name = "TextButton", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = "Toggle", TextColor3 = d(function() if Q:get() == "Toggle" then return s.text:get() else return s.secondary_text:get() end end, 40, 1), TextSize = 14, AutoButtonColor = false, BackgroundColor3 = d(function() if Q:get() == "Toggle" then return s.accent:get() else return s.secondary_background:get() end end, 40, 1), BackgroundTransparency = 0, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromOffset(106, 25), [k] = { p("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), p("UIStroke")({ Name = "UIStroke", ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Color = s.stroke, Enabled = true }) }, [n("MouseButton1Click")] = function() P.Mode = "Toggle" Q:set("Toggle") end, }), p("TextButton")({ Name = "Hold", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = "Hold", TextColor3 = d(function() if Q:get() == "Hold" then return s.text:get() else return s.secondary_text:get() end end, 40, 1), TextSize = 14, AutoButtonColor = false, BackgroundColor3 = d(function() if Q:get() == "Hold" then return s.accent:get() else return s.secondary_background:get() end end, 40, 1), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromOffset(106, 25), [k] = { p("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), p("UIStroke")({ Name = "UIStroke", ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Color = s.stroke, Enabled = true }) }, [n("MouseButton1Click")] = function() P.Mode = "Hold" Q:set("Hold") end, }) } }), p("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 2), SortOrder = Enum.SortOrder.LayoutOrder }), p("UIPadding")({ Name = "UIPadding", PaddingBottom = UDim.new(0, 10), PaddingTop = UDim.new(0, 10) }) } }), p("UIPadding")({ Name = "UIPadding", PaddingBottom = UDim.new(0, 5), PaddingTop = UDim.new(0, 5) }) }, [r("AbsoluteSize")] = function() S:set(e(R).AbsoluteSize.Y) end, }), p("ImageLabel")({ Name = "EShadow", Image = "rbxassetid://9313765853", ImageColor3 = s.background, ImageTransparency = 0.5, ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(45, 45, 45, 45), SliceScale = 1.2, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(27, 42, 53), ClipsDescendants = true, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.new(1, 75, 1, 75), ZIndex = -1 }) } }) function P.GetState(af) if b:GetFocusedTextBox() and P.Mode ~= "Always" then return false end if P.Mode == "Always" then return true elseif P.Mode == "Hold" then if P.Value == "None" then return false end local ag = P.Value if ag == "MouseLeft" or ag == "MouseRight" then return ag == "MouseLeft" and b:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) or ag == "MouseRight" and b:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) else return b:IsKeyDown(Enum.KeyCode[P.Value]) end else return P.Toggled end end function P.SetValue(af, ag, ah) ag = ag or P.Value ah = ah or P.Mode e(U).Text = ag or ". . ." P.Value = ag P.Mode = ah end function P.OnClick(af, ag) P.Clicked = ag end function P.OnChanged(af, ag) P.Changed = ag ag(P.Value) end function P.DoClick(af) g(function() P.Callback(P.Toggled) end) g(function() P.Clicked(P.Toggled) end) end table.insert( e(j.Library).Connections, b.InputBegan:Connect(function(af) if not V:get() and not b:GetFocusedTextBox() then if P.Mode == "Toggle" then local ag = P.Value if ag == "MouseLeft" or ag == "MouseRight" then if ag == "MouseLeft" and af.UserInputType == Enum.UserInputType.MouseButton1 or ag == "MouseRight" and af.UserInputType == Enum.UserInputType.MouseButton2 then P.Toggled = not P.Toggled if N.SyncState then x:SetValue(P.Toggled) end P:DoClick() end elseif af.UserInputType == Enum.UserInputType.Keyboard then if af.KeyCode.Name == ag then P.Toggled = not P.Toggled if P.SyncState then x:SetValue(P.Toggled) end P:DoClick() end end elseif P.Mode == "Hold" then local ag = P.Value if ag == "MouseLeft" or ag == "MouseRight" then if ag == "MouseLeft" and af.UserInputType == Enum.UserInputType.MouseButton1 or ag == "MouseRight" and af.UserInputType == Enum.UserInputType.MouseButton2 then if N.SyncState then x:SetValue(true) end P:DoClick() end elseif af.UserInputType == Enum.UserInputType.Keyboard then if af.KeyCode.Name == ag then if N.SyncState then x:SetValue(true) end P:DoClick() end end end end end) ) table.insert( e(j.Library).Connections, b.InputEnded:Connect(function(af) if not V:get() and not b:GetFocusedTextBox() and P.Mode == "Hold" then local ag = P.Value if ag == "MouseLeft" or ag == "MouseRight" then if ag == "MouseLeft" and af.UserInputType == Enum.UserInputType.MouseButton1 or ag == "MouseRight" and af.UserInputType == Enum.UserInputType.MouseButton2 then if N.SyncState then x:SetValue(false) end P:DoClick() end elseif af.UserInputType == Enum.UserInputType.Keyboard then if af.KeyCode.Name == ag then if N.SyncState then x:SetValue(false) end P:DoClick() end end end end) ) e(j.Library).Options[O] = P end end function x.OnChanged(af, ag) x.Changed = ag ag(x.Value) end function x.SetValue(af, ag: boolean) x.Value = ag z:set(ag) end function x.GetValue(af) return x.Value end local af = m(z) af:onChange(function() g(function() x.Callback(z:get()) x.Changed(z:get()) end) end) x:SetValue(x.Value) f(u.Container, x.Root) e(j.Library).Options[v] = x return x end return t end)() end, function() local aa, ab, ac = a(14) local ad return (function(...) local ae, af = game:GetService("UserInputService"), ab.Parent local ag, ah = af.components, af.packages local b, c, d, e = ac(ah.fusion), ac(ah.states), ac(ah.damerau), ac(ah.cmdr) local f, g, h, i, j = b.Observer, ac(ag.commandbar.bar), ac(ag.commandbar.suggestions), ac(ag.commandbar.suggestion), {} function j.Initialize(k) ae.InputBegan:Connect(function(l, m) if m then return end if not c.DisableCommandBar then return end if l.KeyCode == c.CommandBarPrefix:get() then task.wait() c.CommandBarOpened:set(true) end end) end function j.SetupModuleSystem(k) local l = k:BuildTree() local m, n, o = k:BuildNames(l), e.new({}), f(c.CommandBarText) o:onChange(function() local p, q = {}, c.CommandBarText:get() for r, s in m do local t, u = l[s], d.raw(q, s) if t.aliases then for v, w in ipairs(t.aliases) do local x = d.raw(q, w) if x < u then u = x end end end p[s] = u end local r = {} for s in p do table.insert(r, s) end table.sort(r, function(s, t) return p[s] < p[t] end) local s = {} for t, u in r do if p[u] < 5 then local v, w = l[u], u if v.aliases and #v.aliases > 0 then w = w .. " / " .. table.concat(v.aliases, " / ") end table.insert(s, i({ name = w, description = v.description, types = v.arguments, top = t == 1 and true or false })) end end c.Suggestions:set(s) end) for p, q in af.modules:GetChildren() do local r = ac(q) n:newCommand({ name = r.name, aliases = r.aliases, description = r.Description, arguments = r.arguments, callback = r.callback }) c.add("Commands", r, r.name) end local p = f(c.ToExecute) p:onChange(function() task.wait() local q = c.ToExecute:get() if q == "" then return end n:executeCommand(q) c.ToExecute:set("") end) return function(q, r) assert(type(r) == "table", "Module data must be a table") assert(type(r.name) == "string", "Module must have a name") assert(type(r.description) == "string", "Module must have a description") assert(type(r.callback) == "function", "Module must have a callback function") if not r.arguments then r.arguments = {} end l[r.name] = r table.insert(m, r.name) n:newCommand({ name = r.name, aliases = r.aliases or {}, description = r.description, arguments = r.arguments or {}, callback = r.callback }) c.add("Commands", r, r.name) end end function j.BuildTree(k) local l, m = {}, af.modules:GetChildren() for n, o in m do local p = ac(o) l[p.name] = p end return l end function j.BuildNames(k, l) local m = {} for n, o in l do table.insert(m, o.name) end return m end return j end)() end, [17] = function() local aa, ab, ac = a(17) local ad return (function(...) local ae = ab.Parent.Parent.Parent.utils local af, ag, ah = ac(ae.animate), ac(ae.unwrap), ab.Parent.Parent.Parent.packages local b, c, d = ac(ah.fusion), ac(ah.states), ac(ab.Parent.Parent.Parent.storage.theme) local e, f, g, h, i, j, k, l, m, n, o, p, q = b.Children, b.OnEvent, b.Value, b.Computed, b.Ref, b.New, b.OnChange, b.Observer, b.ForValues, b.ForPairs, game:GetService("UserInputService"), ac(ab.Parent.message), ac(ab.Parent.input) return function(r) r = r or {} local s, t, u, v, w, x, y, z, A = g(), g(), g(), r.Visible ~= nil and g(r.Visible) or g(true), r.Position ~= nil and g(r.Position) or g(UDim2.new(0.5, -200, 0.2, 0)), r.Size ~= nil and g(r.Size) or g(UDim2.fromOffset(400, 500)), g(false), g(Vector2.new(0, 0)), l(c.ChatMessages) A:onChange(function() task.wait() if t:get() then local B = ag(t) B.CanvasPosition = Vector2.new(0, B.CanvasSize.Y.Offset) end end) local B, C, D, E, F = function(B) local C, D = ag(u), ag(s) if not C or not D then return end local E, F = Vector2.new(B.Position.X, B.Position.Y), C.AbsolutePosition z:set(E - F) y:set(true) end, function(B) if not y:get() then return end local C, D = Vector2.new(B.Position.X, B.Position.Y), ag(u) if D then local E = UDim2.new(0, C.X - z:get().X, 0, C.Y - z:get().Y) w:set(E) end end, function() y:set(false) end, {}, l(u) F:onChange(function() for G, H in ipairs(E) do H:Disconnect() end E = {} local G = ag(u) if G then table.insert( E, G.InputBegan:Connect(function(H) if H.UserInputType == Enum.UserInputType.MouseButton1 then B(H) end end) ) table.insert( E, o.InputChanged:Connect(function(H) if H.UserInputType == Enum.UserInputType.MouseMovement then C(H) end end) ) table.insert( E, o.InputEnded:Connect(function(H) if H.UserInputType == Enum.UserInputType.MouseButton1 then D() end end) ) end end) return j("Frame")({ Name = "ChatWindow", AnchorPoint = Vector2.new(0, 0), BackgroundColor3 = d.background, Size = x, Position = w, Visible = v, [i] = s, [e] = { j("UICorner")({ CornerRadius = UDim.new(0, 8) }), j("UIStroke")({ Color = d.stroke, Thickness = 1 }), j("ImageLabel")({ Name = "Shadow", AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.new(1, 24, 1, 24), ZIndex = -1, Image = "rbxassetid://6014261993", ImageColor3 = Color3.fromRGB(0, 0, 0), ImageTransparency = 0.6, ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(49, 49, 450, 450) }), j("Frame")({ Name = "Header", BackgroundColor3 = d.secondary_background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 40), [i] = u, [e] = { j("UICorner")({ CornerRadius = UDim.new(0, 8) }), j("Frame")({ Name = "BottomCover", AnchorPoint = Vector2.new(0, 1), BackgroundColor3 = d.secondary_background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0, 1), Size = UDim2.new(1, 0, 0, 8) }), j("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold, Enum.FontStyle.Normal), Text = "Global Chat", TextColor3 = d.text, TextSize = 18, TextXAlignment = Enum.TextXAlignment.Left, AnchorPoint = Vector2.new(0, 0.5), BackgroundTransparency = 1, Position = UDim2.new(0, 15, 0.5, 0), Size = UDim2.new(0, 200, 0, 20) }), j("TextLabel")({ Name = "DragHint", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Italic), Text = "Drag to move", TextColor3 = d.tertiary_text, TextSize = 12, TextXAlignment = Enum.TextXAlignment.Right, AnchorPoint = Vector2.new(1, 0.5), BackgroundTransparency = 1, Position = UDim2.new(1, -15, 0.5, 0), Size = UDim2.new(0, 100, 0, 20) }), j("Frame")({ Name = "StatusIndicator", AnchorPoint = Vector2.new(1, 0.5), BackgroundColor3 = h(function() return c.ChatConnected:get() and Color3.fromRGB(76, 175, 80) or Color3.fromRGB(239, 83, 80) end), Position = UDim2.new(1, -125, 0.5, 0), Size = UDim2.fromOffset(8, 8), [e] = { j("UICorner")({ CornerRadius = UDim.new(1, 0) }), j("UIStroke")({ Color = Color3.fromRGB(255, 255, 255), Thickness = 1, Transparency = 0.8 }) } }), j("TextLabel")({ Name = "StatusText", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal), Text = h(function() return c.ChatConnected:get() and "Connected" or "Disconnected" end), TextColor3 = h(function() return c.ChatConnected:get() and Color3.fromRGB(76, 175, 80) or Color3.fromRGB(239, 83, 80) end), TextSize = 12, TextXAlignment = Enum.TextXAlignment.Right, AnchorPoint = Vector2.new(1, 0.5), BackgroundTransparency = 1, Position = UDim2.new(1, -140, 0.5, 0), Size = UDim2.new(0, 80, 0, 20) }) } }), j("ScrollingFrame")({ Name = "Messages", BackgroundColor3 = d.background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.new(0, 0, 0, 40), Size = UDim2.new(1, 0, 1, -90), CanvasSize = UDim2.new(0, 0, 0, 0), AutomaticCanvasSize = Enum.AutomaticSize.Y, ScrollBarThickness = 6, ScrollBarImageColor3 = d.accent, ScrollingDirection = Enum.ScrollingDirection.Y, VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar, [i] = t, [e] = { j("UIPadding")({ PaddingTop = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10), PaddingLeft = UDim.new(0, 15), PaddingRight = UDim.new(0, 15) }), j("UIListLayout")({ Padding = UDim.new(0, 8), SortOrder = Enum.SortOrder.LayoutOrder }), m(c.ChatMessages, function(G, H) return p({ Message = G, LayoutOrder = H }) end, b.cleanup) } }), q({ Position = UDim2.new(0, 0, 1, -50), Size = UDim2.new(1, 0, 0, 50) }) } }) end end)() end, [18] = function() local aa, ab, ac = a(18) local ad return (function(...) local ae = ab.Parent.Parent.Parent.utils local af, ag, ah = ac(ae.animate), ac(ae.unwrap), ab.Parent.Parent.Parent.packages local b, c, d, e = ac(ah.fusion), ac(ah.states), ac(ah.audio), ac(ab.Parent.Parent.Parent.storage.theme) local f, g, h, i, j, k, l = b.Children, b.OnEvent, b.Value, b.Ref, b.New, b.OnChange, ac(ab.Parent.Parent.Parent.chat) return function(m) m = m or {} local n, o, p, q = m.Position or UDim2.new(0, 0, 1, -50), m.Size or UDim2.new(1, 0, 0, 50), h(), h("") local r = function() local r = q:get() if r and r:len() > 0 then l:SendMessage(r) q:set("") if p:get() then ag(p).Text = "" ag(p):CaptureFocus() end end end return j("Frame")({ Name = "ChatInput", BackgroundColor3 = e.secondary_background, Position = n, Size = o, [f] = { j("UIPadding")({ PaddingTop = UDim.new(0, 8), PaddingBottom = UDim.new(0, 8), PaddingLeft = UDim.new(0, 15), PaddingRight = UDim.new(0, 15) }), j("UICorner")({ CornerRadius = UDim.new(0, 8) }), j("Frame")({ Name = "TopCover", BackgroundColor3 = e.secondary_background, BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 8) }), j("TextBox")({ Name = "InputField", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal), PlaceholderColor3 = e.tertiary_text, PlaceholderText = "Type a message...", Text = "", TextColor3 = e.text, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, BackgroundColor3 = e.background, Position = UDim2.fromOffset(0, 0), Size = UDim2.new(1, -80, 1, 0), ClipsDescendants = true, [i] = p, [f] = { j("UICorner")({ CornerRadius = UDim.new(0, 6) }), j("UIPadding")({ PaddingLeft = UDim.new(0, 12), PaddingRight = UDim.new(0, 12) }), j("UIStroke")({ Color = e.stroke, Thickness = 1 }) }, [k("Text")] = function() local s = ag(p) local t, u = s.Text, q:get() if #t > #u then d:Play("Key") elseif #t < #u then if s:IsFocused() then d:Play("Backspace") end end q:set(t) end, [g("FocusLost")] = function(s) if s then r() d:Play("Enter") end end, }), j("TextButton")({ Name = "SendButton", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold, Enum.FontStyle.Normal), Text = "Send", TextColor3 = e.background, TextSize = 14, BackgroundColor3 = e.accent, Position = UDim2.new(1, -70, 0, 0), Size = UDim2.fromOffset(70, 34), [f] = { j("UICorner")({ CornerRadius = UDim.new(0, 6) }), j("UIStroke")({ Color = Color3.fromRGB(255, 255, 255), Thickness = 1, Transparency = 0.8 }) }, [g("Activated")] = function() r() d:Play("Enter") end, }) } }) end end)() end, [19] = function() local aa, ab, ac = a(19) local ad return (function(...) local ae = ab.Parent.Parent.Parent.utils local af, ag, ah = ac(ae.animate), ac(ae.unwrap), ab.Parent.Parent.Parent.packages local b, c, d = ac(ah.fusion), ac(ah.states), ac(ab.Parent.Parent.Parent.storage.theme) local e, f, g, h, i = b.Children, b.Computed, b.New, b.Value, function(e) local f = os.date("*t", e) return string.format("%02d:%02d", f.hour, f.min) end return function(j) local k, l, m = j.Message, j.LayoutOrder or 0, c.CurrentUser:get() local n = k.user and k.user.name == m.name if k.type == "system" then return g("Frame")({ Name = "SystemMessage", BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 30), LayoutOrder = l, [e] = { g("TextLabel")({ Name = "Content", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Italic), Text = k.content, TextColor3 = d.tertiary_text, TextSize = 14, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Center, BackgroundTransparency = 1, Size = UDim2.new(1, 0, 1, 0) }) } }) end return g("Frame")({ Name = "UserMessage", BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, LayoutOrder = l, [e] = { g("Frame")({ Name = "MessageContainer", AnchorPoint = n and Vector2.new(1, 0) or Vector2.new(0, 0), BackgroundColor3 = n and d.accent or d.secondary_background, Position = n and UDim2.fromScale(1, 0) or UDim2.fromScale(0, 0), Size = UDim2.new(0.8, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, [e] = { g("UICorner")({ CornerRadius = UDim.new(0, 8) }), g("UIPadding")({ PaddingTop = UDim.new(0, 8), PaddingBottom = UDim.new(0, 8), PaddingLeft = UDim.new(0, 12), PaddingRight = UDim.new(0, 12) }), not n and g("Frame")({ Name = "UserInfo", BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 24), [e] = { g("TextLabel")({ Name = "Username", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold, Enum.FontStyle.Normal), Text = k.user.name, TextColor3 = n and d.background or d.text, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, Size = UDim2.new(1, 0, 1, 0) }) } }) or nil, g("TextLabel")({ Name = "Content", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal), Text = k.content, TextColor3 = n and d.background or d.text, TextSize = 15, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, TextYAlignment = Enum.TextYAlignment.Top, BackgroundTransparency = 1, Position = UDim2.new(0, 0, 0, not n and 30 or 0), Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y }) } }) } }) end end)() end, [21] = function() local aa, ab, ac = a(21) local ad return (function(...) local ae = ab.Parent.Parent.Parent.utils local af, ag, ah = ac(ae.animate), ac(ae.unwrap), ab.Parent.Parent.Parent.packages local b, c, d, e = ac(ah.fusion), ac(ah.states), ac(ah.audio), ac(ab.Parent.Parent.Parent.storage.theme) local f, g, h, i, j, k, l = b.Children, b.OnEvent, b.Value, b.Ref, b.New, b.OnChange, b.Observer return function() local m, n, o, p, q = h(UDim2.new(0.5, 0, 0, 100)), h(), h(), h(1), l(c.CommandBarOpened) q:onChange(function() if ag(c.CommandBarOpened) then p:set(1) m:set(UDim2.new(0.5, 0, 0, 130)) ag(n):CaptureFocus() else ag(n):ReleaseFocus() end end) local r = j("CanvasGroup")({ [i] = o, Name = "Command Bar", AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = e.background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = af(function() return m:get() end, 30, 1.2), Size = UDim2.fromOffset(517, 80), GroupTransparency = af(function() return ag(c.CommandBarOpened) and 0 or 1 end, 30, 1.2), [f] = { j("UIScale")({ Name = "UIScale", Scale = p }), j("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 10) }), j("UIStroke")({ Name = "UIStroke", Color = e.stroke, Thickness = 2.5, Transparency = af(function() return ag(c.CommandBarOpened) and 0.6 or 1 end, 30, 1.2) }), j("Frame")({ Name = "Top", BackgroundColor3 = e.secondary_background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 40), [f] = { j("Frame")({ Name = "Seperator", AnchorPoint = Vector2.new(0, 1), BackgroundColor3 = e.stroke, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0, 1), Size = UDim2.new(1, 0, 0, 1) }), j("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold, Enum.FontStyle.Normal), Text = "Command Bar", TextColor3 = e.text, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(15, 0), Size = UDim2.fromScale(0, 1) }), j("TextLabel")({ Name = "TextLabel", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = "Therion - v.1.0.0", TextColor3 = e.secondary_text, TextSize = 15, TextXAlignment = Enum.TextXAlignment.Right, AnchorPoint = Vector2.new(1, 0), AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.new(1, -15, 0, 0), Size = UDim2.fromScale(0, 1) }) } }), j("TextBox")({ [i] = n, Name = "TextBox", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), PlaceholderColor3 = e.tertiary_text, PlaceholderText = "Type a command or search...", Text = "", TextColor3 = e.secondary_text, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, AnchorPoint = Vector2.new(0, 1), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0, 1), Size = UDim2.new(1, 0, 1, -40), [f] = { j("UIPadding")({ Name = "UIPadding", PaddingBottom = UDim.new(0, 1), PaddingLeft = UDim.new(0, 40) }) }, [k("Text")] = function() local r = ag(n) local s, t = r.Text, c.CommandBarText:get() if #s > #t then d:Play("Key") elseif #s < #t then task.wait() if r:IsFocused() then d:Play("Backspace") end end c.CommandBarText:set(s) end, [g("FocusLost")] = function() d:Play("Enter") c.ToExecute:set(ag(n).Text) ag(n).Text = "" c.CommandBarOpened:set(false) m:set(UDim2.new(0.5, 0, 0, 160)) task.wait(0.2) p:set(0) m:set(UDim2.new(0.5, 0, 0, 100)) end, }), j("ImageLabel")({ Name = "ImageLabel", Image = "rbxassetid://74833786606286", ImageColor3 = e.accent, AnchorPoint = Vector2.new(0, 0.5), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.new(0, 15, 0.75, 0), Size = UDim2.fromOffset(16, 16) }) } }) return r end end)() end, [22] = function() local aa, ab, ac = a(22) local ad return (function(...) local ae = ab.Parent.Parent.Parent.utils local af, ag, ah = ac(ae.animate), ac(ae.unwrap), ab.Parent.Parent.Parent.packages local b, c, d = ac(ah.fusion), ac(ah.states), ac(ab.Parent.Parent.Parent.storage.theme) local e, f, g, h, i, j, k, l, m, n = b.Children, b.OnEvent, b.Value, b.Ref, b.New, b.OnChange, b.Observer, b.ForPairs, b.Computed, { string = { color = d.accent, icon = "rbxassetid://14080619136" }, boolean = { color = d.warning, icon = "rbxassetid://14080668232" }, number = { color = d.success, icon = "rbxassetid://14080652058" } } return function(o: { name: string, description: string, top: boolean?, types: { type: string, name: string }? }) local p = i("Frame")({ Name = "Suggestion", BackgroundColor3 = d.secondary_background, BorderColor3 = Color3.fromRGB(37, 40, 44), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 55), BackgroundTransparency = m(function() return o.top and 0 or 0.7 end), [e] = { i("UIStroke")({ Name = "UIStroke", Color = Color3.fromRGB(48, 52, 56) }), i("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 6) }), i("Frame")({ Name = "TextHolder", AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(0, 1), [e] = { i("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 1), SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), i("TextLabel")({ Name = "TextLabel", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal), Text = o.name, TextColor3 = d.secondary_text, TextSize = 16, AutomaticSize = Enum.AutomaticSize.XY, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0 }), i("TextLabel")({ Name = "TextLabel", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = o.description, TextColor3 = d.tertiary_text, TextSize = 14, AutomaticSize = Enum.AutomaticSize.XY, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0 }), i("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 10) }) } }), i("Frame")({ Name = "Types", AnchorPoint = Vector2.new(1, 0), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.new(1, -10, 0, 0), Size = UDim2.fromScale(0, 1), [e] = { i("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 7), FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), l(o.types, function(p, q) return p, i("Frame")({ Name = "TYPE", AutomaticSize = Enum.AutomaticSize.XY, BackgroundColor3 = n[q.type].color, BackgroundTransparency = 0.9, BorderSizePixel = 0, Size = UDim2.fromOffset(0, 0), [e] = { i("TextLabel")({ Name = "TypeText", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold, Enum.FontStyle.Normal), Text = string.upper(q.name), TextColor3 = n[q.type].color, TextSize = 13, AutomaticSize = Enum.AutomaticSize.XY, BackgroundTransparency = 1, Size = UDim2.fromScale(0, 0), TextXAlignment = Enum.TextXAlignment.Center }), i("UICorner")({ CornerRadius = UDim.new(0, 4) }), i("UIPadding")({ PaddingBottom = UDim.new(0, 6), PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10), PaddingTop = UDim.new(0, 6) }), i("UIStroke")({ Color = n[q.type].color, Transparency = 0.2, Thickness = 1.5 }) } }) end, b.cleanup) } }) } }) return p end end)() end, [23] = function() local aa, ab, ac = a(23) local ad return (function(...) local ae = ab.Parent.Parent.Parent.utils local af, ag, ah = ac(ae.animate), ac(ae.unwrap), ab.Parent.Parent.Parent.packages local b, c, d = ac(ah.fusion), ac(ah.states), ac(ab.Parent.Parent.Parent.storage.theme) local e, f, g, h, i = b.Children, b.Value, b.Ref, b.New, b.ForPairs return function() local j, k, l, m, n = f(0), f(), f(), af(function() if #ag(c.Suggestions) <= 0 then return 1 end if ag(c.CommandBarOpened) and #ag(c.CommandBarText) > 1 then return 0.02 else return 1 end end, 45, 1.2), af(function() if #ag(c.Suggestions) <= 0 then return 1 end if ag(c.CommandBarOpened) and #ag(c.CommandBarText) > 1 then return 0.6 else return 1 end end, 45, 1.2) local o = h("CanvasGroup")({ [g] = k, Name = "Suggestions", AnchorPoint = Vector2.new(0.5, 0), BackgroundColor3 = d.background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = af(function() if #ag(c.Suggestions) <= 0 then return UDim2.new(0.5, 0, 0, 200) end if ag(c.CommandBarOpened) and #ag(c.CommandBarText) > 1 then return UDim2.new(0.5, 0, 0, 180) else return UDim2.new(0.5, 0, 0, 200) end end, 45, 1.2), Size = af(function() return UDim2.fromOffset(517, math.clamp(ag(j), 72, 765)) end, 35, 1.2), GroupTransparency = m, [e] = { h("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 10) }), h("UIStroke")({ Name = "UIStroke", Color = d.stroke, Thickness = 2.5, Transparency = n }), h("UIScale")({ Name = "UIScale" }), h("Frame")({ Name = "Holder", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 1), [e] = { h("Frame")({ [g] = l, Name = "Sizing", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [e] = { h("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 8), SortOrder = Enum.SortOrder.LayoutOrder }), h("UIPadding")({ Name = "UIPadding", PaddingBottom = UDim.new(0, 8), PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8), PaddingTop = UDim.new(0, 8) }), i(c.Suggestions, function(o, p) return o, p end, b.cleanup) } }) } }) } }) ag(l):GetPropertyChangedSignal("AbsoluteSize"):Connect(function() j:set(ag(l).AbsoluteSize.Y) end) return o end end)() end, [25] = function() local aa, ab, ac = a(25) local ad return (function(...) local ae = ab.Parent.Parent.Parent.utils local af, ag, ah, b, c = ac(ae.unwrap), ac(ae.insertitem), ac(ae.animate), ac(ae.color3), ab.Parent.Parent.Parent.packages local d, e = ac(c.fusion), ac(c.states) local f, g, h, i, j, k, l, m, n = d.Children, d.Computed, d.Value, d.Tween, d.Ref, d.New, ac(ab.Parent.Parent.Parent.storage.theme), { success = "rbxassetid://102565000975009", error = "rbxassetid://119383425349619", warning = "rbxassetid://106245602962145", info = "rbxassetid://80390185288503" }, {} function n.New(o, p) p.Duration = p.Duration or 5 local q, r, s, t = h(UDim2.new(1, 15, 0, 0)), h(UDim2.new(0, 0, 0, 0)), h(UDim2.new(1, 15, 0, 3)), h() local u = k("Frame")({ Name = "Notification", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = ah(function() return af(r) end, 20, 1.2), [f] = { k("CanvasGroup")({ [j] = t, Name = "Object", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = l.secondary_background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromOffset(298, 0), Position = ah(function() return af(q) end, 30, 1.2), [f] = { k("UICorner")({ Name = "UICorner" }), k("Frame")({ Name = "Holder", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(55, 0), Size = UDim2.new(1, -60, 1, 0), [f] = { k("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 3), SortOrder = Enum.SortOrder.LayoutOrder }), k("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold, Enum.FontStyle.Normal), RichText = true, Text = p.Title, TextColor3 = l.text, TextSize = 16, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), ZIndex = 3 }), k("TextLabel")({ Name = "Description", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), RichText = true, Text = p.Description, TextColor3 = l.secondary_text, TextSize = 15, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), ZIndex = 3 }) } }), k("Frame")({ Name = "Circle", AnchorPoint = Vector2.new(0, 0.5), BackgroundColor3 = g(function() return b.lightenRGB(af(l.secondary_background), 8) end), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.new(0, 15, 0.5, 0), Size = UDim2.fromOffset(30, 30), [f] = { k("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(1, 0) }), k("ImageLabel")({ Name = "Icon", Image = m[p.Type], ImageColor3 = g(function() local u, v = p.Type if u == "info" then v = af(l.accent) elseif u == "error" then v = af(l.danger) elseif u == "warning" then v = af(l.warning) elseif u == "success" then v = af(l.success) end return v end), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.fromOffset(20, 20), [f] = { k("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(1, 0) }) } }) } }), k("UIPadding")({ Name = "UIPadding", PaddingBottom = UDim.new(0, 15), PaddingRight = UDim.new(0, 15), PaddingTop = UDim.new(0, 15) }), k("Frame")({ Name = "Frame", AnchorPoint = Vector2.new(0, 1), BackgroundColor3 = g(function() local u, v = p.Type if u == "info" then v = af(l.accent) elseif u == "error" then v = af(l.danger) elseif u == "warning" then v = af(l.warning) elseif u == "success" then v = af(l.success) end return v end), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.new(0, 0, 1, 15), Size = i( g(function() return af(s) end), TweenInfo.new(p.Duration, Enum.EasingStyle.Linear) ) }), k("UIStroke")({ Name = "UIStroke", Color = Color3.fromRGB(50, 50, 50), Thickness = 2.5, Transparency = 0.6 }) } }) } }) if not af(e.Library).SilentMode then ag(e.Notifications, u) end task.wait(0.1) task.spawn(function() r:set(UDim2.fromOffset(300, af(t).AbsoluteSize.Y)) task.delay(0.2, function() q:set(UDim2.fromScale(0, 0)) s:set(UDim2.new(0, 0, 0, 3)) task.wait(p.Duration) q:set(UDim2.new(1, 20, 0, 0)) task.wait(0.3) r:set(UDim2.fromOffset(300, -12)) task.wait(0.5) u:Destroy() end) end) return u end return n end)() end, [26] = function() local aa, ab, ac = a(26) local ad return (function(...) local ae = ab.Parent.Parent.Parent.packages local af, ag = ac(ae.fusion), ac(ae.states) local ah, b, c = af.New, af.Children, af.ForPairs return ah("Frame")({ Name = "NotificationHolder", AnchorPoint = Vector2.new(1, 1), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(1, 1), Size = UDim2.new(0, 360, 1, 0), ZIndex = 100, [b] = { ah("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 7), HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Bottom }), ah("UIPadding")({ Name = "UIPadding", PaddingBottom = UDim.new(0, 10), PaddingRight = UDim.new(0, 10) }), c(ag.Notifications, function(d, e) return d, e end, af.cleanup) } }) end)() end, [28] = function() local aa, ab, ac = a(28) local ad return (function(...) local ae = ab.Parent.Parent.Parent.utils local af, ag, ah, b, c, d = ac(ae.animate), ac(ae.color3), ac(ae.unwrap), ac(ae.insertitem), ac(ae.safecallback), ab.Parent.Parent.Parent.packages local e, f, g = ac(d.fusion), ac(d.snapdragon), ac(d.states) local h, i, j, k, l, m, n, o, p, q, r = e.Children, e.Computed, e.ForPairs, e.Observer, e.OnChange, e.OnEvent, e.Value, e.Tween, e.Ref, e.New, ac(ab.Parent.Parent.Parent.storage.theme) type CategoryProps = { Title: string, Order: number } return function(s: CategoryProps) local t, u = { Tabs = n({}), Collapsed = n(false), ExpandedHeight = n(0) }, n() t.Root = q("Frame")({ Name = "Section", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, LayoutOrder = s.Order, Size = af(function() return t.Collapsed:get() and UDim2.new(1, 0, 0, 40) or UDim2.new(1, 0, 0, ah(t.ExpandedHeight) + 42) end, 50, 1), ClipsDescendants = true, [h] = { q("Frame")({ Name = "Title", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 40), [h] = { q("TextLabel")({ Name = "TextLabel", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = s.Title, TextColor3 = r.secondary_text, TextSize = 17, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(14, 0), Size = UDim2.fromScale(0, 1) }), q("ImageButton")({ Name = "Collapse", Image = "rbxassetid://107640924738262", ImageColor3 = r.tertiary_text, AnchorPoint = Vector2.new(1, 0.5), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.new(1, -15, 0.5, -1), Size = UDim2.fromOffset(20, 20), Rotation = af(function() if t.Collapsed:get() then return 180 end return 0 end, 25, 1), [m("MouseButton1Click")] = function() t.Collapsed:set(not t.Collapsed:get()) end, }) } }), q("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 0), SortOrder = Enum.SortOrder.LayoutOrder }), q("Frame")({ Name = "Holder", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [h] = { q("UIListLayout")({ [p] = u, Name = "UIListLayout", Padding = UDim.new(0, 13), SortOrder = Enum.SortOrder.LayoutOrder, [l("AbsoluteContentSize")] = function(v) t.ExpandedHeight:set(v.Y) end, }), j(t.Tabs, function(v, w) return v, w end, e.cleanup) } }) } }) function t.AddTab(v, w) local x = ac(ab.Parent.tab)({ Title = w.Title }) b(t.Tabs, x.Root) if not g.HasSelected:get() then g.HasSelected:set(true) x.Selected:set(true) end return x end t.ExpandedHeight:set(ah(u).AbsoluteContentSize.Y) return t end end)() end, [29] = function() local aa, ab, ac = a(29) local ad return (function(...) local ae, af, ag = game:GetService("UserInputService"), game:GetService("Workspace").CurrentCamera, ab.Parent.Parent.Parent.utils local ah, b, c, d, e, f = ac(ag.animate), ac(ag.color3), ac(ag.unwrap), ac(ag.insertitem), ac(ag.safecallback), ab.Parent.Parent.Parent.packages local g, h, i = ac(f.fusion), ac(f.snapdragon), ac(f.states) local j, k, l, m, n, o, p, q, r, s, t, u, v = g.Children, g.Computed, g.ForPairs, g.ForValues, g.Observer, g.OnChange, g.OnEvent, g.Value, g.Tween, g.Ref, g.New, ac(ab.Parent.Parent.Parent.storage.theme), { Window = nil } function v.init(w, x) v.Window = x end function v.Create(w, x) local y, z = { Opened = q(false), Buttons = q({}), Connection = nil }, q() y.Root = t("TextButton")({ Name = "Modal", AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = ah(function() if y.Opened:get() then return 0.5 end return 1 end, 40, 1), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.fromScale(1, 1), ZIndex = 10, Parent = v.Window, [j] = { t("Frame")({ [s] = z, Name = "Canvas", AnchorPoint = Vector2.new(0.5, 0.5), AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = u.secondary_background, BackgroundTransparency = ah(function() if y.Opened:get() then return 0 end return 1 end, 40, 1), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.fromOffset(500, 0), [j] = { t("Frame")({ Name = "Holder", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 1), [j] = { t("Frame")({ Name = "TextHolder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [j] = { t("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 5), SortOrder = Enum.SortOrder.LayoutOrder }), t("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 20), PaddingTop = UDim.new(0, 20) }), t("TextLabel")({ Name = "TextLabel", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = x.Title, TextColor3 = u.secondary_text, TextSize = 17, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.XY, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(15, 0), TextTransparency = ah(function() if y.Opened:get() then return 0 end return 1 end, 40, 1) }), t("TextLabel")({ Name = "Description", FontFace = Font.new("rbxassetid://12187365364"), RichText = true, Text = x.Description, TextColor3 = u.tertiary_text, TextSize = 15, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 10), Size = UDim2.fromScale(1, 0), TextTransparency = ah(function() if y.Opened:get() then return 0 end return 1 end, 40, 1) }) } }), t("Frame")({ Name = "Buttons", AnchorPoint = Vector2.new(0, 1), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0, 1), Size = UDim2.new(1, 0, 0, 40), [j] = { t("Frame")({ Name = "Seperator", BackgroundTransparency = ah(function() if y.Opened:get() then return 0 end return 1 end, 40, 1), BackgroundColor3 = u.stroke, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 0), Size = UDim2.new(1, 0, 0, 1) }), t("Frame")({ Name = "Holder", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 1), [j] = { t("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 5), FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), t("UIPadding")({ Name = "UIPadding", PaddingRight = UDim.new(0, 10) }), l(y.Buttons, function(A, B) return A, B end, g.cleanup) } }) } }), t("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 15), SortOrder = Enum.SortOrder.LayoutOrder }) } }), t("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), t("UIStroke")({ Name = "UIStroke", Color = u.stroke, ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Transparency = ah(function() if y.Opened:get() then return 0 end return 1 end, 40, 1) }) } }) } }) function y.AddButton(A, B) local C, D = q(false), q(false) local E = t("TextButton")({ Name = "Frame", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = B.Title, AutomaticSize = Enum.AutomaticSize.X, TextColor3 = ah(function() local E = B.Style if E == "default" then if c(C) and not c(D) then return b.lightenRGB(u.tertiary_text:get(), 15) end return u.tertiary_text:get() elseif E == "primary" then if c(C) and not c(D) then return b.lightenRGB(u.text:get(), 15) end return u.text:get() end end, 40, 1), TextSize = 14, BackgroundTransparency = ah(function() if y.Opened:get() then return 0 end return 1 end, 40, 1), BackgroundColor3 = ah(function() local E = B.Style if E == "default" then if c(C) and not c(D) then return b.darkenRGB(u.background:get(), 5) end return u.background:get() elseif E == "primary" then if c(C) and not c(D) then return b.darkenRGB(u.accent:get(), 15) end return u.accent:get() end end, 40, 1), TextTransparency = ah(function() if y.Opened:get() then return 0 end return 1 end, 40, 1), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromOffset(0, 28), [j] = { t("UIStroke")({ Name = "UIStroke", ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Color = u.stroke, Transparency = ah(function() if y.Opened:get() then return 0 end return 1 end, 40, 1) }), t("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), t("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10) }) }, [p("InputEnded")] = function(E) if E.UserInputType == Enum.UserInputType.MouseButton1 or E.UserInputType == Enum.UserInputType.Touch then D:set(false) e(function() if B.Callback ~= nil and typeof(B.Callback) == "function" then B.Callback() end end) y:Close() end end, [p("InputBegan")] = function(E) if E.UserInputType == Enum.UserInputType.MouseButton1 or E.UserInputType == Enum.UserInputType.Touch then D:set(true) end end, [p("MouseEnter")] = function() C:set(true) end, [p("MouseLeave")] = function() C:set(false) D:set(false) end, }) d(y.Buttons, E) end function y.Close(A) y.Opened:set(false) task.wait(0.25) y.Root:Destroy() y.Connection:Disconnect() end y.Connection = ae.InputBegan:Connect(function(A) if c(z) == nil then y.Connection:Disconnect() end if A.UserInputType == Enum.UserInputType.MouseButton1 or A.UserInputType == Enum.UserInputType.Touch then local B, C = c(z).AbsolutePosition, c(z).AbsoluteSize if ae:GetMouseLocation().X < B.X or ae:GetMouseLocation().X > B.X + C.X or ae:GetMouseLocation().Y < (B.Y - 20 - 1) or ae:GetMouseLocation().Y > B.Y + C.Y then y:Close() end end end) table.insert(c(i.Library).Connections, y.Connection) y.Opened:set(true) return y end return v end)() end, [30] = function() local aa, ab, ac = a(30) local ad return (function(...) local ae = ab.Parent.Parent.Parent.packages local af = ac(ae.fusion) local ag, ah, b, c, d = af.Children, af.ForPairs, af.Value, af.New, ac(ab.Parent.Parent.Parent.storage.theme) type SectionProps = { Title: string, Order: number } return function(e: SectionProps) local f = { Components = b({}) } f.Root = c("Frame")({ Name = "Section", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = d.secondary_background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, -35, 0, 0), ClipsDescendants = true, [ag] = { c("UIStroke")({ Name = "UIStroke", Color = d.stroke }), c("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 0), SortOrder = Enum.SortOrder.LayoutOrder }), c("Frame")({ Name = "Header", BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 40), [ag] = { c("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal), Text = e.Title, TextColor3 = d.tertiary_text, TextSize = 18, TextXAlignment = Enum.TextXAlignment.Left, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, AutomaticSize = Enum.AutomaticSize.X, Size = UDim2.new(0, 0, 1, 0) }) } }), c("UIPadding")({ Name = "UIPadding", PaddingBottom = UDim.new(0, 15), PaddingLeft = UDim.new(0, 15), PaddingTop = UDim.new(0, 5) }), c("Frame")({ Name = "Holder", AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [ag] = { c("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 10), SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Bottom }), c("UIPadding")({ Name = "UIPadding", PaddingRight = UDim.new(0, 15), PaddingBottom = UDim.new(0, 0) }), ah(f.Components, function(g, h) return g, h end, af.cleanup) } }) } }) return f end end)() end, [31] = function() local aa, ab, ac = a(31) local ad return (function(...) local ae = ab.Parent.Parent.Parent.utils local af, ag, ah, b = ac(ae.animate), ac(ae.unwrap), ac(ae.insertitem), ab.Parent.Parent.Parent.packages local c, d = ac(b.fusion), ac(b.states) local e, f, g, h, i, j = c.Children, c.ForPairs, c.OnEvent, c.Value, c.New, ac(ab.Parent.Parent.Parent.storage.theme) type TabProps = { Title: string } return function(k: TabProps) local l, m = { Selected = h(false), Sections = h({}), nSections = 0 }, ag(d.Elements) local n = i("ScrollingFrame")({ Name = k.Title, ScrollBarImageColor3 = j.secondary_text, ScrollBarThickness = 2, ScrollingDirection = Enum.ScrollingDirection.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, ClipsDescendants = true, Selectable = false, Size = UDim2.fromScale(1, 1), AutomaticCanvasSize = Enum.AutomaticSize.Y, CanvasSize = UDim2.new(0, 0, 0, 0), Visible = l.Selected, [e] = { i("UIPadding")({ Name = "UIPadding", PaddingTop = UDim.new(0, 15), PaddingBottom = UDim.new(0, 15) }), i("UIListLayout")({ Name = "UIListLayout", HorizontalAlignment = Enum.HorizontalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 10) }), f(l.Sections, function(n, o) return n, o end, c.cleanup) } }) l.Root = i("TextButton")({ Name = k.Title, AutomaticSize = Enum.AutomaticSize.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 0), [e] = { i("TextLabel")({ Name = "TextLabel", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = k.Title, TextColor3 = af(function() if l.Selected:get() then return ag(j.text) else return ag(j.tertiary_text) end end, 25, 1), TextSize = 15, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.XY, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(15, 0), Size = UDim2.new(1, -15, 0, -10) }), i("Frame")({ Name = "Indicator", BackgroundColor3 = j.accent, BackgroundTransparency = af(function() if l.Selected:get() then return 0 end return 1 end, 25, 1), BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.new(0, 15, 1, 0), Size = af(function() if l.Selected:get() then return UDim2.fromOffset(15, 4) else return UDim2.fromOffset(0, 4) end end, 20, 1), Visible = l.Selected, [e] = { i("UICorner")({ Name = "UICorner" }) } }), i("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 8), SortOrder = Enum.SortOrder.LayoutOrder }), i("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 15) }) }, [g("MouseButton1Click")] = function() l:SetValue(true) end, }) d.add("Tabs", l, k.Title) d.add("Containers", n, k.Title) function l.SetValue(o, p) for q, r in pairs(ag(d.Tabs)) do r.Selected:set(false) end l.Selected:set(p) end local o = ac(ab.Parent.section) function l.AddSection(p, q) local r = {} r.Component = o({ Title = q.Title, Order = l.nSections }) r.Container = r.Component.Components ah(l.Sections, r.Component.Root) l.nSections += 1 setmetatable(r, m) return r end return l end end)() end, [32] = function() local aa, ab, ac = a(32) local ad return (function(...) local ae = ab.Parent.Parent.Parent.utils local af, ag, ah = ac(ae.animate), ac(ae.unwrap), ab.Parent.Parent.Parent.packages local b, c, d, e = ac(ah.fusion), ac(ah.snapdragon), ac(ah.states), ac(ab.Parent.Parent.Parent.storage.theme) local f, g, h, i, j, k, l, m, n = b.Children, b.Computed, b.ForPairs, b.OnEvent, b.Value, b.Ref, b.New, game:GetService("Workspace").CurrentCamera, game:GetService("UserInputService") type WindowProps = { Title: string, Tag: string, Size: UDim2 } return function(o: WindowProps) local p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E = ag(d.Library), { Categorys = 1 }, j(false), j(false), j(UDim2.fromOffset(0, 0)), j(), j(), j(), j(), j({ X = o.Size.X.Offset, Y = o.Size.Y.Offset }), j(false), j(false), j(false), j(false), j(1), j(false) q.Root = l("CanvasGroup")({ Name = "GUI", BackgroundColor3 = e.background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(m.ViewportSize.X / 2 - o.Size.X.Offset / 2, m.ViewportSize.Y / 2 - o.Size.Y.Offset / 2), Size = g(function() return UDim2.fromOffset(y:get().X, y:get().Y) end), Visible = r, Active = true, Interactable = true, GroupTransparency = af(function() if not r:get() then return 1 end return E:get() and 0.1 or 0 end, 30, 1.2), [f] = { l("UIAspectRatioConstraint")({ Name = "UIAspectRatioConstraint", AspectRatio = 1.6 }), l("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), l("UIStroke")({ Name = "UIStroke", Color = e.stroke, Thickness = 2.5, Transparency = af(function() if not r:get() then return 1 end return E:get() and 0.7 or 0.6 end, 30, 1.2) }), l("UIScale")({ Name = "UIScale", Scale = af(function() return D:get() end, 25, 1) }), l("ImageLabel")({ Name = "Shadow", Image = "rbxassetid://9313765853", ImageColor3 = e.background, ImageTransparency = 0.45, ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(45, 45, 45, 45), SliceScale = 1.2, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(27, 42, 53), ClipsDescendants = true, Position = UDim2.fromScale(0.5, 0.5), Size = UDim2.new(1, 75, 1, 75), ZIndex = -50 }), l("Frame")({ [k] = v, Name = "ResizeFrame", AnchorPoint = Vector2.new(1, 1), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(1, 1), Size = UDim2.fromOffset(16, 16), [i("InputBegan")] = function(F) if F.UserInputType == Enum.UserInputType.MouseButton1 or F.UserInputType == Enum.UserInputType.Touch then w:set(true) x:set(F.Position) end end, }), l("Frame")({ [k] = u, Name = "Topbar", BackgroundColor3 = e.secondary_background, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 45), ZIndex = 1, [f] = { l("Frame")({ Name = "Seperator", BackgroundColor3 = e.stroke, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.new(0, 0, 1, -1), Size = UDim2.new(1, 0, 0, 1) }), l("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), l("Frame")({ Name = "TextHolder", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(15, 0), Size = UDim2.new(1, -15, 1, 0), [f] = { l("TextLabel")({ Name = "Title", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal), Text = o.Title, TextColor3 = e.text, TextSize = 17, TextXAlignment = Enum.TextXAlignment.Left, AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(15, 0), Size = UDim2.new(0, 5, 1, 0) }), l("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 7), FillDirection = Enum.FillDirection.Horizontal, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), l("Frame")({ Name = "TagHolder", AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = e.accent, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromOffset(0, 15), [f] = { l("TextLabel")({ Name = "TagTitle", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = o.Tag, TextColor3 = Color3.fromRGB(0, 0, 0), TextSize = 12, AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 1) }), l("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 5), PaddingRight = UDim.new(0, 5) }), l("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }) } }) } }), l("Frame")({ Name = "ButtonHolder", AnchorPoint = Vector2.new(1, 0), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.new(1, -15, 0, 0), Size = UDim2.new(1, -15, 1, 0), [f] = { l("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 10), FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Center }), l("ImageButton")({ Name = "Minimize", Image = "rbxassetid://95268421208163", ImageColor3 = af(function() if A:get() then return e.secondary_text:get() end if z:get() then return e.text:get() end return e.tertiary_text:get() end, 25, 1), Active = false, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0.5, 0.5), Selectable = false, Size = UDim2.fromOffset(22, 22), [i("InputEnded")] = function(F) if F.UserInputType == Enum.UserInputType.MouseButton1 or F.UserInputType == Enum.UserInputType.Touch then A:set(false) q:Minimize() end end, [i("InputBegan")] = function(F) if F.UserInputType == Enum.UserInputType.MouseButton1 or F.UserInputType == Enum.UserInputType.Touch then A:set(true) end end, [i("MouseEnter")] = function() z:set(true) end, [i("MouseLeave")] = function() z:set(false) A:set(false) end, }), l("ImageButton")({ Name = "Close", Image = "rbxassetid://118425905671666", ImageColor3 = af(function() if C:get() then return e.secondary_text:get() end if B:get() then return e.text:get() end return e.tertiary_text:get() end, 25, 1), Active = false, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(0.5, 0.5), Selectable = false, Size = UDim2.fromOffset(22, 22), [i("InputEnded")] = function(F) if F.UserInputType == Enum.UserInputType.MouseButton1 or F.UserInputType == Enum.UserInputType.Touch then C:set(false) local G = q:Dialog({ Title = "EXIT SCRIPT", Description = "Are you sure you want to exit the script?" }) G:AddButton({ Title = "Go Back", Style = "default" }) G:AddButton({ Title = "Exit Script", Style = "primary", Callback = function() d.toDestroy:set(true) end, }) end end, [i("InputBegan")] = function(F) if F.UserInputType == Enum.UserInputType.MouseButton1 or F.UserInputType == Enum.UserInputType.Touch then C:set(true) end end, [i("MouseEnter")] = function() B:set(true) end, [i("MouseLeave")] = function() B:set(false) C:set(false) end, }) } }) } }), l("Frame")({ Name = "Tablist", BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromOffset(0, 45), Size = UDim2.new(0, 200, 1, -45), ZIndex = 5, [f] = { l("ScrollingFrame")({ Name = "Tablist", ScrollBarImageColor3 = Color3.fromRGB(32, 32, 44), ScrollBarThickness = 0, ScrollingDirection = Enum.ScrollingDirection.Y, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Selectable = false, Size = UDim2.new(1, 0, 1, -15), AutomaticCanvasSize = Enum.AutomaticSize.Y, CanvasSize = UDim2.new(0, 0, 0, 0), [f] = { l("UIListLayout")({ Name = "UIListLayout", Padding = UDim.new(0, 10), SortOrder = Enum.SortOrder.LayoutOrder }), l("UIPadding")({ Name = "UIPadding", PaddingTop = UDim.new(0, 5) }), h(d.Categorys, function(F, G) return F, G end, b.cleanup) } }), l("Frame")({ Name = "Seperator", BackgroundColor3 = e.stroke, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = UDim2.fromScale(1, 0), Size = UDim2.new(0, -1, 1, 0) }) } }), l("Frame")({ Name = "Containers", AnchorPoint = Vector2.new(1, 0), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, ClipsDescendants = true, Position = UDim2.new(1, 0, 0, 45), Size = UDim2.new(1, -200, 1, -55), SelectionGroup = true, [f] = { h(d.Containers, function(F, G) return F, G end, b.cleanup) } }) } }) d.add("Objects", l("ImageLabel")({ Name = "Cursor", Image = "rbxassetid://125451561960633", ImageColor3 = e.accent, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Position = t, Size = UDim2.fromOffset(24, 24), Visible = s, ZIndex = 9999 }), "Cursor") table.insert( ag(d.Library).Connections, n.InputChanged:Connect(function(F) if F.UserInputType == Enum.UserInputType.MouseMovement then local G = n:GetMouseLocation() local H, I = G.X - 7, G.Y t:set(UDim2.fromOffset(H, I)) end end) ) table.insert( ag(d.Library).Connections, q.Root.MouseEnter:Connect(function() n.MouseIconEnabled = false s:set(true) end) ) table.insert( ag(d.Library).Connections, q.Root.MouseLeave:Connect(function() n.MouseIconEnabled = true s:set(false) end) ) table.insert( ag(d.Library).Connections, n.InputChanged:Connect(function(F) if (F.UserInputType == Enum.UserInputType.MouseMovement or F.UserInputType == Enum.UserInputType.Touch) and w:get() then local G = UDim2.fromOffset(y:get().X, y:get().Y) local H = Vector3.new(G.X.Offset, G.Y.Offset, 0) + Vector3.new(1, 1, 0) * (F.Position - x:get()) local I = Vector2.new(math.clamp(H.X, 600, 2048), math.clamp(H.Y, 400, 2048)) y:set({ X = I.X, Y = I.Y }) x:set(F.Position) end end) ) local F = false function q.Minimize(G) r:set(not r:get()) if not F then F = true local H = p.MinimizeKeybind.Value p:Notify({ Title = "Interface Minimized", Description = "Press " .. tostring(H) .. " to toggle the interface again.", Duration = 6, Type = "info" }) end end function q.Init(G) if not ag(d.Library).SilentMode then r:set(true) end end local G = ac(ab.Parent.category) function q.AddCategory(H, I) local J = G({ Title = I.Title, Order = q.Categorys }) d.add("Categorys", J.Root, I.Title) q.Categorys += 1 return J end local H = ac(ab.Parent.dialog) H:init(q.Root) function q.Dialog(I, J) local K = H:Create(J) return K end function q.SetScale(I, J) D:set(J) end function q.AddTag(I, J) local K, L = l("Frame")({ Name = "TagHolder", AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = e.accent, BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromOffset(0, 15), [f] = { l("TextLabel")({ Name = "TagTitle", FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal), Text = J or "TAG", TextColor3 = e.tertiary_text, TextSize = 12, AutomaticSize = Enum.AutomaticSize.X, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.fromScale(1, 1) }), l("UIPadding")({ Name = "UIPadding", PaddingLeft = UDim.new(0, 5), PaddingRight = UDim.new(0, 5) }), l("UICorner")({ Name = "UICorner", CornerRadius = UDim.new(0, 4) }), l("UIStroke")({ Name = "UIStroke", Color = e.stroke, Thickness = 1.75 }) } }), ag(u).TextHolder K.Parent = L return K end d.add("Objects", q.Root, o.Title) local I = c.createDragController(ag(u), { DragGui = ag(q.Root), SnapEnabled = true }) I:Connect() I.DragBegan:Connect(function() E:set(true) end) I.DragEnded:Connect(function() E:set(false) end) table.insert( ag(d.Library).Connections, n.InputEnded:Connect(function(J) if J.UserInputType == Enum.UserInputType.MouseButton1 or J.UserInputType == Enum.UserInputType.Touch then if w:get() then w:set(false) end end if type(p.MinimizeKeybind) == "table" and p.MinimizeKeybind.Type == "Keybind" and not n:GetFocusedTextBox() then if J.KeyCode.Name == p.MinimizeKeybind.Value then q:Minimize() end elseif J.KeyCode == p.MinimizeKey and not n:GetFocusedTextBox() then q:Minimize() end end) ) return q end end)() end, [33] = function() local aa, ab, ac = a(33) local ad return (function(...) local ae = ac(ab.Parent.packages.fusion) local af = { fusion = ae, story = function(af) local ag, ah = tick(), ac(ab.Parent) local b = ah:CreateWindow({ Title = "THERION", Tag = "UNIVERSAL", Size = UDim2.fromOffset(800, 500), Parent = af.target, Debug = true }) b:AddTag("VERSION 0.3.2") b:AddTag("BETA") local c = { Universal = b:AddCategory({ Title = "UNIVERSAL" }), Settings = b:AddCategory({ Title = "SETTINGS" }), Movement = b:AddCategory({ Title = "MOVEMENT" }), Combat = b:AddCategory({ Title = "COMBAT" }), Misc = b:AddCategory({ Title = "MISC" }), Rage = b:AddCategory({ Title = "RAGE" }) } local d = { Aimbot = c.Universal:AddTab({ Title = "Aimbot" }), TriggerBot = c.Universal:AddTab({ Title = "TriggerBot" }), Checks = c.Universal:AddTab({ Title = "Checks" }), Visuals = c.Universal:AddTab({ Title = "Visuals" }), Settings = c.Settings:AddTab({ Title = "Settings" }), Theme = c.Settings:AddTab({ Title = "Theme" }), Showcase = c.Settings:AddTab({ Title = "Showcase" }), Configs = c.Settings:AddTab({ Title = "Configs" }), Speed = c.Movement:AddTab({ Title = "Speed" }), Flight = c.Movement:AddTab({ Title = "Flight" }), Teleport = c.Movement:AddTab({ Title = "Teleport" }), Bhop = c.Movement:AddTab({ Title = "Bunny Hop" }), Weapons = c.Combat:AddTab({ Title = "Weapons" }), Player = c.Combat:AddTab({ Title = "Player" }), AutoParry = c.Combat:AddTab({ Title = "Auto Parry" }), Reach = c.Combat:AddTab({ Title = "Reach" }), World = c.Misc:AddTab({ Title = "World" }), Exploits = c.Misc:AddTab({ Title = "Exploits" }), Trolling = c.Misc:AddTab({ Title = "Trolling" }), Farming = c.Misc:AddTab({ Title = "Auto Farm" }), RageBot = c.Rage:AddTab({ Title = "Rage Bot" }), AntiAim = c.Rage:AddTab({ Title = "Anti Aim" }), Resolver = c.Rage:AddTab({ Title = "Resolver" }) } local e = d.Aimbot:AddSection({ Title = "AIMBOT" }) e:AddColorpicker("colorpick22er", { Title = "oko2k323", Description = "Toggles the colorpicker", Default = Color3.fromRGB(96, 205, 255), Callback = function(f)  print(f) end, }) e:AddTable("table", { Title = "Key Information", Description = "A table showing your key information.", Headers = { { Name = "Discord ID", Key = "DiscordID" }, { Name = "Executions", Key = "Executions" }, { Name = "Seconds Left", Key = "SecondsLeft" }, { Name = "User Note", Key = "UserNote", Editable = true }, { Name = "Script Version", Key = "ScriptVersion" } }, Rows = { { DiscordID = 987654321123456800, Executions = 10234, SecondsLeft = math.huge, UserNote = "Not specified", ScriptVersion = "1.0.0" } }, OnRowUpdate = function(f, g) for h, i in pairs(g) do end end, }) e:AddToggle("AimbotToggle", { Title = "Aimbot", Description = "Toggles the Aimbot", Default = false, Callback = function(f)  print("Aimbot toggled") if not f then return end b:Dialog({ Title = "Dialog", Description = "This is a dialog", Buttons = { { Title = "Button", Callback = function()  print("Button pressed") end, } } }) end, }) local f = e:AddToggle("OnePressModeToggle", { Title = "One-Press Mode", Description = "Uses the One-Press Mode instead of the Holding Mode", Default = false, Callback = function()  print("One-Press Mode toggled") end, }) e:AddDropdown("AimMode", { Title = "Aim Mode", Description = "Changes the Aim Mode", Values = { "Camera", "Silent" }, Default = "Camera" }) e:AddDropdown("SilentAimMethods", { Title = "Silent Aim Methods", Description = "Sets the Silent Aim Methods", Values = { "Mouse.Hit / Mouse.Target", "GetMouseLocation", "Raycast", "FindPartOnRay", "FindPartOnRayWithIgnoreList", "FindPartOnRayWithWhitelist" }, Multi = true, Default = {} }) e:AddSlider("SilentAimChance", { Title = "Silent Aim Chance", Description = "Changes the Hit Chance for Silent Aim", Default = 100, Min = 1, Max = 100, Rounding = 1 }) local g = d.Aimbot:AddSection({ Title = "AIM OFFSET" }) g:AddToggle("UseOffsetToggle", { Title = "Use Offset", Description = "Toggles the Offset", Default = false, Callback = function()  print("Use Offset toggled") end, }) g:AddDropdown("OffsetType", { Title = "Offset Type", Description = "Changes the Offset Type", Values = { "Static", "Dynamic", "Static & Dynamic" }, Default = "Static" }) g:AddSlider("StaticOffset", { Title = "Static Offset", Description = "Changes the Static Offset Increment", Default = 25, Min = 1, Max = 50, Rounding = 1 }) g:AddSlider("DynamicOffset", { Title = "Dynamic Offset", Description = "Changes the Dynamic Offset Increment", Default = 25, Min = 1, Max = 50, Rounding = 1 }) local h = d.Checks:AddSection({ Title = "SIMPLE CHECKS" }) h:AddToggle("AliveCheckToggle", { Title = "Alive Check", Description = "Toggles the Alive Check", Default = true, Callback = function()  print("Alive Check toggled") end, }) h:AddToggle("TeamCheckToggle", { Title = "Team Check", Description = "Toggles the Team Check", Default = true, Callback = function()  print("Team Check toggled") end, }) h:AddToggle("WallCheckToggle", { Title = "Wall Check", Description = "Toggles the Wall Check", Default = true, Callback = function()  print("Wall Check toggled") end, }) h:AddToggle("FriendCheckToggle", { Title = "Friend Check", Description = "Toggles the Friend Check", Default = false, Callback = function()  print("Friend Check toggled") end, }) local i = d.Checks:AddSection({ Title = "ADVANCED CHECKS" }) i:AddToggle("FoVCheckToggle", { Title = "FoV Check", Description = "Toggles the FoV Check", Default = true, Callback = function()  print("FoV Check toggled") end, }) i:AddSlider("FoVRadius", { Title = "FoV Radius", Description = "Changes the FoV Radius", Default = 100, Min = 10, Max = 1000, Rounding = 1 }) i:AddToggle("MagnitudeCheckToggle", { Title = "Magnitude Check", Description = "Toggles the Magnitude Check", Default = false, Callback = function()  print("Magnitude Check toggled") end, }) local j = d.Visuals:AddSection({ Title = "FOV" }) j:AddToggle("ShowFoVToggle", { Title = "Show FoV", Description = "Graphically Displays the FoV Radius", Default = true, Callback = function()  print("Show FoV toggled") end, }) j:AddSlider("FovThickness", { Title = "FoV Thickness", Description = "Changes the FoV Thickness", Default = 1, Min = 1, Max = 10, Rounding = 1 }) j:AddSlider("FovOpacity", { Title = "FoV Opacity", Description = "Changes the FoV Opacity", Default = 0.5, Min = 0.1, Max = 1, Rounding = 1 }) local k = d.Visuals:AddSection({ Title = "ESP" }) k:AddToggle("ESPToggle", { Title = "ESP", Description = "Toggles ESP Features", Default = false, Callback = function()  print("ESP toggled") end, }) k:AddToggle("BoxESPToggle", { Title = "Box ESP", Description = "Creates the ESP Box around Players", Default = false, Callback = function()  print("Box ESP toggled") end, }) k:AddToggle("NameESPToggle", { Title = "Name ESP", Description = "Shows Player Names", Default = false, Callback = function()  print("Name ESP toggled") end, }) k:AddDropdown("ESPFont", { Title = "ESP Font", Description = "Changes the ESP Font", Values = { "UI", "System", "Plex", "Monospace" }, Default = "UI" }) local l = d.Settings:AddSection({ Title = "UI SETTINGS" }) l:AddDropdown("Theme", { Title = "Theme", Description = "Changes the UI Theme", Values = { "Default", "Light", "Dark", "Discord" }, Default = "Default" }) l:AddToggle("TransparencyToggle", { Title = "Transparency", Description = "Makes the UI Transparent", Default = false, Callback = function()  print("Transparency toggled") end, }) local m = d.Settings:AddSection({ Title = "NOTIFICATIONS" }) m:AddToggle("ShowNotificationsToggle", { Title = "Show Notifications", Description = "Toggles the Notifications Show", Default = true, Callback = function()  print("Show Notifications toggled") end, }) m:AddToggle("ShowWarningsToggle", { Title = "Show Warnings", Description = "Toggles the Security Warnings Show", Default = true, Callback = function()  print("Show Warnings toggled") end, }) local n = d.Settings:AddSection({ Title = "CONFIGURATION" }) n:AddButton({ Title = "Import Configuration", Type = "primary", Description = "Load saved configuration" }) n:AddButton({ Title = "Export Configuration", Type = "primary", Description = "Save current configuration" }) n:AddButton({ Title = "Reset Configuration", Type = "primary", Description = "Reset to default settings" }) local o = d.Theme:AddSection({ Title = "THEME CUSTOMIZATION" }) o:AddDropdown("ThemePicker", { Title = "Theme", Description = "Select UI Theme", Values = ah:GetThemes(), Default = "noir", Callback = function(p) ah:SetTheme(p) end, }) o:AddSlider("UIScale", { Title = "UI Scale", Description = "Adjusts the UI Size", Default = 100, Min = 75, Max = 150, Rounding = 1 }) o:AddSlider("BOpacity", { Title = "Background Opacity", Description = "Adjusts Background Transparency", Default = 1, Min = 0.1, Max = 1, Rounding = 1 }) o:AddSlider("RainbowSpeed", { Title = "Rainbow Speed", Description = "Adjusts Rainbow Effect Speed", Default = 0.5, Min = 0.1, Max = 1, Rounding = 1 }) local p = d.Speed:AddSection({ Title = "SPEED MODIFICATIONS" }) p:AddToggle("SpeedHackToggle", { Title = "Speed Hack", Description = "Modifies player movement speed", Default = false }) p:AddDropdown("SpeedMode", { Title = "Speed Mode", Description = "Select speed modification type", Values = { "CFrame", "Velocity", "WalkSpeed", "Custom" }, Default = "CFrame" }) p:AddSlider("SpeedMultiplier", { Title = "Speed Multiplier", Description = "Adjusts speed multiplication factor", Default = 2, Min = 1, Max = 10, Rounding = 1 }) local q = d.Flight:AddSection({ Title = "FLIGHT CONTROLS" }) q:AddToggle("FlightToggle", { Title = "Flight", Description = "Enables player flight", Default = false }) q:AddDropdown("FlightMode", { Title = "Flight Mode", Description = "Select flight behavior", Values = { "CFrame", "Velocity", "Floating", "Noclip" }, Default = "CFrame" }) local r = d.Weapons:AddSection({ Title = "WEAPON MODIFICATIONS" }) r:AddToggle("NoRecoilToggle", { Title = "No Recoil", Description = "Removes weapon recoil", Default = false }) r:AddToggle("NoSpreadToggle", { Title = "No Spread", Description = "Removes bullet spread", Default = false }) r:AddSlider("FireRateMultiplier", { Title = "Fire Rate Multiplier", Description = "Modifies weapon fire rate", Default = 1, Min = 1, Max = 5, Rounding = 1 }) local s = d.Player:AddSection({ Title = "PLAYER COMBAT" }) s:AddToggle("AutoBlockToggle", { Title = "Auto Block", Description = "Automatically blocks incoming damage", Default = false }) s:AddToggle("KillAuraToggle", { Title = "Kill Aura", Description = "Damages nearby players automatically", Default = false }) s:AddSlider("KillAuraRange", { Title = "Kill Aura Range", Description = "Sets the kill aura radius", Default = 10, Min = 5, Max = 30, Rounding = 1 }) local t = d.World:AddSection({ Title = "WORLD MODIFICATIONS" }) t:AddToggle("FullbrightToggle", { Title = "Fullbright", Description = "Removes darkness and shadows", Default = false }) t:AddToggle("XRayToggle", { Title = "X-Ray", Description = "See through walls", Default = false }) t:AddDropdown("TimeOfDay", { Title = "Time of Day", Description = "Changes the lighting", Values = { "Day", "Night", "Dawn", "Dusk" }, Default = "Day" }) local u = d.Exploits:AddSection({ Title = "GAME EXPLOITS" }) u:AddToggle("AntiKickToggle", { Title = "Anti-Kick", Description = "Attempts to prevent kicks", Default = false }) u:AddToggle("AntiCheatBypassToggle", { Title = "Anti-Cheat Bypass", Description = "Attempts to bypass anti-cheat", Default = false }) u:AddDropdown("BypassMode", { Title = "Bypass Mode", Description = "Select bypass method", Values = { "Basic", "Advanced", "Experimental" }, Default = "Basic" }) local v = d.Visuals:AddSection({ Title = "ADVANCED ESP" }) v:AddToggle("SkeletonESPToggle", { Title = "Skeleton ESP", Description = "Shows player bone structure", Default = false }) v:AddToggle("HealthBarToggle", { Title = "Health Bars", Description = "Shows player health bars", Default = false }) v:AddToggle("ChamsToggle", { Title = "Chams", Description = "Shows players through walls with custom rendering", Default = false }) v:AddDropdown("ChamsStyle", { Title = "Chams Style", Description = "Changes the chams appearance", Values = { "Flat", "Ghost", "Pulse", "Rainbow" }, Default = "Flat" }) local w = d.TriggerBot:AddSection({ Title = "TRIGGERBOT MAIN" }) w:AddToggle("TriggerBotToggle", { Title = "TriggerBot", Description = "Automatically shoots when crosshair is on target", Default = false }) w:AddDropdown("TriggerMode", { Title = "Trigger Mode", Description = "Select trigger activation method", Values = { "On Hover", "On Key Hold", "Toggle Mode", "Smart Trigger" }, Default = "On Hover" }) w:AddSlider("TriggerDelay", { Title = "Trigger Delay", Description = "Delay before triggering (ms)", Default = 100, Min = 0, Max = 500, Rounding = 1 }) local x = d.TriggerBot:AddSection({ Title = "ADVANCED TRIGGER" }) x:AddToggle("SmartPredictionToggle", { Title = "Smart Prediction", Description = "Predicts target movement for better accuracy", Default = false }) x:AddToggle("AutoStopToggle", { Title = "Auto Stop", Description = "Stops movement when triggering for better accuracy", Default = false }) x:AddToggle("ReactionTimeSimulation", { Title = "Reaction Time Simulation", Description = "Simulates human reaction time", Default = false }) local y = d.TriggerBot:AddSection({ Title = "TRIGGER FILTERS" }) y:AddDropdown("HitboxPriority", { Title = "Hitbox Priority", Description = "Select priority hitboxes for trigger", Values = { "Head", "Upper Torso", "Lower Torso", "Arms", "Legs" }, Multi = true, Default = { "Head", "Upper Torso" } }) y:AddToggle("SmartTargetingToggle", { Title = "Smart Targeting", Description = "Prioritizes targets based on threat level", Default = false }) local z = d.AutoParry:AddSection({ Title = "AUTO PARRY" }) z:AddToggle("AutoParryToggle", { Title = "Auto Parry", Description = "Automatically parries incoming attacks", Default = false }) z:AddDropdown("ParryMode", { Title = "Parry Mode", Description = "Select parry behavior", Values = { "Aggressive", "Defensive", "Balanced", "Custom" }, Default = "Balanced" }) local A = d.Reach:AddSection({ Title = "REACH MODIFICATIONS" }) A:AddToggle("ReachToggle", { Title = "Reach", Description = "Extends attack range", Default = false }) A:AddSlider("ReachMultiplier", { Title = "Reach Multiplier", Description = "Adjusts reach distance", Default = 1.5, Min = 1, Max = 4, Rounding = 1 }) local B = d.RageBot:AddSection({ Title = "RAGE BOT" }) B:AddToggle("RageBotToggle", { Title = "Rage Bot", Description = "Enables extreme targeting measures", Default = false }) B:AddDropdown("RageTargetingMode", { Title = "Targeting Mode", Description = "Select targeting behavior", Values = { "Closest", "Most Damage", "Random", "Smart" }, Default = "Closest" }) local C = d.AntiAim:AddSection({ Title = "ANTI AIM" }) C:AddToggle("AntiAimToggle", { Title = "Anti Aim", Description = "Makes you harder to hit", Default = false }) C:AddDropdown("AntiAimType", { Title = "Anti Aim Type", Description = "Select anti aim behavior", Values = { "Spin", "Jitter", "Static", "Random" }, Default = "Spin" }) local D = d.Resolver:AddSection({ Title = "RESOLVER" }) D:AddToggle("ResolverToggle", { Title = "Resolver", Description = "Attempts to resolve anti-aim", Default = false }) D:AddDropdown("ResolverMode", { Title = "Resolver Mode", Description = "Select resolver method", Values = { "Brute Force", "Prediction", "Adaptive", "Learning" }, Default = "Adaptive" }) local E = d.Trolling:AddSection({ Title = "TROLLING" }) E:AddToggle("VoiceSpamToggle", { Title = "Voice Command Spam", Description = "Spams voice commands", Default = false }) E:AddToggle("EmoteSpamToggle", { Title = "Emote Spam", Description = "Spams emotes", Default = false }) local F = d.Farming:AddSection({ Title = "AUTO FARMING" }) F:AddToggle("AutoFarmToggle", { Title = "Auto Farm", Description = "Automatically farms resources/kills", Default = false }) F:AddDropdown("FarmingMode", { Title = "Farming Mode", Description = "Select farming behavior", Values = { "XP Farm", "Resource Farm", "Kill Farm", "Custom" }, Default = "XP Farm" }) local G = d.Bhop:AddSection({ Title = "BUNNY HOP" }) G:AddToggle("BhopToggle", { Title = "Bunny Hop", Description = "Automatically jumps for increased speed", Default = false }) G:AddDropdown("BhopStyle", { Title = "Bhop Style", Description = "Select hopping pattern", Values = { "Normal", "Rage", "Legit", "Custom" }, Default = "Normal" }) local H = d.Teleport:AddSection({ Title = "TELEPORT" }) H:AddButton({ Title = "Teleport to Spawn", Description = "Instantly teleport to spawn point", Type = "default", Callback = function() local I = b:Dialog({ Title = "DIALOG", Description = "This is the dialog component of the UI Library Therion." }) I:AddButton({ Title = "Go Back", Style = "default" }) I:AddButton({ Title = "Continue", Style = "primary", Callback = function() local J = b:Dialog({ Title = "ANOTHER DIALOG", Description = [[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse mollis dolor eget erat mattis, id mollis mauris cursus. Proin ornare sollicitudin odio, id posuere diam luctus id.]] }) J:AddButton({ Title = "OK", Style = "default" }) end, }) end, }) H:AddDropdown("SavedLocations", { Title = "Saved Locations", Description = "Select location to teleport", Values = { "Spawn", "Base", "Shop", "Custom 1", "Custom 2" }, Default = "Spawn" }) H:AddInput("WaypointInput", { Title = "Add Waypoint", Description = "Add and save a waypoint to teleport to.", Default = "Default", Placeholder = "Placeholder", Numeric = false, Finished = false, Callback = function(I)  print("Input changed:", I) end, }) local I = d.Showcase:AddSection({ Title = "UI ELEMENTS" }) I:AddDropdown("ShowcaseTheme", { Title = "Theme", Description = "Change the UI theme to preview", Values = ah:GetThemes(), Default = ah:GetThemes()[1], Callback = function(J) ah:SetTheme(J) task.wait(0.25) ah:Notify({ Title = "Info Notification", Description = "This is a information notification.", Type = "info" }) ah:Notify({ Title = "Error Notification", Description = "This is a error notification.", Type = "error" }) ah:Notify({ Title = "Warning Notification", Description = "This is a warning notification.", Type = "warning" }) ah:Notify({ Title = "Success Notification", Description = "This is a success notification.", Type = "success" }) end, }) local J = I:AddToggle("ShowcaseToggle", { Title = "Toggle Element", Description = "Demonstrates the toggle UI element", Default = false, Keybind = true }) J:AddKeybind("ShowcaseToggleKeybind", { Mode = "Toggle", SyncState = true }) I:AddSlider("ShowcaseSlider", { Title = "Slider Element", Description = "Demonstrates the slider UI element", Default = 50, Min = 0, Max = 100, Increment = 1 }) I:AddDropdown("ShowcaseDropdown", { Title = "Dropdown Element", Description = "Demonstrates the dropdown UI element", Values = { "Option 1", "Option 2", "Option 3" }, Default = "Option 1" }) I:AddColorpicker("ShowcaseColorPicker", { Title = "Color Picker Element", Description = "Demonstrates the color picker UI element", Default = Color3.fromRGB(255, 255, 255) }) I:AddButton({ Title = "Button Element", Description = "Demonstrates the button UI element", Type = "default", Callback = function() b:Dialog({ Title = "Dialog Element", Description = "Demonstrates the dialog UI element", Buttons = { { Title = "OK", Callback = function() end } } }) end, }) I:AddInput("ShowcaseInput", { Title = "Text Input Element", Description = "Demonstrates the text input UI element", Default = "Sample text", Placeholder = "Type something..." }) I:AddKeybind("ShowcaseKeybind", { Title = "Keybind Element", Description = "Demonstrates the keybind UI element", Default = "E" }) I:AddButton({ Title = "Primary Action", Type = "primary", Description = "Perform primary action", Callback = function()  print("Primary button clicked") ah:Notify({ Title = "Primary Notification", Description = "This is a primary notification.", Type = "info" }) end, }) I:AddButton({ Title = "Danger Action", Type = "danger", Description = "Perform dangerous action", Callback = function()  print("Danger button clicked") end, }) I:AddButton({ Title = "Warning Action", Type = "warning", Description = "Perform action with caution", Callback = function()  print("Warning button clicked") end, }) I:AddButton({ Title = "Default Action", Type = "default", Description = "Perform default action", Callback = function()  print("Default button clicked") end, }) b:Init() return function() ah:Destroy() end end, } return af end)() end, [35] = function() local aa, ab, ac = a(35) local ad return (function(...) return { name = "btools", aliases = { "buildtools" }, description = "Give yourself building tools", arguments = {}, callback = function() local ae = game:GetService("Players") local af, ag = ae.LocalPlayer, { "Move", "Clone", "Delete", "Rotate" } if af:FindFirstChild("Backpack") then for ah, b in ipairs(ag) do local c = Instance.new("HopperBin") c.Name = b c.BinType = Enum.BinType[b] c.Parent = af.Backpack end end end, } end)() end, [36] = function() local aa, ab, ac = a(36) local ad return (function(...) return { name = "copycframe", aliases = {}, description = "Copies the cframe of your character to clipboard", arguments = {}, callback = function() setclipboard(tostring(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame)) end, } end)() end, [37] = function() local aa, ab, ac = a(37) local ad return (function(...) return { name = "copyjobid", aliases = { "cjid" }, description = "Copy the current server's job ID to clipboard", arguments = {}, callback = function() local ae = setclipboard or (syn and syn.write_clipboard) or write_clipboard if not ae then warn("Clipboard functions not available in this executor") return end local af = game.JobId ae(af)  print("Copied job ID to clipboard: " .. af) end, } end)() end, [38] = function() local aa, ab, ac = a(38) local ad return (function(...) return { name = "copypos", aliases = {}, description = "Copies the position of your character to clipboard", arguments = {}, callback = function() setclipboard(tostring(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)) end, } end)() end, [39] = function() local aa, ab, ac = a(39) local ad return (function(...) return { name = "dex", aliases = { "explorer" }, description = "Loadstrings Dex Explorer", arguments = {}, callback = function() loadstring(game:HttpGet([[https://raw.githubusercontent.com/infyiff/backup/main/dex.lua]]))() end, } end)() end, [40] = function() local aa, ab, ac = a(40) local ad return (function(...) return { name = "fov", aliases = { "fieldofview" }, description = "Change your field of view", arguments = { { name = "value", type = "number" } }, callback = function(ae, af, ag) local ah = workspace.CurrentCamera if ah then ah.FieldOfView = math.clamp(ag.value, 1, 120) end end, } end)() end, [41] = function() local aa, ab, ac = a(41) local ad return (function(...) return { name = "freeze", aliases = { "anchor" }, description = "Freeze your character in place", arguments = {}, callback = function() local af = game:GetService("Players") local ag = af.LocalPlayer.Character if ag then local ah = ag:FindFirstChild("HumanoidRootPart") if ah then ah.Anchored = true end end end, } end)() end, [42] = function() local aa, ab, ac = a(42) local ad return (function(...) return { name = "copygameid", aliases = { "gameid" }, description = "Copies the game id to clipboard", arguments = {}, callback = function() setclipboard(game.GameId) end, } end)() end, [43] = function() local aa, ab, ac = a(43) local ad return (function(...) return { name = "goto", aliases = { "to" }, description = "Teleport to a specified player", arguments = { { name = "player", type = "string" } }, callback = function(af, ag, ah) local b = game:GetService("Players") local c, d = b.LocalPlayer for e, f in ipairs(b:GetPlayers()) do if (f.Name:lower():sub(1, #ah.player) == ah.player:lower()) or (f.DisplayName:lower():sub(1, #ah.player) == ah.player:lower()) then d = f break end end if d and c.Character and d.Character then local e, f = d.Character:FindFirstChild("HumanoidRootPart"), c.Character:FindFirstChild("HumanoidRootPart") if e and f then f.CFrame = e.CFrame end end end, } end)() end, [44] = function() local aa, ab, ac = a(44) local ad return (function(...) return { name = "hipheight", aliases = { "hip" }, description = "Set your character's hip height", arguments = { { name = "height", type = "number" } }, callback = function(ag, ah, b) local c, d = b.height, game:GetService("Players") local e = d.LocalPlayer.Character if e then local f = e:FindFirstChild("Humanoid") if f then f.HipHeight = c or 0 end end end, } end)() end, [45] = function() local aa, ab, ac = a(45) local ad return (function(...) return { name = "joinserver", aliases = { "join" }, description = "Join a specific server using its job ID", arguments = { { name = "jobId", description = "The job ID of the server to join", type = "string", required = true } }, callback = function(ah, b, c) local d, e = game:GetService("TeleportService"), game:GetService("Players") local f, g = e.LocalPlayer, c.jobId if not g or g == "" then warn("Please provide a valid job ID") return end local h, i = pcall(function() d:TeleportToPlaceInstance(game.PlaceId, g, f) end) if not h then warn("Failed to teleport: " .. tostring(i)) end end, } end)() end, [46] = function() local aa, ab, ac = a(46) local ad return (function(...) return { name = "jump", aliases = { "jumppower", "jp" }, description = "Set your character's jump power", arguments = { { name = "power", type = "number" } }, callback = function(b, c, d) local e, f = d.power, game:GetService("Players") local g = f.LocalPlayer.Character if g then local h = g:FindFirstChild("Humanoid") if h then h.JumpPower = e end end end, } end)() end, [47] = function() local aa, ab, ac = a(47) local ad return (function(...) local c = ac(ab.Parent.Parent.packages.states) return { name = "notify", aliases = { "alert" }, description = "Creates a notification", arguments = { { name = "title", type = "string" }, { name = "desc", type = "string" }, { name = "duration", type = "number" } }, callback = function(d, e, f) c.Library:get():Notify({ Title = f.title, Description = f.desc, Duration = f.duration, Type = "success" }) end, } end)() end, [48] = function() local aa, ab, ac = a(48) local ad return (function(...) return { name = "copyplaceid", aliases = { "placeid" }, description = "Copies the place id to clipboard", arguments = {}, callback = function() setclipboard(game.PlaceId) end, } end)() end, [49] = function() local aa, ab, ac = a(49) local ad return (function(...) return { name = "refresh", aliases = { "ref" }, description = "Refresh your character", arguments = {}, callback = function() local c = game:GetService("Players") local e = c.LocalPlayer local f = e.Character and e.Character:FindFirstChild("HumanoidRootPart") and e.Character.HumanoidRootPart.CFrame if e.Character then e.Character:BreakJoints() end e.CharacterAdded:Wait() task.wait() if f and e.Character then local g = e.Character:WaitForChild("HumanoidRootPart") if g then g.CFrame = f end end end, } end)() end, [50] = function() local aa, ab, ac = a(50) local ad return (function(...) return { name = "rejoin", aliases = { "rj" }, description = "Rejoin the current server", arguments = {}, callback = function() local c, e = game:GetService("TeleportService"), game:GetService("Players") local f = e.LocalPlayer c:TeleportToPlaceInstance(game.PlaceId, game.JobId, f) end, } end)() end, [51] = function() local aa, ab, ac = a(51) local ad return (function(...) return { name = "remotespy", aliases = { "rspy" }, description = "Loadstrings Simple Spy V3", arguments = {}, callback = function() loadstring(game:HttpGet([[https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua]]))() end, } end)() end, [52] = function() local aa, ab, ac = a(52) local ad return (function(...) return { name = "respawn", aliases = { "re", "reset" }, description = "Respawn your character", arguments = {}, callback = function() local c = game:GetService("Players") local e = c.LocalPlayer if e.Character then e.Character:BreakJoints() end end, } end)() end, [53] = function() local aa, ab, ac = a(53) local ad return (function(...) return { name = "serverhop", aliases = { "hop" }, description = "Join a different server of the same game", arguments = {}, callback = function() local c, e, f = game:GetService("TeleportService"), game:GetService("HttpService"), game:GetService("Players") local g = function() local g, h, i = {}, "", string.format([[https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Desc&limit=100]], game.PlaceId) repeat local j, k = pcall(function() return e:JSONDecode(game:HttpGet(i .. (h ~= "" and "&cursor=" .. h or ""))) end) if j and k and k.data then for l, m in ipairs(k.data) do if m.playing < m.maxPlayers and m.id ~= game.JobId then table.insert(g, m) end end h = k.nextPageCursor else h = nil end until not h or #g >= 5 return g end local h = g() if #h > 0 then local i = h[math.random(1, #h)] c:TeleportToPlaceInstance(game.PlaceId, i.id, f.LocalPlayer) else warn("No available servers found!") end end, } end)() end, [54] = function() local aa, ab, ac = a(54) local ad return (function(...) return { name = "sit", aliases = {}, description = "Make your character sit", arguments = {}, callback = function() local c = game:GetService("Players") local e = c.LocalPlayer.Character if e then local f = e:FindFirstChild("Humanoid") if f then f.Sit = true end end end, } end)() end, [55] = function() local aa, ab, ac = a(55) local ad return (function(...) return { name = "speed", aliases = { "walkspeed", "ws" }, description = "Set your character's walk speed", arguments = { { name = "speed", type = "number" } }, callback = function(c, e, f) local g, h = f.speed, game:GetService("Players") local i = h.LocalPlayer.Character if i then local j = i:FindFirstChild("Humanoid") if j then j.WalkSpeed = g end end end, } end)() end, [56] = function() local aa, ab, ac = a(56) local ad return (function(...) return { name = "unfreeze", aliases = { "unanchor" }, description = "Unfreeze your character", arguments = {}, callback = function() local e = game:GetService("Players") local f = e.LocalPlayer.Character if f then local g = f:FindFirstChild("HumanoidRootPart") if g then g.Anchored = false end end end, } end)() end, [57] = function() local aa, ab, ac = a(57) local ad return (function(...) return { name = "unview", aliases = { "unspectate" }, description = "Stop spectating and return camera to your character", arguments = {}, callback = function() local e, f = game:GetService("Players").LocalPlayer, game:GetService("Workspace").CurrentCamera if e.Character and e.Character:FindFirstChild("Humanoid") then f.CameraSubject = e.Character.Humanoid end end, } end)() end, [58] = function() local aa, ab, ac = a(58) local ad return (function(...) return { name = "view", aliases = { "spectate" }, description = "Spectate a player", arguments = { { name = "player", type = "string" } }, callback = function(e, f, g) local h, i = game:GetService("Workspace").CurrentCamera for j, k in ipairs(game:GetService("Players"):GetPlayers()) do if (k.Name:lower():sub(1, #g.player) == g.player:lower()) or (k.DisplayName:lower():sub(1, #g.player) == g.player:lower()) then i = k break end end if i.Character and i.Character:FindFirstChild("Humanoid") then h.CameraSubject = i.Character.Humanoid end end, } end)() end, [60] = function() local aa, ab, ac = a(60) local ad return (function(...) local f = { Sounds = { Key = "rbxassetid://8566613627", Enter = "rbxassetid://8566613567", Backspace = "rbxassetid://8566613459", NoType = "rbxassetid://8567221828" } } function f.Play(g, h) assert(g.Sounds[h], "Invalid sound name") local i = Instance.new("Sound") i.SoundId = g.Sounds[h] i.Parent = game.CoreGui i:Play() i.Ended:Connect(function() i:Destroy() end) end return f end)() end, [61] = function() local aa, ab, ac = a(61) local ad return (function(...) local f = {} for g, h in ab.Parent:GetChildren() do if h.Name ~= "cmdr" then f[h.Name] = ac(h) end end local g = {} for h, i in ab.Parent.Parent.utils:GetChildren() do g[i.Name] = ac(i) end local h, i = { string = function(h) return h end, number = function(h) return tonumber(h) or 0 end, integer = function(h) return math.floor(tonumber(h) or 0) end, bool = function(h) h = string.lower(h) return (h == "on" or h == "true" or h == "yes" or h == "1") or false end, url = function(h) return string.match(h, "^%a+://%S+") end, player = function(h) return h:lower() end, hex = function(h) return string.match(h, "^[A-Fa-f0-9]+$") end, }, {} do function i.charAt(j: string, k: number): string? return string.sub(j, k, k) end function i.startsWith(j: string, k: string): boolean return string.sub(j, 1, #k) == k end function i.trim(j: string): string? return string.match(j, "^%s*(.-)%s*$") end end local j = {} type Command = { name: string, aliases: { [string]: string }, description: string, arguments: { { name: string, type: string } }, callback: (...any) -> ...any } do j.__index = j function j.new(k: { prefix: string? }) local l = setmetatable({}, j) l.prefix = k.prefix or "" l.commands = {} return l end function j.newCommand(k, l: Command) local m = { name = l.name, aliases = l.aliases, description = l.description, arguments = l.arguments, callback = l.callback } table.insert(k.commands, m) end function j.executeCommand(k, l: string) if i.startsWith(l, k.prefix) then l = l:sub(#k.prefix + 1) end local m = {} for n in string.gmatch(i.trim(l) or "", "%S+") do table.insert(m, n) end local n, o = m[1], {} for p = 2, #m do table.insert(o, m[p]) end local p, q for r, s in k.commands do if s.name == n or table.find(s.aliases, n) then p = s.callback q = s end end if p == nil then ac(ab.Parent.states).Library:get():Notify({ Title = "Error", Description = "Could not find command <b>" .. n .. "</b>", Duration = 5, Type = "error" }) return end local r = {} for s, t in q.arguments do local u = o[s] if u then local v = h[t.type](u) if v == nil then ac(ab.Parent.states).Library:get():Notify({ Title = "Error", Description = "There was an error validating argument: <b>" .. t.name .. "</b>", Duration = 5, Type = "error" }) end r[t.name] = v else ac(ab.Parent.states).Library:get():Notify({ Title = "Error", Description = "Missing argument <b>" .. t.name .. "</b>", Duration = 5, Type = "error" }) end end local s, t = pcall(p, f, g, r) if not s then error(t) end end end return table.freeze(j) end)() end, [62] = function() local aa, ab, ac = a(62) local ad return (function(...) local f = {} function f.raw(g: string, h: string): number if #g > #h then h, g = g, h end local i, j = #g, #h local k = table.create(j + 1, 0) for l = 1, j + 1 do k[l] = l - 1 end local l, m = table.clone(k), table.clone(k) for n = 1, i do m[1] = n - 1 for o = 1, j do local p = if g:sub(n, n) == h:sub(o, o) then 0 else 1 if n > 1 and o > 1 and g:sub(n, n) == h:sub(o - 1, o - 1) and g:sub(n - 1, n - 1) == h:sub(o, o) then local q, r = m[o + 1], k[o - 1] + 1 m[o + 1] = math.min(q, r) else local q, r, s = l[o + 1] + 1, m[o] + 1, l[o] + p m[o + 1] = math.min(q, r, s) end end k, l, m = l, m, k end return l[j + 1] end function f.weighted(g: string, h: string): number return f.raw(g, h) / (#g + #h) end return f end)() end, [63] = function() local aa, ab, ac = a(63) local ad return (function(...) local f, g = ac(ab.PubTypes), ac(ab.Utility.restrictRead) export type StateObject<T> = f.StateObject<T> export type CanBeState<T> = f.CanBeState<T> export type Symbol = f.Symbol export type Value<T> = f.Value<T> export type Computed<T> = f.Computed<T> export type ForPairs<KO, VO> = f.ForPairs<KO, VO> export type ForKeys<KI, KO> = f.ForKeys<KI, KO> export type ForValues<VI, VO> = f.ForKeys<VI, VO> export type Observer = f.Observer export type Tween<T> = f.Tween<T> export type Spring<T> = f.Spring<T> type Fusion = { version: f.Version, New: (className: string) -> (propertyTable: f.PropertyTable) -> Instance, Hydrate: (target: Instance) -> (propertyTable: f.PropertyTable) -> Instance, Ref: f.SpecialKey, Cleanup: f.SpecialKey, Children: f.SpecialKey, Out: f.SpecialKey, OnEvent: (eventName: string) -> f.SpecialKey, OnChange: (propertyName: string) -> f.SpecialKey, Value: <T>(initialValue: T) -> Value<T>, Computed: <T>(callback: () -> T, destructor: ((T) -> ())?) -> Computed<T>, ForPairs: <KI, VI, KO, VO, M>(inputTable: CanBeState<{ [KI]: VI }>, processor: (KI, VI) -> (KO, VO, M?), destructor: ((KO, VO, M?) -> ())?) -> ForPairs<KO, VO>, ForKeys: <KI, KO, M>(inputTable: CanBeState<{ [KI]: any }>, processor: (KI) -> (KO, M?), destructor: ((KO, M?) -> ())?) -> ForKeys<KO, any>, ForValues: <VI, VO, M>(inputTable: CanBeState<{ [any]: VI }>, processor: (VI) -> (VO, M?), destructor: ((VO, M?) -> ())?) -> ForValues<any, VO>, Observer: (watchedState: StateObject<any>) -> Observer, Tween: <T>(goalState: StateObject<T>, tweenInfo: TweenInfo?) -> Tween<T>, Spring: <T>(goalState: StateObject<T>, speed: number?, damping: number?) -> Spring<T>, cleanup: (...any) -> (), doNothing: (...any) -> () } return g("Fusion", { version = { major = 0, minor = 2, isRelease = true }, New = ac(ab.Instances.New), Hydrate = ac(ab.Instances.Hydrate), Ref = ac(ab.Instances.Ref), Out = ac(ab.Instances.Out), Cleanup = ac(ab.Instances.Cleanup), Children = ac(ab.Instances.Children), OnEvent = ac(ab.Instances.OnEvent), OnChange = ac(ab.Instances.OnChange), Value = ac(ab.State.Value), Computed = ac(ab.State.Computed), ForPairs = ac(ab.State.ForPairs), ForKeys = ac(ab.State.ForKeys), ForValues = ac(ab.State.ForValues), Observer = ac(ab.State.Observer), Tween = ac(ab.Animation.Tween), Spring = ac(ab.Animation.Spring), cleanup = ac(ab.Utility.cleanup), doNothing = ac(ab.Utility.doNothing) }) :: Fusion end)() end, [65] = function() local aa, ab, ac = a(65) local ad return (function(...) local f = ab.Parent.Parent local g, h, i, j, k, l, m, n, o, p, q, r = ac(f.PubTypes), ac(f.Animation.SpringScheduler), ac(f.Types), ac(f.Dependencies.initDependency), ac(f.Logging.logError), ac(f.Logging.logErrorNonFatal), ac(f.Animation.unpackType), ac(f.State.unwrap), ac(f.Dependencies.updateAll), ac(f.Dependencies.useDependency), ac(f.Utility.xtypeof), {} local s, t = { __index = r }, { __mode = "k" } function r.get(u, v: boolean?): any if v ~= false then p(u) end return u._currentValue end function r.setPosition(u, v: g.Animatable) local w = typeof(v) if w ~= u._currentType then k("springTypeMismatch", nil, w, u._currentType) end u._springPositions = m(v, w) u._currentValue = v h.add(u) o(u) end function r.setVelocity(u, v: g.Animatable) local w = typeof(v) if w ~= u._currentType then k("springTypeMismatch", nil, w, u._currentType) end u._springVelocities = m(v, w) h.add(u) end function r.addVelocity(u, v: g.Animatable) local w = typeof(v) if w ~= u._currentType then k("springTypeMismatch", nil, w, u._currentType) end local x = m(v, w) for y, z in ipairs(x) do u._springVelocities[y] += z end h.add(u) end function r.update(u): boolean local v = u._goalState:get(false) if v == u._goalValue then local w = n(u._damping) if typeof(w) ~= "number" then l("mistypedSpringDamping", nil, typeof(w)) elseif w < 0 then l("invalidSpringDamping", nil, w) else u._currentDamping = w end local x = n(u._speed) if typeof(x) ~= "number" then l("mistypedSpringSpeed", nil, typeof(x)) elseif x < 0 then l("invalidSpringSpeed", nil, x) else u._currentSpeed = x end return false else u._goalValue = v local w, x = u._currentType, typeof(v) u._currentType = x local y = m(v, x) local z = #y u._springGoals = y if x ~= w then u._currentValue = u._goalValue local A, B = table.create(z, 0), table.create(z, 0) for C, D in ipairs(y) do A[C] = D end u._springPositions = A u._springVelocities = B h.remove(u) return true elseif z == 0 then u._currentValue = u._goalValue return true else h.add(u) return false end end end local u = function(u: g.Value<T>, v: g.CanBeState<number>?, w: g.CanBeState<number>?) if v == nil then v = 10 end if w == nil then w = 1 end local x = { [u] = true } if q(v) == "State" then x[v] = true end if q(w) == "State" then x[w] = true end local y = setmetatable({ type = "State", kind = "Spring", dependencySet = x, dependentSet = setmetatable({}, t), _speed = v, _damping = w, _goalState = u, _goalValue = nil, _currentType = nil, _currentValue = nil, _currentSpeed = n(v), _currentDamping = n(w), _springPositions = nil, _springGoals = nil, _springVelocities = nil }, s) j(y) u.dependentSet[y] = true y:update() return y end return u end)() end, [66] = function() local aa, ab, ac = a(66) local ad return (function(...) local f, g = game:GetService("RunService"), ab.Parent.Parent local h, i, j, k = ac(g.Types), ac(g.Animation.packType), ac(g.Animation.springCoefficients), ac(g.Dependencies.updateAll) type Set<T> = { [T]: any } type Spring = h.Spring<any> local l, m, n: Set<Spring>, o = {}, 0.0001, {}, os.clock() function l.add(p: Spring) p._lastSchedule = o p._startDisplacements = {} p._startVelocities = {} for q, r in ipairs(p._springGoals) do p._startDisplacements[q] = p._springPositions[q] - r p._startVelocities[q] = p._springVelocities[q] end n[p] = true end function l.remove(p: Spring) n[p] = nil end local p = function() local p: Set<Spring> = {} o = os.clock() for q in pairs(n) do local r, s, t, u = j(o - q._lastSchedule, q._currentDamping, q._currentSpeed) local v, w, x, y, z = q._springPositions, q._springVelocities, q._startDisplacements, q._startVelocities, false for A, B in ipairs(q._springGoals) do local C, D = x[A], y[A] local E, F = C * r + D * s, C * t + D * u if math.abs(E) > m or math.abs(F) > m then z = true end v[A] = E + B w[A] = F end if not z then p[q] = true end end for q in pairs(n) do q._currentValue = i(q._springPositions, q._currentType) k(q) end for q in pairs(p) do n[q] = nil end end f:BindToRenderStep("__FusionSpringScheduler", Enum.RenderPriority.First.Value, p) return l end)() end, [67] = function() local aa, ab, ac = a(67) local ad return (function(...) local f = ab.Parent.Parent local g, h, i, j, k, l, m, n, o = ac(f.PubTypes), ac(f.Animation.TweenScheduler), ac(f.Types), ac(f.Dependencies.initDependency), ac(f.Logging.logError), ac(f.Logging.logErrorNonFatal), ac(f.Dependencies.useDependency), ac(f.Utility.xtypeof), {} local p, q = { __index = o }, { __mode = "k" } function o.get(r, s: boolean?): any if s ~= false then m(r) end return r._currentValue end function o.update(r): boolean local s = r._goalState:get(false) if s == r._nextValue and not r._currentlyAnimating then return false end local t = r._tweenInfo if r._tweenInfoIsState then t = t:get() end if typeof(t) ~= "TweenInfo" then l("mistypedTweenInfo", nil, typeof(t)) return false end r._prevValue = r._currentValue r._nextValue = s r._currentTweenStartTime = os.clock() r._currentTweenInfo = t local u = t.DelayTime + t.Time if t.Reverses then u += t.Time end u *= t.RepeatCount + 1 r._currentTweenDuration = u h.add(r) return false end local r = function(r: g.StateObject<g.Animatable>, s: g.CanBeState<TweenInfo>?) local t = r:get(false) if s == nil then s = TweenInfo.new() end local u, v = { [r] = true }, n(s) == "State" if v then u[s] = true end local w = s if v then w = w:get() end if typeof(w) ~= "TweenInfo" then k("mistypedTweenInfo", nil, typeof(w)) end local x = setmetatable({ type = "State", kind = "Tween", dependencySet = u, dependentSet = setmetatable({}, q), _goalState = r, _tweenInfo = s, _tweenInfoIsState = v, _prevValue = t, _nextValue = t, _currentValue = t, _currentTweenInfo = s, _currentTweenDuration = 0, _currentTweenStartTime = 0, _currentlyAnimating = false }, p) j(x) r.dependentSet[x] = true return x end return r end)() end, [68] = function() local aa, ab, ac = a(68) local ad return (function(...) local f, g = game:GetService("RunService"), ab.Parent.Parent local h, i, j, k, l = ac(g.Types), ac(g.Animation.getTweenRatio), ac(g.Animation.lerpType), ac(g.Dependencies.updateAll), {} type Set<T> = { [T]: any } type Tween = h.Tween<any> local m, n: Set<Tween> = { __mode = "k" }, {} setmetatable(n, m) function l.add(o: Tween) n[o] = true end function l.remove(o: Tween) n[o] = nil end local o = function() local o = os.clock() for p: Tween in pairs(n :: any) do local q = o - p._currentTweenStartTime if q > p._currentTweenDuration then if p._currentTweenInfo.Reverses then p._currentValue = p._prevValue else p._currentValue = p._nextValue end p._currentlyAnimating = false k(p) l.remove(p) else local r = i(p._currentTweenInfo, q) local s = j(p._prevValue, p._nextValue, r) p._currentValue = s p._currentlyAnimating = true k(p) end end end f:BindToRenderStep("__FusionTweenScheduler", Enum.RenderPriority.First.Value, o) return l end)() end, [69] = function() local aa, ab, ac = a(69) local ad return (function(...) local f = game:GetService("TweenService") local g = function(g: TweenInfo, h: number) local i, j, k, l, m, n = g.DelayTime, g.Time, g.Reverses, 1 + g.RepeatCount, g.EasingStyle, g.EasingDirection local o = i + j if k then o += j end if h >= o * l then return 1 end local p = h % o if p <= i then return 0 end local q = (p - i) / j if q > 1 then q = 2 - q end local r = f:GetValue(q, m, n) return r end return g end)() end, [70] = function() local aa, ab, ac = a(70) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.Colour.Oklab), ac(f.PubTypes) local i = function(i: any, j: any, k: number) local l = typeof(i) if typeof(j) == l then if l == "number" then local m, n = j :: number, i :: number return (m - n) * k + n elseif l == "CFrame" then local m, n = j :: CFrame, i :: CFrame return n:Lerp(m, k) elseif l == "Color3" then local m, n = j :: Color3, i :: Color3 local o, p = g.to(n), g.to(m) return g.from(o:Lerp(p, k), false) elseif l == "ColorSequenceKeypoint" then local m, n = j :: ColorSequenceKeypoint, i :: ColorSequenceKeypoint local o, p = g.to(n.Value), g.to(m.Value) return ColorSequenceKeypoint.new((m.Time - n.Time) * k + n.Time, g.from(o:Lerp(p, k), false)) elseif l == "DateTime" then local m, n = j :: DateTime, i :: DateTime return DateTime.fromUnixTimestampMillis((m.UnixTimestampMillis - n.UnixTimestampMillis) * k + n.UnixTimestampMillis) elseif l == "NumberRange" then local m, n = j :: NumberRange, i :: NumberRange return NumberRange.new((m.Min - n.Min) * k + n.Min, (m.Max - n.Max) * k + n.Max) elseif l == "NumberSequenceKeypoint" then local m, n = j :: NumberSequenceKeypoint, i :: NumberSequenceKeypoint return NumberSequenceKeypoint.new((m.Time - n.Time) * k + n.Time, (m.Value - n.Value) * k + n.Value, (m.Envelope - n.Envelope) * k + n.Envelope) elseif l == "PhysicalProperties" then local m, n = j :: PhysicalProperties, i :: PhysicalProperties return PhysicalProperties.new((m.Density - n.Density) * k + n.Density, (m.Friction - n.Friction) * k + n.Friction, (m.Elasticity - n.Elasticity) * k + n.Elasticity, (m.FrictionWeight - n.FrictionWeight) * k + n.FrictionWeight, (m.ElasticityWeight - n.ElasticityWeight) * k + n.ElasticityWeight) elseif l == "Ray" then local m, n = j :: Ray, i :: Ray return Ray.new(n.Origin:Lerp(m.Origin, k), n.Direction:Lerp(m.Direction, k)) elseif l == "Rect" then local m, n = j :: Rect, i :: Rect return Rect.new(n.Min:Lerp(m.Min, k), n.Max:Lerp(m.Max, k)) elseif l == "Region3" then local m, n = j :: Region3, i :: Region3 local o, p = n.CFrame.Position:Lerp(m.CFrame.Position, k), n.Size:Lerp(m.Size, k) / 2 return Region3.new(o - p, o + p) elseif l == "Region3int16" then local m, n = j :: Region3int16, i :: Region3int16 return Region3int16.new(Vector3int16.new((m.Min.X - n.Min.X) * k + n.Min.X, (m.Min.Y - n.Min.Y) * k + n.Min.Y, (m.Min.Z - n.Min.Z) * k + n.Min.Z), Vector3int16.new((m.Max.X - n.Max.X) * k + n.Max.X, (m.Max.Y - n.Max.Y) * k + n.Max.Y, (m.Max.Z - n.Max.Z) * k + n.Max.Z)) elseif l == "UDim" then local m, n = j :: UDim, i :: UDim return UDim.new((m.Scale - n.Scale) * k + n.Scale, (m.Offset - n.Offset) * k + n.Offset) elseif l == "UDim2" then local m, n = j :: UDim2, i :: UDim2 return n:Lerp(m, k) elseif l == "Vector2" then local m, n = j :: Vector2, i :: Vector2 return n:Lerp(m, k) elseif l == "Vector2int16" then local m, n = j :: Vector2int16, i :: Vector2int16 return Vector2int16.new((m.X - n.X) * k + n.X, (m.Y - n.Y) * k + n.Y) elseif l == "Vector3" then local m, n = j :: Vector3, i :: Vector3 return n:Lerp(m, k) elseif l == "Vector3int16" then local m, n = j :: Vector3int16, i :: Vector3int16 return Vector3int16.new((m.X - n.X) * k + n.X, (m.Y - n.Y) * k + n.Y, (m.Z - n.Z) * k + n.Z) end end if k < 0.5 then return i else return j end end return i end)() end, [71] = function() local aa, ab, ac = a(71) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.Colour.Oklab), ac(f.PubTypes) local i = function(i: { number }, j: string) if j == "number" then return i[1] elseif j == "CFrame" then return CFrame.new(i[1], i[2], i[3]) * CFrame.fromAxisAngle(Vector3.new(i[4], i[5], i[6]).Unit, i[7]) elseif j == "Color3" then return g.from(Vector3.new(i[1], i[2], i[3]), false) elseif j == "ColorSequenceKeypoint" then return ColorSequenceKeypoint.new(i[4], g.from(Vector3.new(i[1], i[2], i[3]), false)) elseif j == "DateTime" then return DateTime.fromUnixTimestampMillis(i[1]) elseif j == "NumberRange" then return NumberRange.new(i[1], i[2]) elseif j == "NumberSequenceKeypoint" then return NumberSequenceKeypoint.new(i[2], i[1], i[3]) elseif j == "PhysicalProperties" then return PhysicalProperties.new(i[1], i[2], i[3], i[4], i[5]) elseif j == "Ray" then return Ray.new(Vector3.new(i[1], i[2], i[3]), Vector3.new(i[4], i[5], i[6])) elseif j == "Rect" then return Rect.new(i[1], i[2], i[3], i[4]) elseif j == "Region3" then local k, l = Vector3.new(i[1], i[2], i[3]), Vector3.new(i[4] / 2, i[5] / 2, i[6] / 2) return Region3.new(k - l, k + l) elseif j == "Region3int16" then return Region3int16.new(Vector3int16.new(i[1], i[2], i[3]), Vector3int16.new(i[4], i[5], i[6])) elseif j == "UDim" then return UDim.new(i[1], i[2]) elseif j == "UDim2" then return UDim2.new(i[1], i[2], i[3], i[4]) elseif j == "Vector2" then return Vector2.new(i[1], i[2]) elseif j == "Vector2int16" then return Vector2int16.new(i[1], i[2]) elseif j == "Vector3" then return Vector3.new(i[1], i[2], i[3]) elseif j == "Vector3int16" then return Vector3int16.new(i[1], i[2], i[3]) else return nil end end return i end)() end, [72] = function() local aa, ab, ac = a(72) local ad return (function(...) local f = function(f: number, g: number, h: number) if f == 0 or h == 0 then return 1, 0, 0, 1 end local i, j, k, l if g > 1 then local m, n = f * h, math.sqrt(g ^ 2 - 1) local o, p = -0.5 / n, -n - g local q, r = 1 / p, math.exp(m * p) local s = math.exp(m * q) i = (s * p - r * q) * o j = (r - s) * o / h k = (s - r) * o * h l = (r * p - s * q) * o elseif g == 1 then local m = f * h local n = math.exp(-m) i = n * (1 + m) j = n * f k = n * (-m * h) l = n * (1 - m) else local m, n = f * h, math.sqrt(1 - g ^ 2) local o, p, q = 1 / n, n * m, math.exp(-m * g) local r, s = q * math.sin(p), q * math.cos(p) local t = r * o local u = t * g i = u + s j = t k = -(u * g + r * n) l = s - u end return i, j, k, l end return f end)() end, [73] = function() local aa, ab, ac = a(73) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.Colour.Oklab), ac(f.PubTypes) local i = function(i: any, j: string) if j == "number" then local k = i :: number return { k } elseif j == "CFrame" then local k, l = i:ToAxisAngle() return { i.X, i.Y, i.Z, k.X, k.Y, k.Z, l } elseif j == "Color3" then local k = g.to(i) return { k.X, k.Y, k.Z } elseif j == "ColorSequenceKeypoint" then local k = g.to(i.Value) return { k.X, k.Y, k.Z, i.Time } elseif j == "DateTime" then return { i.UnixTimestampMillis } elseif j == "NumberRange" then return { i.Min, i.Max } elseif j == "NumberSequenceKeypoint" then return { i.Value, i.Time, i.Envelope } elseif j == "PhysicalProperties" then return { i.Density, i.Friction, i.Elasticity, i.FrictionWeight, i.ElasticityWeight } elseif j == "Ray" then return { i.Origin.X, i.Origin.Y, i.Origin.Z, i.Direction.X, i.Direction.Y, i.Direction.Z } elseif j == "Rect" then return { i.Min.X, i.Min.Y, i.Max.X, i.Max.Y } elseif j == "Region3" then return { i.CFrame.X, i.CFrame.Y, i.CFrame.Z, i.Size.X, i.Size.Y, i.Size.Z } elseif j == "Region3int16" then return { i.Min.X, i.Min.Y, i.Min.Z, i.Max.X, i.Max.Y, i.Max.Z } elseif j == "UDim" then return { i.Scale, i.Offset } elseif j == "UDim2" then return { i.X.Scale, i.X.Offset, i.Y.Scale, i.Y.Offset } elseif j == "Vector2" then return { i.X, i.Y } elseif j == "Vector2int16" then return { i.X, i.Y } elseif j == "Vector3" then return { i.X, i.Y, i.Z } elseif j == "Vector3int16" then return { i.X, i.Y, i.Z } else return {} end end return i end)() end, [75] = function() local aa, ab, ac = a(75) local ad return (function(...) local f = {} function f.to(g: Color3): Vector3 local h, i, j = g.R * 0.4122214708 + g.G * 0.5363325363 + g.B * 0.0514459929, g.R * 0.2119034982 + g.G * 0.6806995451 + g.B * 0.1073969566, g.R * 0.0883024619 + g.G * 0.2817188376 + g.B * 0.6299787005 local k, l, m = h ^ 0.3333333333333333, i ^ 0.3333333333333333, j ^ 0.3333333333333333 return Vector3.new(k * 0.2104542553 + l * 0.793617785 - m * 0.0040720468, k * 1.9779984951 - l * 2.428592205 + m * 0.4505937099, k * 0.0259040371 + l * 0.7827717662 - m * 0.808675766) end function f.from(g: Vector3, h: boolean?): Color3 local i, j, k = g.X + g.Y * 0.3963377774 + g.Z * 0.2158037573, g.X - g.Y * 0.1055613458 - g.Z * 0.0638541728, g.X - g.Y * 0.0894841775 - g.Z * 1.291485548 local l, m, n = i ^ 3, j ^ 3, k ^ 3 local o, p, q = l * 4.0767416621 - m * 3.3077115913 + n * 0.2309699292, l * -1.2684380046 + m * 2.6097574011 - n * 0.3413193965, l * -4.196086299999999E-3 - m * 0.7034186147 + n * 1.707614701 if not h then o = math.clamp(o, 0, 1) p = math.clamp(p, 0, 1) q = math.clamp(q, 0, 1) end return Color3.new(o, p, q) end return f end)() end, [77] = function() local aa, ab, ac = a(77) local ad return (function(...) local f = ab.Parent.Parent local g, h, i = ac(f.PubTypes), ac(f.Logging.parseError), ac(f.Dependencies.sharedState) type Set<T> = { [T]: any } local j, k = i.initialisedStack, 0 local l = function(l: Set<g.Dependency>, m: (...any) -> any, ...) local n = i.dependencySet i.dependencySet = l i.initialisedStackSize += 1 local o, p = i.initialisedStackSize if o > k then p = {} j[o] = p k = o else p = j[o] table.clear(p) end local q = table.pack(xpcall(m, h, ...)) i.dependencySet = n i.initialisedStackSize -= 1 return table.unpack(q, 1, q.n) end return l end)() end, [78] = function() local aa, ab, ac = a(78) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.PubTypes), ac(f.Dependencies.sharedState) local i = h.initialisedStack local j = function(j: g.Dependency) local k = h.initialisedStackSize for l, m in ipairs(i) do if l > k then return end m[j] = true end end return j end)() end, [79] = function() local aa, ab, ac = a(79) local ad return (function(...) local f = ab.Parent.Parent local g = ac(f.PubTypes) type Set<T> = { [T]: any } local h: { Set<g.Dependency> }, i, j: Set<g.Dependency>? = {}, 0 return { dependencySet = j, initialisedStack = h, initialisedStackSize = i } end)() end, [80] = function() local aa, ab, ac = a(80) local ad return (function(...) local f = ab.Parent.Parent local g = ac(f.PubTypes) type Set<T> = { [T]: any } type Descendant = (g.Dependent & g.Dependency) | g.Dependent local h = function(h: g.Dependency) local i: { [Descendant]: number }, j: { [Descendant]: boolean }, k: { Descendant }, l, m = {}, {}, {}, 0, 1 for n in h.dependentSet do l += 1 k[l] = n j[n] = true end while m <= l do local n = k[m] local o = i[n] i[n] = if o == nil then 1 else o + 1 if (n :: any).dependentSet ~= nil then for p in (n :: any).dependentSet do l += 1 k[l] = p end end m += 1 end m = 1 while m <= l do local n = k[m] local o = i[n] - 1 i[n] = o if o == 0 and j[n] and n:update() and (n :: any).dependentSet ~= nil then for p in (n :: any).dependentSet do j[p] = true end end m += 1 end end return h end)() end, [81] = function() local aa, ab, ac = a(81) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.PubTypes), ac(f.Dependencies.sharedState) local i = h.initialisedStack local j = function(j: g.Dependency) local k = h.dependencySet if k ~= nil then local l = h.initialisedStackSize if l > 0 then local m = i[l] if m[j] ~= nil then return end end k[j] = true end end return j end)() end, [83] = function() local aa, ab, ac = a(83) local ad return (function(...) local f = ab.Parent.Parent local g, h, i, j = ac(f.State.Observer), ac(f.PubTypes), ac(f.Logging.logWarn), ac(f.Utility.xtypeof) type Set<T> = { [T]: boolean } local k, l = false, {} l.type = "SpecialKey" l.kind = "Children" l.stage = "descendants" function l.apply(m, n: any, o: Instance, p: { h.Task }) local q: Set<Instance>, r: Set<Instance>, s: { [h.StateObject<any>]: () -> () }, t: { [h.StateObject<any>]: () -> () }, u, v: () -> () = {}, {}, {}, {}, false local w = function() if not u then return end u = false r, q = q, r t, s = s, t table.clear(q) table.clear(s) local function w(x: any, y: string?) local z = j(x) if z == "Instance" then q[x] = true if r[x] == nil then x.Parent = o else r[x] = nil end if k and y ~= nil then x.Name = y end elseif z == "State" then local A = x:get(false) if A ~= nil then w(A, y) end local B = t[x] if B == nil then B = g(x):onChange(v) else t[x] = nil end s[x] = B elseif z == "table" then for A, B in pairs(x) do local C, D: string? = (typeof(A)) if C == "string" then D = A elseif C == "number" and y ~= nil then D = y .. "_" .. A end w(B, D) end else i("unrecognisedChildType", z) end end if n ~= nil then w(n) end for x in pairs(r) do x.Parent = nil end for x, y in pairs(t) do y() end end v = function() if not u then u = true task.defer(w) end end table.insert(p, function() n = nil u = true w() end) u = true w() end return l :: h.SpecialKey end)() end, [84] = function() local aa, ab, ac = a(84) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.PubTypes), {} h.type = "SpecialKey" h.kind = "Cleanup" h.stage = "observer" function h.apply(i, j: any, k: Instance, l: { g.Task }) table.insert(l, j) end return h end)() end, [85] = function() local aa, ab, ac = a(85) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.PubTypes), ac(f.Instances.applyInstanceProps) local i = function(i: Instance) return function(j: g.PropertyTable): Instance h(j, i) return i end end return i end)() end, [86] = function() local aa, ab, ac = a(86) local ad return (function(...) local f = ab.Parent.Parent local g, h, i, j = ac(f.PubTypes), ac(f.Instances.applyInstanceProps), ac(f.Instances.defaultProps), ac(f.Logging.logError) local k = function(k: string) return function(l: g.PropertyTable): Instance local m, n = pcall(Instance.new, k) if not m then j("cannotCreateClass", nil, k) end local o = i[k] if o ~= nil then for p, q in pairs(o) do n[p] = q end end h(l, n) return n end end return k end)() end, [87] = function() local aa, ab, ac = a(87) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.PubTypes), ac(f.Logging.logError) local i = function(i: string) local j = {} j.type = "SpecialKey" j.kind = "OnChange" j.stage = "observer" function j.apply(k, l: any, m: Instance, n: { g.Task }) local o, p = pcall(m.GetPropertyChangedSignal, m, i) if not o then h("cannotConnectChange", nil, m.ClassName, i) elseif typeof(l) ~= "function" then h("invalidChangeHandler", nil, i) else table.insert( n, p:Connect(function() l((m :: any)[i]) end) ) end end return j end return i end)() end, [88] = function() local aa, ab, ac = a(88) local ad return (function(...) local f = ab.Parent.Parent local g, h, i = ac(f.PubTypes), ac(f.Logging.logError), function(g: Instance, h: string) return (g :: any)[h] end local j = function(j: string) local k = {} k.type = "SpecialKey" k.kind = "OnEvent" k.stage = "observer" function k.apply(l, m: any, n: Instance, o: { g.Task }) local p, q = pcall(i, n, j) if not p or typeof(q) ~= "RBXScriptSignal" then h("cannotConnectEvent", nil, n.ClassName, j) elseif typeof(m) ~= "function" then h("invalidEventHandler", nil, j) else table.insert(o, q:Connect(m)) end end return k end return j end)() end, [89] = function() local aa, ab, ac = a(89) local ad return (function(...) local f = ab.Parent.Parent local g, h, i = ac(f.PubTypes), ac(f.Logging.logError), ac(f.Utility.xtypeof) local j = function(j: string) local k = {} k.type = "SpecialKey" k.kind = "Out" k.stage = "observer" function k.apply(l, m: any, n: Instance, o: { g.Task }) local p, q = pcall(n.GetPropertyChangedSignal, n, j) if not p then h("invalidOutProperty", nil, n.ClassName, j) elseif i(m) ~= "State" or m.kind ~= "Value" then h("invalidOutType") else m:set((n :: any)[j]) table.insert( o, q:Connect(function() m:set((n :: any)[j]) end) ) table.insert(o, function() m:set(nil) end) end end return k end return j end)() end, [90] = function() local aa, ab, ac = a(90) local ad return (function(...) local f = ab.Parent.Parent local g, h, i, j = ac(f.PubTypes), ac(f.Logging.logError), ac(f.Utility.xtypeof), {} j.type = "SpecialKey" j.kind = "Ref" j.stage = "observer" function j.apply(k, l: any, m: Instance, n: { g.Task }) if i(l) ~= "State" or l.kind ~= "Value" then h("invalidRefType") else l:set(m) table.insert(n, function() l:set(nil) end) end end return j end)() end, [91] = function() local aa, ab, ac = a(91) local ad return (function(...) local f = ab.Parent.Parent local g, h, i, j, k, l, m = ac(f.State.Observer), ac(f.PubTypes), ac(f.Utility.cleanup), ac(f.Logging.logError), ac(f.Utility.xtypeof), function(g: Instance, h: string, i: any) (g :: any)[h] = i end, function(g: Instance, h: string) (g :: any)[h] = (g :: any)[h] end local n = function(n: Instance, o: string, p: any) if not pcall(l, n, o, p) then if not pcall(m, n, o) then if n == nil then j("setPropertyNilRef", nil, o, tostring(p)) else j("cannotAssignProperty", nil, n.ClassName, o) end else local q, r = typeof(p), typeof((n :: any)[o]) j("invalidPropertyType", nil, n.ClassName, o, r, q) end end end local o = function(o: Instance, p: string, q: h.CanBeState<any>, r: { h.Task }) if k(q) == "State" then local s = false local t = function() if not s then s = true task.defer(function() s = false n(o, p, q:get(false)) end) end end n(o, p, q:get(false)) table.insert(r, g(q :: any):onChange(t)) else n(o, p, q) end end local p = function(p: h.PropertyTable, q: Instance) local r, s = { self = {} :: { [h.SpecialKey]: any }, descendants = {} :: { [h.SpecialKey]: any }, ancestor = {} :: { [h.SpecialKey]: any }, observer = {} :: { [h.SpecialKey]: any } }, {} for t, u in pairs(p) do local v = k(t) if v == "string" then if t ~= "Parent" then o(q, t :: string, u, s) end elseif v == "SpecialKey" then local w = (t :: h.SpecialKey).stage local x = r[w] if x == nil then j("unrecognisedPropertyStage", nil, w) else x[t] = u end else j("unrecognisedPropertyKey", nil, k(t)) end end for t, u in pairs(r.self) do t:apply(u, q, s) end for t, u in pairs(r.descendants) do t:apply(u, q, s) end if p.Parent ~= nil then o(q, "Parent", p.Parent, s) end for t, u in pairs(r.ancestor) do t:apply(u, q, s) end for t, u in pairs(r.observer) do t:apply(u, q, s) end q.Destroying:Connect(function() i(s) end) end return p end)() end, [92] = function() local aa, ab, ac = a(92) local ad return (function(...) return { ScreenGui = { ResetOnSpawn = false, ZIndexBehavior = Enum.ZIndexBehavior.Sibling }, BillboardGui = { ResetOnSpawn = false, ZIndexBehavior = Enum.ZIndexBehavior.Sibling }, SurfaceGui = { ResetOnSpawn = false, ZIndexBehavior = Enum.ZIndexBehavior.Sibling, SizingMode = Enum.SurfaceGuiSizingMode.PixelsPerStud, PixelsPerStud = 50 }, Frame = { BackgroundColor3 = Color3.new(1, 1, 1), BorderColor3 = Color3.new(0, 0, 0), BorderSizePixel = 0 }, ScrollingFrame = { BackgroundColor3 = Color3.new(1, 1, 1), BorderColor3 = Color3.new(0, 0, 0), BorderSizePixel = 0, ScrollBarImageColor3 = Color3.new(0, 0, 0) }, TextLabel = { BackgroundColor3 = Color3.new(1, 1, 1), BorderColor3 = Color3.new(0, 0, 0), BorderSizePixel = 0, Font = Enum.Font.SourceSans, Text = "", TextColor3 = Color3.new(0, 0, 0), TextSize = 14 }, TextButton = { BackgroundColor3 = Color3.new(1, 1, 1), BorderColor3 = Color3.new(0, 0, 0), BorderSizePixel = 0, AutoButtonColor = false, Font = Enum.Font.SourceSans, Text = "", TextColor3 = Color3.new(0, 0, 0), TextSize = 14 }, TextBox = { BackgroundColor3 = Color3.new(1, 1, 1), BorderColor3 = Color3.new(0, 0, 0), BorderSizePixel = 0, ClearTextOnFocus = false, Font = Enum.Font.SourceSans, Text = "", TextColor3 = Color3.new(0, 0, 0), TextSize = 14 }, ImageLabel = { BackgroundColor3 = Color3.new(1, 1, 1), BorderColor3 = Color3.new(0, 0, 0), BorderSizePixel = 0 }, ImageButton = { BackgroundColor3 = Color3.new(1, 1, 1), BorderColor3 = Color3.new(0, 0, 0), BorderSizePixel = 0, AutoButtonColor = false }, ViewportFrame = { BackgroundColor3 = Color3.new(1, 1, 1), BorderColor3 = Color3.new(0, 0, 0), BorderSizePixel = 0 }, VideoFrame = { BackgroundColor3 = Color3.new(1, 1, 1), BorderColor3 = Color3.new(0, 0, 0), BorderSizePixel = 0 }, CanvasGroup = { BackgroundColor3 = Color3.new(1, 1, 1), BorderColor3 = Color3.new(0, 0, 0), BorderSizePixel = 0 } } end)() end, [94] = function() local aa, ab, ac = a(94) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.Types), ac(f.Logging.messages) local i = function(i: string, j: g.Error?, ...) local k: string if h[i] ~= nil then k = h[i] else i = "unknownMessage" k = h[i] end local l if j == nil then l = string.format("[Fusion] " .. k .. "\n(ID: " .. i .. ")", ...) else k = k:gsub("ERROR_MESSAGE", j.message) l = string.format("[Fusion] " .. k .. "\n(ID: " .. i .. ")\n end error(l:gsub("\n", "\n "), 0) end return i end)() end, [95] = function() local aa, ab, ac = a(95) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.Types), ac(f.Logging.messages) local i = function(i: string, j: g.Error?, ...) local k: string if h[i] ~= nil then k = h[i] else i = "unknownMessage" k = h[i] end local l if j == nil then l = string.format("[Fusion] " .. k .. "\n(ID: " .. i .. ")", ...) else k = k:gsub("ERROR_MESSAGE", j.message) l = string.format("[Fusion] " .. k .. "\n(ID: " .. i .. ")\n end task.spawn(function(...) error(l:gsub("\n", "\n "), 0) end, ...) end return i end)() end, [96] = function() local aa, ab, ac = a(96) local ad return (function(...) local f = ab.Parent.Parent local g = ac(f.Logging.messages) local h = function(h, ...) local i: string if g[h] ~= nil then i = g[h] else h = "unknownMessage" i = g[h] end warn(string.format("[Fusion] " .. i .. "\n(ID: " .. h .. ")", ...)) end return h end)() end, [97] = function() local aa, ab, ac = a(97) local ad return (function(...) return { cannotAssignProperty = "The class type '%s' has no assignable property '%s'.", cannotConnectChange = "The %s class doesn't have a property called '%s'.", cannotConnectEvent = "The %s class doesn't have an event called '%s'.", cannotCreateClass = "Can't create a new instance of class '%s'.", computedCallbackError = "Computed callback error: ERROR_MESSAGE", destructorNeededValue = [[To save instances into Values, provide a destructor function. This will be an error soon - see discussion #183 on GitHub.]], destructorNeededComputed = [[To return instances from Computeds, provide a destructor function. This will be an error soon - see discussion #183 on GitHub.]], multiReturnComputed = [[Returning multiple values from Computeds is discouraged, as behaviour will change soon - see discussion #189 on GitHub.]], destructorNeededForKeys = [[To return instances from ForKeys, provide a destructor function. This will be an error soon - see discussion #183 on GitHub.]], destructorNeededForValues = [[To return instances from ForValues, provide a destructor function. This will be an error soon - see discussion #183 on GitHub.]], destructorNeededForPairs = [[To return instances from ForPairs, provide a destructor function. This will be an error soon - see discussion #183 on GitHub.]], duplicatePropertyKey = "", forKeysProcessorError = "ForKeys callback error: ERROR_MESSAGE", forKeysKeyCollision = [[ForKeys should only write to output key '%s' once when processing key changes, but it wrote to it twice. Previously input key: '%s'; New input key: '%s']], forKeysDestructorError = "ForKeys destructor error: ERROR_MESSAGE", forPairsDestructorError = "ForPairs destructor error: ERROR_MESSAGE", forPairsKeyCollision = [[ForPairs should only write to output key '%s' once when processing key changes, but it wrote to it twice. Previous input pair: '[%s] = %s'; New input pair: '[%s] = %s']], forPairsProcessorError = "ForPairs callback error: ERROR_MESSAGE", forValuesProcessorError = "ForValues callback error: ERROR_MESSAGE", forValuesDestructorError = "ForValues destructor error: ERROR_MESSAGE", invalidChangeHandler = [[The change handler for the '%s' property must be a function.]], invalidEventHandler = "The handler for the '%s' event must be a function.", invalidPropertyType = "'%s.%s' expected a '%s' type, but got a '%s' type.", invalidRefType = "Instance refs must be Value objects.", invalidOutType = "[Out] properties must be given Value objects.", invalidOutProperty = "The %s class doesn't have a property called '%s'.", invalidSpringDamping = [[The damping ratio for a spring must be >= 0. (damping was %.2f)]], invalidSpringSpeed = "The speed of a spring must be >= 0. (speed was %.2f)", mistypedSpringDamping = "The damping ratio for a spring must be a number. (got a %s)", mistypedSpringSpeed = "The speed of a spring must be a number. (got a %s)", mistypedTweenInfo = "The tween info of a tween must be a TweenInfo. (got a %s)", springTypeMismatch = "The type '%s' doesn't match the spring's type '%s'.", strictReadError = "'%s' is not a valid member of '%s'.", unknownMessage = "Unknown error: ERROR_MESSAGE", unrecognisedChildType = "'%s' type children aren't accepted by `[Children]`.", unrecognisedPropertyKey = "'%s' keys aren't accepted in property tables.", unrecognisedPropertyStage = [['%s' isn't a valid stage for a special key to be applied at.]] } end)() end, [98] = function() local aa, ab, ac = a(98) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.Types), function(g: string) return { type = "Error", raw = g, message = g:gsub("^.+:%d+:%s*", ""), trace = debug.traceback(nil, 2) } end return h end)() end, [99] = function() local aa, ab, ac = a(99) local ad return (function(...) type Set<T> = { [T]: any } export type Symbol = { type: string, name: string } export type Animatable = number | CFrame | Color3 | ColorSequenceKeypoint | DateTime | NumberRange | NumberSequenceKeypoint | PhysicalProperties | Ray | Rect | Region3 | Region3int16 | UDim | UDim2 | Vector2 | Vector2int16 | Vector3 | Vector3int16 export type Task = Instance | RBXScriptConnection | (() -> ()) | { destroy: (any) -> () } | { Destroy: (any) -> () } | { Task } export type Version = { major: number, minor: number, isRelease: boolean } export type Dependency = { dependentSet: Set<Dependent> } export type Dependent = { update: (Dependent) -> boolean, dependencySet: Set<Dependency> } export type StateObject<T> = Dependency & { type: string, kind: string, get: (StateObject<T>, asDependency: boolean?) -> T } export type CanBeState<T> = StateObject<T> | T export type Value<T> = StateObject<T> & { set: (Value<T>, newValue: any, force: boolean?) -> () } export type Computed<T> = StateObject<T> & Dependent & {} export type ForPairs<KO, VO> = StateObject<{ [KO]: VO }> & Dependent & {} export type ForKeys<KO, V> = StateObject<{ [KO]: V }> & Dependent & {} export type ForValues<K, VO> = StateObject<{ [K]: VO }> & Dependent & {} export type Tween<T> = StateObject<T> & Dependent & {} export type Spring<T> = StateObject<T> & Dependent & {} export type Observer = Dependent & { onChange: (Observer, callback: () -> ()) -> () -> () } export type SpecialKey = { type: string, kind: string, stage: string, apply: (SpecialKey, value: any, applyTo: Instance, cleanupTasks: { Task }) -> () } export type Children = Instance | StateObject<Children> | { [any]: Children } export type PropertyTable = { [(string | SpecialKey)]: any } return nil end)() end, [101] = function() local aa, ab, ac = a(101) local ad return (function(...) local f = ab.Parent.Parent local g, h, i, j, k, l, m, n, o = ac(f.Types), ac(f.Dependencies.captureDependencies), ac(f.Dependencies.initDependency), ac(f.Utility.isSimilar), ac(f.Logging.logErrorNonFatal), ac(f.Logging.logWarn), ac(f.Utility.needsDestruction), ac(f.Dependencies.useDependency), {} local p, q = { __index = o }, { __mode = "k" } function o.get(r, s: boolean?): any if s ~= false then n(r) end return r._value end function o.update(r): boolean for s in pairs(r.dependencySet) do s.dependentSet[r] = nil end r._oldDependencySet, r.dependencySet = r.dependencySet, r._oldDependencySet table.clear(r.dependencySet) local s, t, u = h(r.dependencySet, r._processor) if s then if r._destructor == nil and m(t) then l("destructorNeededComputed") end if u ~= nil then l("multiReturnComputed") end local v = r._value local w = j(v, t) if r._destructor ~= nil then r._destructor(v) end r._value = t for x in pairs(r.dependencySet) do x.dependentSet[r] = true end return not w else k("computedCallbackError", t) r._oldDependencySet, r.dependencySet = r.dependencySet, r._oldDependencySet for v in pairs(r.dependencySet) do v.dependentSet[r] = true end return false end end local r = function(r: () -> T, s: ((T) -> ())?) local t = setmetatable({ type = "State", kind = "Computed", dependencySet = {}, dependentSet = setmetatable({}, q), _oldDependencySet = {}, _processor = r, _destructor = s, _value = nil }, p) i(t) t:update() return t end return r end)() end, [102] = function() local aa, ab, ac = a(102) local ad return (function(...) local f = ab.Parent.Parent local g, h, i, j, k, l, m, n, o, p, q, r = ac(f.PubTypes), ac(f.Types), ac(f.Dependencies.captureDependencies), ac(f.Utility.cleanup), ac(f.Dependencies.initDependency), ac(f.Logging.logError), ac(f.Logging.logErrorNonFatal), ac(f.Logging.logWarn), ac(f.Utility.needsDestruction), ac(f.Logging.parseError), ac(f.Dependencies.useDependency), {} local s, t = { __index = r }, { __mode = "k" } function r.get(u, v: boolean?): any if v ~= false then q(u) end return u._outputTable end function r.update(u): boolean local v = u._inputIsState local w, x, y, z, A, B, C = if v then u._inputTable:get(false) else u._inputTable, u._oldInputTable, u._outputTable, u._keyOIMap, u._keyIOMap, u._meta, false for D in pairs(u.dependencySet) do D.dependentSet[u] = nil end u._oldDependencySet, u.dependencySet = u.dependencySet, u._oldDependencySet table.clear(u.dependencySet) if v then u._inputTable.dependentSet[u] = true u.dependencySet[u._inputTable] = true end for D, E in pairs(w) do local F = u._keyData[D] if F == nil then F = { dependencySet = setmetatable({}, t), oldDependencySet = setmetatable({}, t), dependencyValues = setmetatable({}, t) } u._keyData[D] = F end local G = x[D] == nil if G == false then for H, I in pairs(F.dependencyValues) do if I ~= H:get(false) then G = true break end end end if G then F.oldDependencySet, F.dependencySet = F.dependencySet, F.oldDependencySet table.clear(F.dependencySet) local H, I, J = i(F.dependencySet, u._processor, D) if H then if u._destructor == nil and (o(I) or o(J)) then n("destructorNeededForKeys") end local K, L = z[I], A[D] if K ~= D and w[K] ~= nil then l("forKeysKeyCollision", nil, tostring(I), tostring(K), tostring(I)) end if L ~= I and z[L] == D then local M = B[L] local N, O = xpcall(u._destructor or j, p, L, M) if not N then m("forKeysDestructorError", O) end z[L] = nil y[L] = nil B[L] = nil end x[D] = E B[I] = J z[I] = D A[D] = I y[I] = E C = true else F.oldDependencySet, F.dependencySet = F.dependencySet, F.oldDependencySet m("forKeysProcessorError", I) end end for H in pairs(F.dependencySet) do F.dependencyValues[H] = H:get(false) u.dependencySet[H] = true H.dependentSet[u] = true end end for D, E in pairs(z) do if w[E] == nil then local F = B[D] local G, H = xpcall(u._destructor or j, p, D, F) if not G then m("forKeysDestructorError", H) end x[E] = nil B[D] = nil z[D] = nil A[E] = nil y[D] = nil u._keyData[E] = nil C = true end end return C end local u = function(u: g.CanBeState<{ [KI]: any }>, v: (KI) -> (KO, M?), w: ((KO, M?) -> ())?) local x = u.type == "State" and typeof(u.get) == "function" local y = setmetatable({ type = "State", kind = "ForKeys", dependencySet = {}, dependentSet = setmetatable({}, t), _oldDependencySet = {}, _processor = v, _destructor = w, _inputIsState = x, _inputTable = u, _oldInputTable = {}, _outputTable = {}, _keyOIMap = {}, _keyIOMap = {}, _keyData = {}, _meta = {} }, s) k(y) y:update() return y end return u end)() end, [103] = function() local aa, ab, ac = a(103) local ad return (function(...) local f = ab.Parent.Parent local g, h, i, j, k, l, m, n, o, p, q, r = ac(f.PubTypes), ac(f.Types), ac(f.Dependencies.captureDependencies), ac(f.Utility.cleanup), ac(f.Dependencies.initDependency), ac(f.Logging.logError), ac(f.Logging.logErrorNonFatal), ac(f.Logging.logWarn), ac(f.Utility.needsDestruction), ac(f.Logging.parseError), ac(f.Dependencies.useDependency), {} local s, t = { __index = r }, { __mode = "k" } function r.get(u, v: boolean?): any if v ~= false then q(u) end return u._outputTable end function r.update(u): boolean local v = u._inputIsState local w, x, y, z, A = if v then u._inputTable:get(false) else u._inputTable, u._oldInputTable, u._keyIOMap, u._meta, false for B in pairs(u.dependencySet) do B.dependentSet[u] = nil end u._oldDependencySet, u.dependencySet = u.dependencySet, u._oldDependencySet table.clear(u.dependencySet) if v then u._inputTable.dependentSet[u] = true u.dependencySet[u._inputTable] = true end u._oldOutputTable, u._outputTable = u._outputTable, u._oldOutputTable local B, C = u._oldOutputTable, u._outputTable table.clear(C) for D, E in pairs(w) do local F = u._keyData[D] if F == nil then F = { dependencySet = setmetatable({}, t), oldDependencySet = setmetatable({}, t), dependencyValues = setmetatable({}, t) } u._keyData[D] = F end local G = x[D] ~= E if G == false then for H, I in pairs(F.dependencyValues) do if I ~= H:get(false) then G = true break end end end if G then F.oldDependencySet, F.dependencySet = F.dependencySet, F.oldDependencySet table.clear(F.dependencySet) local H, I, J, K = i(F.dependencySet, u._processor, D, E) if H then if u._destructor == nil and (o(I) or o(J) or o(K)) then n("destructorNeededForPairs") end if C[I] ~= nil then local L, M for N, O in pairs(y) do if O == I then M = w[N] if M ~= nil then L = N break end end end if L ~= nil then l("forPairsKeyCollision", nil, tostring(I), tostring(L), tostring(M), tostring(D), tostring(E)) end end local L = B[I] if L ~= J then local M = z[I] if L ~= nil then local N, O = xpcall(u._destructor or j, p, I, L, M) if not N then m("forPairsDestructorError", O) end end B[I] = nil end x[D] = E y[D] = I z[I] = K C[I] = J A = true else F.oldDependencySet, F.dependencySet = F.dependencySet, F.oldDependencySet m("forPairsProcessorError", I) end else local H = y[D] if C[H] ~= nil then local I, J for K, L in pairs(y) do if H == L then J = w[K] if J ~= nil then I = K break end end end if I ~= nil then l("forPairsKeyCollision", nil, tostring(H), tostring(I), tostring(J), tostring(D), tostring(E)) end end C[H] = B[H] end for H in pairs(F.dependencySet) do F.dependencyValues[H] = H:get(false) u.dependencySet[H] = true H.dependentSet[u] = true end end for D, E in pairs(B) do if C[D] ~= E then local F = z[D] if E ~= nil then local G, H = xpcall(u._destructor or j, p, D, E, F) if not G then m("forPairsDestructorError", H) end end if C[D] == nil then z[D] = nil u._keyData[D] = nil end A = true end end for D in pairs(x) do if w[D] == nil then x[D] = nil y[D] = nil end end return A end local u = function(u: g.CanBeState<{ [KI]: VI }>, v: (KI, VI) -> (KO, VO, M?), w: ((KO, VO, M?) -> ())?) local x = u.type == "State" and typeof(u.get) == "function" local y = setmetatable({ type = "State", kind = "ForPairs", dependencySet = {}, dependentSet = setmetatable({}, t), _oldDependencySet = {}, _processor = v, _destructor = w, _inputIsState = x, _inputTable = u, _oldInputTable = {}, _outputTable = {}, _oldOutputTable = {}, _keyIOMap = {}, _keyData = {}, _meta = {} }, s) k(y) y:update() return y end return u end)() end, [104] = function() local aa, ab, ac = a(104) local ad return (function(...) local f = ab.Parent.Parent local g, h, i, j, k, l, m, n, o, p, q = ac(f.PubTypes), ac(f.Types), ac(f.Dependencies.captureDependencies), ac(f.Utility.cleanup), ac(f.Dependencies.initDependency), ac(f.Logging.logErrorNonFatal), ac(f.Logging.logWarn), ac(f.Utility.needsDestruction), ac(f.Logging.parseError), ac(f.Dependencies.useDependency), {} local r, s = { __index = q }, { __mode = "k" } function q.get(t, u: boolean?): any if u ~= false then p(t) end return t._outputTable end function q.update(t): boolean local u = t._inputIsState local v, w, x = if u then t._inputTable:get(false) else t._inputTable, {}, false t._oldValueCache, t._valueCache = t._valueCache, t._oldValueCache local y, z = t._valueCache, t._oldValueCache table.clear(y) for A in pairs(t.dependencySet) do A.dependentSet[t] = nil end t._oldDependencySet, t.dependencySet = t.dependencySet, t._oldDependencySet table.clear(t.dependencySet) if u then t._inputTable.dependentSet[t] = true t.dependencySet[t._inputTable] = true end for A, B in pairs(v) do local C = z[B] local D, E, F, G = (C == nil) if type(C) == "table" and #C > 0 then local H = table.remove(C, #C) E = H.value F = H.valueData G = H.meta if #C <= 0 then z[B] = nil end elseif C ~= nil then z[B] = nil D = true end if F == nil then F = { dependencySet = setmetatable({}, s), oldDependencySet = setmetatable({}, s), dependencyValues = setmetatable({}, s) } end if D == false then for H, I in pairs(F.dependencyValues) do if I ~= H:get(false) then D = true break end end end if D then F.oldDependencySet, F.dependencySet = F.dependencySet, F.oldDependencySet table.clear(F.dependencySet) local H, I, J = i(F.dependencySet, t._processor, B) if H then if t._destructor == nil and (n(I) or n(J)) then m("destructorNeededForValues") end if E ~= nil then local K, L = xpcall(t._destructor or j, o, E, G) if not K then l("forValuesDestructorError", L) end end E = I G = J x = true else F.oldDependencySet, F.dependencySet = F.dependencySet, F.oldDependencySet l("forValuesProcessorError", I) end end local H = y[B] if H == nil then H = {} y[B] = H end table.insert(H, { value = E, valueData = F, meta = G }) w[A] = E for I in pairs(F.dependencySet) do F.dependencyValues[I] = I:get(false) t.dependencySet[I] = true I.dependentSet[t] = true end end for A, B in pairs(z) do for C, D in ipairs(B) do local E, F = D.value, D.meta local G, H = xpcall(t._destructor or j, o, E, F) if not G then l("forValuesDestructorError", H) end x = true end table.clear(B) end t._outputTable = w return x end local t = function(t: g.CanBeState<{ [any]: VI }>, u: (VI) -> (VO, M?), v: ((VO, M?) -> ())?) local w = t.type == "State" and typeof(t.get) == "function" local x = setmetatable({ type = "State", kind = "ForValues", dependencySet = {}, dependentSet = setmetatable({}, s), _oldDependencySet = {}, _processor = u, _destructor = v, _inputIsState = w, _inputTable = t, _outputTable = {}, _valueCache = {}, _oldValueCache = {} }, r) k(x) x:update() return x end return t end)() end, [105] = function() local aa, ab, ac = a(105) local ad return (function(...) local f = ab.Parent.Parent local g, h, i = ac(f.PubTypes), ac(f.Types), ac(f.Dependencies.initDependency) type Set<T> = { [T]: any } local j = {} local k, l: Set<h.Observer> = { __index = j }, {} function j.update(m): boolean for n, o in pairs(m._changeListeners) do task.spawn(o) end return false end function j.onChange(m, n: () -> ()): () -> () local o = {} m._numChangeListeners += 1 m._changeListeners[o] = n l[m] = true local p = false return function() if p then return end p = true m._changeListeners[o] = nil m._numChangeListeners -= 1 if m._numChangeListeners == 0 then l[m] = nil end end end local m = function(m: g.Value<any>) local n = setmetatable({ type = "State", kind = "Observer", dependencySet = { [m] = true }, dependentSet = {}, _changeListeners = {}, _numChangeListeners = 0 }, k) i(n) m.dependentSet[n] = true return n end return m end)() end, [106] = function() local aa, ab, ac = a(106) local ad return (function(...) local f = ab.Parent.Parent local g, h, i, j, k, l = ac(f.Types), ac(f.Dependencies.initDependency), ac(f.Utility.isSimilar), ac(f.Dependencies.updateAll), ac(f.Dependencies.useDependency), {} local m, n = { __index = l }, { __mode = "k" } function l.get(o, p: boolean?): any if p ~= false then k(o) end return o._value end function l.set(o, p: any, q: boolean?) local r = o._value if q or not i(r, p) then o._value = p j(o) end end local o = function(o: T) local p = setmetatable({ type = "State", kind = "Value", dependentSet = setmetatable({}, n), _value = o }, m) h(p) return p end return o end)() end, [107] = function() local aa, ab, ac = a(107) local ad return (function(...) local f = ab.Parent.Parent local g, h = ac(f.PubTypes), ac(f.Utility.xtypeof) local i = function(i: g.CanBeState<T>, j: boolean?) return if h(i) == "State" then (i :: g.StateObject<T>):get(j) else i :: T end return i end)() end, [108] = function() local aa, ab, ac = a(108) local ad return (function(...) local f = ab.Parent local g = ac(f.PubTypes) type Set<T> = { [T]: any } export type None = g.Symbol & {} export type Error = { type: string, raw: string, message: string, trace: string } export type State<T> = g.Value<T> & { _value: T } export type Computed<T> = g.Computed<T> & { _oldDependencySet: Set<g.Dependency>, _callback: () -> T, _value: T } export type ForPairs<KI, VI, KO, VO, M> = g.ForPairs<KO, VO> & { _oldDependencySet: Set<g.Dependency>, _processor: (KI, VI) -> (KO, VO), _destructor: (VO, M?) -> (), _inputIsState: boolean, _inputTable: g.CanBeState<{ [KI]: VI }>, _oldInputTable: { [KI]: VI }, _outputTable: { [KO]: VO }, _oldOutputTable: { [KO]: VO }, _keyIOMap: { [KI]: KO }, _meta: { [KO]: M? }, _keyData: { [KI]: { dependencySet: Set<g.Dependency>, oldDependencySet: Set<g.Dependency>, dependencyValues: { [g.Dependency]: any } } } } export type ForKeys<KI, KO, M> = g.ForKeys<KO, any> & { _oldDependencySet: Set<g.Dependency>, _processor: (KI) -> KO, _destructor: (KO, M?) -> (), _inputIsState: boolean, _inputTable: g.CanBeState<{ [KI]: KO }>, _oldInputTable: { [KI]: KO }, _outputTable: { [KO]: any }, _keyOIMap: { [KO]: KI }, _meta: { [KO]: M? }, _keyData: { [KI]: { dependencySet: Set<g.Dependency>, oldDependencySet: Set<g.Dependency>, dependencyValues: { [g.Dependency]: any } } } } export type ForValues<VI, VO, M> = g.ForValues<any, VO> & { _oldDependencySet: Set<g.Dependency>, _processor: (VI) -> VO, _destructor: (VO, M?) -> (), _inputIsState: boolean, _inputTable: g.CanBeState<{ [VI]: VO }>, _outputTable: { [any]: VI }, _valueCache: { [VO]: any }, _oldValueCache: { [VO]: any }, _meta: { [VO]: M? }, _valueData: { [VI]: { dependencySet: Set<g.Dependency>, oldDependencySet: Set<g.Dependency>, dependencyValues: { [g.Dependency]: any } } } } export type Tween<T> = g.Tween<T> & { _goalState: State<T>, _tweenInfo: TweenInfo, _prevValue: T, _nextValue: T, _currentValue: T, _currentTweenInfo: TweenInfo, _currentTweenDuration: number, _currentTweenStartTime: number, _currentlyAnimating: boolean } export type Spring<T> = g.Spring<T> & { _speed: g.CanBeState<number>, _speedIsState: boolean, _lastSpeed: number, _damping: g.CanBeState<number>, _dampingIsState: boolean, _lastDamping: number, _goalState: State<T>, _goalValue: T, _currentType: string, _currentValue: T, _springPositions: { number }, _springGoals: { number }, _springVelocities: { number } } export type Observer = g.Observer & { _changeListeners: Set<() -> ()>, _numChangeListeners: number } return nil end)() end, [110] = function() local aa, ab, ac = a(110) local ad return (function(...) local f = ab.Parent.Parent local g = ac(f.Types) return { type = "Symbol", name = "None" } :: g.None end)() end, [111] = function() local aa, ab, ac = a(111) local ad return (function(...) local function f(g: any) local h = typeof(g) if h == "Instance" then g:Destroy() elseif h == "RBXScriptConnection" then g:Disconnect() elseif h == "function" then g() elseif h == "table" then if typeof(g.destroy) == "function" then g:destroy() elseif typeof(g.Destroy) == "function" then g:Destroy() elseif g[1] ~= nil then for i, j in ipairs(g) do f(j) end end end end local g = function(...) for g = 1, select("#", ...) do f(select(g, ...)) end end return g end)() end, [112] = function() local aa, ab, ac = a(112) local ad return (function(...) local f = function(...) end return f end)() end, [113] = function() local aa, ab, ac = a(113) local ad return (function(...) local f = function(f: any, g: any) if typeof(f) == "table" then return false else return f == g end end return f end)() end, [114] = function() local aa, ab, ac = a(114) local ad return (function(...) local f = function(f: any) return typeof(f) == "Instance" end return f end)() end, [115] = function() local aa, ab, ac = a(115) local ad return (function(...) local f = ab.Parent.Parent local g = ac(f.Logging.logError) type table = { [any]: any } local h = function(h: string, i: table) local j = getmetatable(i :: any) if j == nil then j = {} setmetatable(i, j) end function j.__index(k, l) g("strictReadError", nil, tostring(l), h) end return i end return h end)() end, [116] = function() local aa, ab, ac = a(116) local ad return (function(...) local f = function(f: any) local g = typeof(f) if g == "table" and typeof(f.type) == "string" then return f.type else return g end end return f end)() end, [117] = function() local aa, ab, ac = a(117) local ad return (function(...) local f = {} f.ClassName = "Maid" function f.new() return setmetatable({ _tasks = {} }, f) end function f.isMaid(g) return type(g) == "table" and g.ClassName == "Maid" end function f.__index(g, h) if f[h] then return f[h] else return g._tasks[h] end end function f.__newindex(g, h, i) if f[h] ~= nil then error(("'%s' is reserved"):format(tostring(h)), 2) end local j = g._tasks local k = j[h] if k == i then return end j[h] = i if k then if type(k) == "function" then k() elseif typeof(k) == "RBXScriptConnection" then k:Disconnect() elseif k.Destroy then k:Destroy() end end end function f.GiveTask(g, h) if not h then error("Task cannot be false or nil", 2) end local i = #g._tasks + 1 g[i] = h return i end function f.GivePromise(g, h) if not h:IsPending() then return h end local i = h.resolved(h) local j = g:GiveTask(i) i:Finally(function() g[j] = nil end) return i end function f.DoCleaning(g) local h = g._tasks for i, j in pairs(h) do if typeof(j) == "RBXScriptConnection" then h[i] = nil j:Disconnect() end end local i, j = next(h) while j ~= nil do h[i] = nil if type(j) == "function" then j() elseif typeof(j) == "RBXScriptConnection" then j:Disconnect() elseif j.Destroy then j:Destroy() end i, j = next(h) end end f.Destroy = f.DoCleaning return f end)() end, [118] = function() local aa, ab, ac = a(118) local ad return (function(...) local f, g = ac(ab.SnapdragonController), ac(ab.SnapdragonRef) local h, i, j = function(...) return f.new(...) end, function(h) return g.new(h) end j = { createDragController = h, SnapdragonController = f, createRef = i } j.default = j return j end)() end, [119] = function() local aa, ab, ac = a(119) local ad return (function(...) local f = {} f.ClassName = "Maid" function f.new() local g = {} g._tasks = {} return setmetatable(g, f) end function f.__index(g, h) if f[h] then return f[h] else return g._tasks[h] end end function f.__newindex(g, h, i) if f[h] ~= nil then error(("'%s' is reserved"):format(tostring(h)), 2) end local j = g._tasks local k = j[h] j[h] = i if k then if type(k) == "function" then k() elseif typeof(k) == "RBXScriptConnection" then k:Disconnect() elseif k.Destroy then k:Destroy() end end end function f.GiveTask(g, h) assert(h, "Task cannot be false or nil") local i = #g._tasks + 1 g[i] = h if type(h) == "table" and not h.Destroy then warn("[Maid.GiveTask] - Gave table task without .Destroy\n\n" .. debug.traceback()) end return i end function f.GivePromise(g, h) if not h:IsPending() then return h end local i = h.resolved(h) local j = g:GiveTask(i) i:Finally(function() g[j] = nil end) return i end function f.DoCleaning(g) local h = g._tasks for i, j in pairs(h) do if typeof(j) == "RBXScriptConnection" then h[i] = nil j:Disconnect() end end local i, j = next(h) while j ~= nil do h[i] = nil if type(j) == "function" then j() elseif typeof(j) == "RBXScriptConnection" then j:Disconnect() elseif j.Destroy then j:Destroy() end i, j = next(h) end end f.Destroy = f.DoCleaning return f end)() end, [120] = function() local aa, ab, ac = a(120) local ad return (function(...) local f = {} f.__index = f function f.new() return setmetatable({ Bindable = Instance.new("BindableEvent") }, f) end function f.Connect(g, h) return g.Bindable.Event:Connect(function(i) h(i()) end) end function f.Fire(g, ...) local h, i = { ... }, select("#", ...) g.Bindable:Fire(function() return unpack(h, 1, i) end) end function f.Wait(g) return g.Bindable.Event:Wait()() end function f.Destroy(g) g.Bindable:Destroy() end return f end)() end, [121] = function() local aa, ab, ac = a(121) local ad return (function(...) local f, g, h, i, j, k = game:GetService("UserInputService"), ac(ab.Parent.Maid), ac(ab.Parent.Signal), ac(ab.Parent.SnapdragonRef), ac(ab.Parent.objectAssign), ac(ab.Parent.t) local l, m, n, o = k.interface({ Vertical = k.optional(k.Vector2), Horizontal = k.optional(k.Vector2) }), k.literal("XY", "X", "Y"), k.literal("LayerCollector", "Parent"), k.literal("Offset", "Scale") local p, q = k.interface({ DragGui = k.union(k.instanceIsA("GuiObject"), i.is), DragThreshold = k.number, DragGridSize = k.number, SnapMargin = l, SnapMarginThreshold = l, SnapAxis = m, DragAxis = m, DragRelativeTo = n, SnapEnabled = k.boolean, Debugging = k.boolean, DragPositionMode = o }), {} q.__index = q local r = setmetatable({}, { __mode = "k" }) function q.new(s, t) t = j({ DragGui = s, DragThreshold = 0, DragGridSize = 0, SnapMargin = {}, SnapMarginThreshold = {}, SnapEnabled = true, DragEndedResetsPosition = false, SnapAxis = "XY", DragAxis = "XY", Debugging = false, DragRelativeTo = "LayerCollector", DragPositionMode = "Scale" }, t) assert(p(t)) local u, v = setmetatable({}, q), t.DragGui u.dragGui = v u.gui = s u.debug = t.Debugging u.originPosition = v.Position u.canDrag = t.CanDrag u.dragEndedResetsPosition = t.DragEndedResetsPosition u.snapEnabled = t.SnapEnabled u.snapAxis = t.SnapAxis u.dragAxis = t.DragAxis u.dragThreshold = t.DragThreshold u.dragRelativeTo = t.DragRelativeTo u.dragGridSize = t.DragGridSize u.dragPositionMode = t.DragPositionMode u._useAbsoluteCoordinates = false local w, x, y = h.new(), h.new(), h.new() u.DragEnded = w u.DragBegan = y u.DragChanged = x u.maid = g.new() u:SetSnapEnabled(t.SnapEnabled) u:SetSnapMargin(t.SnapMargin) u:SetSnapThreshold(t.SnapMarginThreshold) return u end function q.SetSnapEnabled(s, t) assert(k.boolean(t)) s.snapEnabled = t end function q.SetSnapMargin(s, t) assert(l(t)) local u, v = t.Vertical or Vector2.new(), t.Horizontal or Vector2.new() s.snapVerticalMargin = u s.snapHorizontalMargin = v end function q.SetSnapThreshold(s, t) assert(l(t)) local u, v = t.Vertical or Vector2.new(), t.Horizontal or Vector2.new() s.snapThresholdVertical = u s.snapThresholdHorizontal = v end function q.GetDragGui(s) local t = s.dragGui if i.is(t) then return t:Get(), t else return t, t end end function q.GetGui(s) local t = s.gui if i.is(t) then return t:Get() else return t end end function q.ResetPosition(s) s.dragGui.Position = s.originPosition end function q.__bindControllerBehaviour(s) local t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M = s.maid, s.debug, s:GetGui(), s:GetDragGui(), s.snapEnabled, s.DragEnded, s.DragBegan, s.DragChanged, s.snapAxis, s.dragAxis, s.dragRelativeTo, s.dragGridSize, s.dragPositionMode, s._useAbsoluteCoordinates local ai = function(N) local O, P, Q, R, S, T = s.snapHorizontalMargin, s.snapVerticalMargin, s.snapThresholdVertical, s.snapThresholdHorizontal, workspace.CurrentCamera.ViewportSize, N.Position - K if C == "X" then T = Vector3.new(T.X, 0, 0) elseif C == "Y" then T = Vector3.new(0, T.Y, 0) end v = w or v H = { X = "Float", Y = "Float" } local U, V = v:FindFirstAncestorOfClass("ScreenGui") or v:FindFirstAncestorOfClass("PluginGui"), Vector2.new() if U and D == "LayerCollector" then S = U.AbsoluteSize elseif D == "Parent" then assert(v.Parent:IsA("GuiObject"), [[DragRelativeTo is set to Parent, but the parent is not a GuiObject!]]) S = v.Parent.AbsoluteSize end if x then local W, X, Y, Z, _, ai = S.X * L.X.Scale, S.Y * L.Y.Scale, L.X.Offset + T.X, L.Y.Offset + T.Y, v.AbsoluteSize + Vector2.new(O.Y, P.Y + V.Y), Vector2.new(v.AbsoluteSize.X * v.AnchorPoint.X, v.AbsoluteSize.Y * v.AnchorPoint.Y) if B == "XY" or B == "X" then local aj, ak = O.X + ai.X, S.X - _.X + ai.X if (Y + W) > ak - R.Y then Y = ak - W H.X = "Max" elseif (Y + W) < aj + R.X then Y = -W + aj H.X = "Min" end end if B == "XY" or B == "Y" then local aj, ak = P.X + ai.Y, S.Y - _.Y + ai.Y if (Z + X) > ak - Q.Y then Z = ak - X H.Y = "Max" elseif (Z + X) < aj + Q.X then Z = -X + aj H.Y = "Min" end end if E > 0 then Y = math.floor(Y / E) * E Z = math.floor(Z / E) * E end if F == "Offset" then local aj = UDim2.new(L.X.Scale, Y, L.Y.Scale, Z) v.Position = aj A:Fire({ GuiPosition = aj }) else local aj = UDim2.new(L.X.Scale + (Y / S.X), 0, L.Y.Scale + (Z / S.Y), 0) v.Position = aj A:Fire({ SnapAxis = B, GuiPosition = aj, DragPositionMode = F }) end else if E > 0 then T = Vector2.new(math.floor(T.X / E) * E, math.floor(T.Y / E) * E) end local ai = UDim2.new(L.X.Scale, L.X.Offset + T.X, L.Y.Scale, L.Y.Offset + T.Y) v.Position = ai A:Fire({ GuiPosition = ai }) end end t.guiInputBegan = v.InputBegan:Connect(function(aj) local ak = true if type(s.canDrag) == "function" then ak = s.canDrag() end if (aj.UserInputType == Enum.UserInputType.MouseButton1 or aj.UserInputType == Enum.UserInputType.Touch) and ak then I = true K = aj.Position local N = (w or v) L = G and UDim2.new(0, N.AbsolutePosition.X, 0, N.AbsolutePosition.Y) or N.Position M = N.Position z:Fire({ AbsolutePosition = (w or v).AbsolutePosition, InputPosition = K, GuiPosition = L }) if u then  print("[snapdragon]", "Drag began", aj.Position) end end end) t.guiInputEnded = v.InputEnded:Connect(function(aj) if I and aj.UserInputState == Enum.UserInputState.End and (aj.UserInputType == Enum.UserInputType.MouseButton1 or aj.UserInputType == Enum.UserInputType.Touch) then I = false local ak = (w or v) local N = ak.Position y:Fire({ InputPosition = aj.Position, GuiPosition = N, ReachedExtents = H, DraggedGui = w or v }) if u then  print("[snapdragon]", "Drag ended", aj.Position) end local O = s.dragEndedResetsPosition if O then ak.Position = M end end end) t.guiInputChanged = v.InputChanged:Connect(function(aj) if aj.UserInputType == Enum.UserInputType.MouseMovement or aj.UserInputType == Enum.UserInputType.Touch then J = aj end end) t.uisInputChanged = f.InputChanged:Connect(function(aj) if aj == J and I then ai(aj) end end) end function q.Connect(ai) if ai.locked then error("[SnapdragonController] Cannot connect locked controller!", 2) end local aj, ak = ai:GetDragGui() if not r[ak] or r[ak] == ai then r[ak] = ai ai:__bindControllerBehaviour() else error([[[SnapdragonController] This object is already bound to a controller]]) end return ai end function q.Disconnect(ai) if ai.locked then error("[SnapdragonController] Cannot disconnect locked controller!", 2) end local aj, ak = ai:GetDragGui() local s = r[ak] if s then ai.maid:DoCleaning() r[ak] = nil end end function q.Destroy(ai) ai:Disconnect() ai.DragEnded:Destroy() ai.DragBegan:Destroy() ai.DragEnded = nil ai.DragBegan = nil ai.locked = true end return q end)() end, [122] = function() local aa, ab, ac = a(122) local ad return (function(...) local ai, aj = setmetatable({}, { __mode = "k" }), {} aj.__index = aj function aj.new(ak) local f = setmetatable({ current = ak }, aj) ai[f] = f return f end function aj.Update(ak, f) ak.current = f end function aj.Get(ak) return ak.current end function aj.is(ak) return ai[ak] ~= nil end return aj end)() end, [123] = function() local aa, ab, ac = a(123) local ad return (function(...) local ai = {} function ai.named(aj) assert(type(aj) == "string", "Symbols must be created using a string name!") local ak, f = newproxy(true), ("Symbol(%s)"):format(aj) getmetatable(ak).__tostring = function() return f end return ak end return ai end)() end, [124] = function() local aa, ab, ac = a(124) local ad return (function(...) local ai = function(ai, ...) local aj = { ... } for ak, f in pairs(aj) do for g, h in pairs(f) do ai[g] = h end end return ai end return ai end)() end, [125] = function() local aa, ab, ac = a(125) local ad return (function(...) local ai = typeof or type local aj, ak = function(aj) return function(ak) local f = ai(ak) if f == aj then return true else return false, string.format("%s expected, got %s", aj, f) end end end, {} function ak.any(f) if f ~= nil then return true else return false, "any expected, got nil" end end ak.boolean = aj("boolean") ak.thread = aj("thread") ak.callback = aj("function") ak.none = aj("nil") ak.string = aj("string") ak.table = aj("table") ak.userdata = aj("userdata") function ak.number(f) local g = ai(f) if g == "number" then if f == f then return true else return false, "unexpected NaN value" end else return false, string.format("number expected, got %s", g) end end function ak.nan(f) if f ~= f then return true else return false, "unexpected non-NaN value" end end ak.Axes = aj("Axes") ak.BrickColor = aj("BrickColor") ak.CFrame = aj("CFrame") ak.Color3 = aj("Color3") ak.ColorSequence = aj("ColorSequence") ak.ColorSequenceKeypoint = aj("ColorSequenceKeypoint") ak.DockWidgetPluginGuiInfo = aj("DockWidgetPluginGuiInfo") ak.Faces = aj("Faces") ak.Instance = aj("Instance") ak.NumberRange = aj("NumberRange") ak.NumberSequence = aj("NumberSequence") ak.NumberSequenceKeypoint = aj("NumberSequenceKeypoint") ak.PathWaypoint = aj("PathWaypoint") ak.PhysicalProperties = aj("PhysicalProperties") ak.Random = aj("Random") ak.Ray = aj("Ray") ak.Rect = aj("Rect") ak.Region3 = aj("Region3") ak.Region3int16 = aj("Region3int16") ak.TweenInfo = aj("TweenInfo") ak.UDim = aj("UDim") ak.UDim2 = aj("UDim2") ak.Vector2 = aj("Vector2") ak.Vector3 = aj("Vector3") ak.Vector3int16 = aj("Vector3int16") ak.Enum = aj("Enum") ak.EnumItem = aj("EnumItem") ak.RBXScriptSignal = aj("RBXScriptSignal") ak.RBXScriptConnection = aj("RBXScriptConnection") function ak.literal(...) local f = select("#", ...) if f == 1 then local g = ... return function(h) if h ~= g then return false, string.format("expected %s, got %s", tostring(g), tostring(h)) end return true end else local g = {} for h = 1, f do local i = select(h, ...) g[h] = ak.literal(i) end return ak.union(table.unpack(g, 1, f)) end end ak.exactly = ak.literal function ak.keyOf(f) local g, h = {}, 0 for i in pairs(f) do h = h + 1 g[h] = i end return ak.literal(table.unpack(g, 1, h)) end function ak.valueOf(f) local g, h = {}, 0 for i, j in pairs(f) do h = h + 1 g[h] = j end return ak.literal(table.unpack(g, 1, h)) end function ak.integer(f) local g, h = ak.number(f) if not g then return false, h or "" end if f % 1 == 0 then return true else return false, string.format("integer expected, got %s", f) end end function ak.numberMin(f) return function(g) local h, i = ak.number(g) if not h then return false, i or "" end if g >= f then return true else return false, string.format("number >= %s expected, got %s", f, g) end end end function ak.numberMax(f) return function(g) local h, i = ak.number(g) if not h then return false, i end if g <= f then return true else return false, string.format("number <= %s expected, got %s", f, g) end end end function ak.numberMinExclusive(f) return function(g) local h, i = ak.number(g) if not h then return false, i or "" end if f < g then return true else return false, string.format("number > %s expected, got %s", f, g) end end end function ak.numberMaxExclusive(f) return function(g) local h, i = ak.number(g) if not h then return false, i or "" end if g < f then return true else return false, string.format("number < %s expected, got %s", f, g) end end end ak.numberPositive = ak.numberMinExclusive(0) ak.numberNegative = ak.numberMaxExclusive(0) function ak.numberConstrained(f, g) assert(ak.number(f) and ak.number(g)) local h, i = ak.numberMin(f), ak.numberMax(g) return function(j) local k, l = h(j) if not k then return false, l or "" end local m, n = i(j) if not m then return false, n or "" end return true end end function ak.numberConstrainedExclusive(f, g) assert(ak.number(f) and ak.number(g)) local h, i = ak.numberMinExclusive(f), ak.numberMaxExclusive(g) return function(j) local k, l = h(j) if not k then return false, l or "" end local m, n = i(j) if not m then return false, n or "" end return true end end function ak.match(f) assert(ak.string(f)) return function(g) local h, i = ak.string(g) if not h then return false, i end if string.match(g, f) == nil then return false, string.format("%q failed to match pattern %q", g, f) end return true end end function ak.optional(f) assert(ak.callback(f)) return function(g) if g == nil then return true end local h, i = f(g) if h then return true else return false, string.format("(optional) %s", i or "") end end end function ak.tuple(...) local f = { ... } return function(...) local g = { ... } for h, i in ipairs(f) do local j, k = i(g[h]) if j == false then return false, string.format("Bad tuple index #%s:\n\t%s", h, k or "") end end return true end end function ak.keys(f) assert(ak.callback(f)) return function(g) local h, i = ak.table(g) if h == false then return false, i or "" end for j in pairs(g) do local k, l = f(j) if k == false then return false, string.format("bad key %s:\n\t%s", tostring(j), l or "") end end return true end end function ak.values(f) assert(ak.callback(f)) return function(g) local h, i = ak.table(g) if h == false then return false, i or "" end for j, k in pairs(g) do local l, m = f(k) if l == false then return false, string.format("bad value for key %s:\n\t%s", tostring(j), m or "") end end return true end end function ak.map(f, g) assert(ak.callback(f), ak.callback(g)) local h, i = ak.keys(f), ak.values(g) return function(j) local k, l = h(j) if not k then return false, l or "" end local m, n = i(j) if not m then return false, n or "" end return true end end function ak.set(f) return ak.map(f, ak.literal(true)) end do local f = ak.keys(ak.integer) function ak.array(g) assert(ak.callback(g)) local h = ak.values(g) return function(i) local j, k = f(i) if j == false then return false, string.format("[array] %s", k or "") end local l = 0 for m in ipairs(i) do l = l + 1 end for m in pairs(i) do if m < 1 or m > l then return false, string.format("[array] key %s must be sequential", tostring(m)) end end local m, n = h(i) if not m then return false, string.format("[array] %s", n or "") end return true end end function ak.strictArray(...) local g = { ... } assert(ak.array(ak.callback)(g)) return function(h) local i, j = f(h) if i == false then return false, string.format("[strictArray] %s", j or "") end if #g < #h then return false, string.format("[strictArray] Array size exceeds limit of %d", #g) end for k, l in pairs(g) do local m, n = l(h[k]) if not m then return false, string.format("[strictArray] Array index #%d - %s", k, n) end end return true end end end do local f = ak.array(ak.callback) function ak.union(...) local g = { ... } assert(f(g)) return function(h) for i, j in ipairs(g) do if j(h) then return true end end return false, "bad type for union" end end ak.some = ak.union function ak.intersection(...) local g = { ... } assert(f(g)) return function(h) for i, j in ipairs(g) do local k, l = j(h) if not k then return false, l or "" end end return true end end ak.every = ak.intersection end do local f = ak.map(ak.any, ak.callback) function ak.interface(g) assert(f(g)) return function(h) local i, j = ak.table(h) if i == false then return false, j or "" end for k, l in pairs(g) do local m, n = l(h[k]) if m == false then return false, string.format("[interface] bad value for %s:\n\t%s", tostring(k), n or "") end end return true end end function ak.strictInterface(g) assert(f(g)) return function(h) local i, j = ak.table(h) if i == false then return false, j or "" end for k, l in pairs(g) do local m, n = l(h[k]) if m == false then return false, string.format("[interface] bad value for %s:\n\t%s", tostring(k), n or "") end end for k in pairs(h) do if not g[k] then return false, string.format("[interface] unexpected field %q", tostring(k)) end end return true end end end function ak.instanceOf(f, g) assert(ak.string(f)) local h if g ~= nil then h = ak.children(g) end return function(i) local j, k = ak.Instance(i) if not j then return false, k or "" end if i.ClassName ~= f then return false, string.format("%s expected, got %s", f, i.ClassName) end if h then local l, m = h(i) if not l then return false, m end end return true end end ak.instance = ak.instanceOf function ak.instanceIsA(f, g) assert(ak.string(f)) local h if g ~= nil then h = ak.children(g) end return function(i) local j, k = ak.Instance(i) if not j then return false, k or "" end if not i:IsA(f) then return false, string.format("%s expected, got %s", f, i.ClassName) end if h then local l, m = h(i) if not l then return false, m end end return true end end function ak.enum(f) assert(ak.Enum(f)) return function(g) local h, i = ak.EnumItem(g) if not h then return false, i end if g.EnumType == f then return true else return false, string.format("enum of %s expected, got enum of %s", tostring(f), tostring(g.EnumType)) end end end do local f = ak.tuple(ak.callback, ak.callback) function ak.wrap(g, h) assert(f(g, h)) return function(...) assert(h(...)) return g(...) end end end function ak.strict(f) return function(...) assert(f(...)) end end do local f = ak.map(ak.string, ak.callback) function ak.children(g) assert(f(g)) return function(h) local i, j = ak.Instance(h) if not i then return false, j or "" end local k = {} for l, m in ipairs(h:GetChildren()) do local n = m.Name if g[n] then if k[n] then return false, string.format("Cannot process multiple children with the same name %q", n) end k[n] = m end end for l, m in pairs(g) do local n, o = m(k[l]) if not n then return false, string.format("[%s.%s] %s", h:GetFullName(), l, o or "") end end return true end end end return ak end)() end, [126] = function() local aa, ab, ac = a(126) local ad return (function(...) local ai = ac(ab.Parent.fusion) local aj = ai.Value local ak = { Theme = aj("dark"), Objects = aj({}), Categorys = aj({}), Tabs = aj({}), UILayouts = aj({}), Containers = aj({}), CurrentTab = aj(), Elements = aj(), Options = aj({}), Library = aj(), MinimizeKeybind = aj(), MinimizeKey = aj(Enum.KeyCode.K), Notifications = aj({}), Commands = aj({}), CommandBarOpened = aj(false), CommandBarPrefix = aj(Enum.KeyCode.Semicolon), ToExecute = aj(""), Suggestions = aj({}), CommandBarText = aj(""), FPSCheck = aj(true), PingCheck = aj(true), toDestroy = aj(false), HasSelected = aj(false), ChatMessages = aj({}) } function ak.add(f: string, g: any, h: string) if not ak[f] then error("No global state named: " .. f) end local i = ak[f] local j = table.clone(i:get()) j[h] = g i:set(j) end return ak end)() end, [127] = function() local aa, ab, ac = a(127) local ad return (function(...) local ai, aj, ak, f = { 0, 1, 2, 3, 4, 5, 6, 7 }, { 0, 1, 3, 4, 5, 7 }, { 0, 1, 4, 5, 6 }, {} f.__index = f f.ClassName = "ViewportModel" local g, h = function(g) if g:IsA("WedgePart") then return aj elseif g:IsA("CornerWedgePart") then return ak end return ai end, function(g, h, i) local j = {} for k, l in pairs(i) do j[k] = g * (h * Vector3.new(2 * (math.floor(l / 4) % 2) - 1, 2 * (math.floor(l / 2) % 2) - 1, 2 * (l % 2) - 1)) end return j end local i, j = function(i) local j = {} for k, l in pairs(i:GetDescendants()) do if l:IsA("BasePart") then local m = g(l) local n = h(l.CFrame, l.Size / 2, m) for o, p in pairs(n) do table.insert(j, p) end end end return j end, function(i, j, k, l) local m, n = -math.huge, math.huge for o, p in pairs(i) do local q = k - p.Z local r = l * q local s, t = p[j] + r, p[j] - r m = math.max(m, s, t) n = math.min(n, s, t) end return m, n end function f.new(k, l) local m = setmetatable({}, f) m.Model = nil m.ViewportFrame = k m.Camera = l m._points = {} m._modelCFrame = CFrame.new() m._modelSize = Vector3.new() m._modelRadius = 0 m._viewport = {} m:Calibrate() return m end function f.SetModel(k, l) k.Model = l local m, n = l:GetBoundingBox() k._points = i(l) k._modelCFrame = m k._modelSize = n k._modelRadius = n.Magnitude / 2 end function f.Calibrate(k) local l, m = {}, k.ViewportFrame.AbsoluteSize l.aspect = m.X / m.Y l.yFov2 = math.rad(k.Camera.FieldOfView / 2) l.tanyFov2 = math.tan(l.yFov2) l.xFov2 = math.atan(l.tanyFov2 * l.aspect) l.tanxFov2 = math.tan(l.xFov2) l.cFov2 = math.atan(l.tanyFov2 * math.min(1, l.aspect)) l.sincFov2 = math.sin(l.cFov2) k._viewport = l end function f.GetFitDistance(k, l) local m = l and (l - k._modelCFrame.Position).Magnitude or 0 local n = k._modelRadius + m return n / k._viewport.sincFov2 end function f.GetMinimumFitCFrame(k, l) if not k.Model then return CFrame.new() end local m = l - l.Position local n, o = m:Inverse(), k._points local p = { n * o[1] } local q = p[1].Z for r = 2, #o do local s = n * o[r] q = math.min(q, s.Z) p[r] = s end local r, s = j(p, "X", q, k._viewport.tanxFov2) local t, u = j(p, "Y", q, k._viewport.tanyFov2) local v = math.max(((r - s) / 2) / k._viewport.tanxFov2, ((t - u) / 2) / k._viewport.tanyFov2) return l * CFrame.new((r + s) / 2, (t + u) / 2, q + v) end return f end)() end, [129] = function() local aa, ab, ac = a(129) local ad return (function(...) local ai = ac(ab.Parent.Parent.packages.fusion) local aj, ak, f, g = ai.Computed, ac(ab.Parent.Parent.packages.states), ac(ab.Parent.Parent.utils.animate), { accent = { dark = Color3.fromRGB(0, 110, 230), twilight = Color3.fromRGB(115, 90, 235), shadow = Color3.fromRGB(60, 180, 200), dusk = Color3.fromRGB(235, 145, 48), obsidian = Color3.fromRGB(110, 60, 190), charcoal = Color3.fromRGB(70, 190, 220), slate = Color3.fromRGB(95, 170, 230), onyx = Color3.fromRGB(235, 125, 0), ash = Color3.fromRGB(120, 120, 230), granite = Color3.fromRGB(85, 180, 210), cobalt = Color3.fromRGB(35, 135, 225), aurora = Color3.fromRGB(85, 175, 210), mocha = Color3.fromRGB(170, 125, 225), midnight = Color3.fromRGB(65, 105, 225), marine = Color3.fromRGB(0, 150, 190), nightfall = Color3.fromRGB(95, 115, 215), dawnbreak = Color3.fromRGB(140, 160, 210), mist = Color3.fromRGB(130, 175, 185), starlight = Color3.fromRGB(150, 180, 255), eclipse = Color3.fromRGB(120, 90, 180), daybreak = Color3.fromRGB(255, 180, 140), storm = Color3.fromRGB(100, 140, 180), moonlight = Color3.fromRGB(180, 195, 255), oscura = Color3.fromRGB(170, 172, 80), crimson = Color3.fromRGB(216, 79, 104), azure = Color3.fromRGB(79, 143, 216), emerald = Color3.fromRGB(79, 216, 123), amethyst = Color3.fromRGB(147, 79, 216), amber = Color3.fromRGB(216, 159, 79) }, background = { dark = Color3.fromRGB(15, 15, 15), twilight = Color3.fromRGB(22, 22, 29), shadow = Color3.fromRGB(18, 20, 25), dusk = Color3.fromRGB(23, 21, 26), obsidian = Color3.fromRGB(22, 22, 29), charcoal = Color3.fromRGB(28, 28, 30), slate = Color3.fromRGB(30, 33, 36), onyx = Color3.fromRGB(24, 24, 26), ash = Color3.fromRGB(26, 26, 31), granite = Color3.fromRGB(25, 28, 32), cobalt = Color3.fromRGB(21, 25, 31), aurora = Color3.fromRGB(18, 25, 35), mocha = Color3.fromRGB(30, 30, 46), midnight = Color3.fromRGB(12, 15, 28), marine = Color3.fromRGB(10, 20, 30), nightfall = Color3.fromRGB(20, 22, 32), dawnbreak = Color3.fromRGB(25, 28, 35), mist = Color3.fromRGB(22, 26, 30), starlight = Color3.fromRGB(20, 25, 35), eclipse = Color3.fromRGB(18, 15, 25), daybreak = Color3.fromRGB(25, 22, 28), storm = Color3.fromRGB(22, 25, 30), moonlight = Color3.fromRGB(20, 22, 30), oscura = Color3.fromRGB(11, 11, 15), crimson = Color3.fromRGB(11, 11, 15), azure = Color3.fromRGB(11, 11, 15), emerald = Color3.fromRGB(11, 11, 15), amethyst = Color3.fromRGB(11, 11, 15), amber = Color3.fromRGB(11, 11, 15) }, secondary_background = { dark = Color3.fromRGB(18, 18, 18), twilight = Color3.fromRGB(26, 26, 34), shadow = Color3.fromRGB(22, 24, 30), dusk = Color3.fromRGB(27, 25, 31), obsidian = Color3.fromRGB(28, 28, 36), charcoal = Color3.fromRGB(35, 35, 37), slate = Color3.fromRGB(37, 40, 44), onyx = Color3.fromRGB(30, 30, 33), ash = Color3.fromRGB(31, 31, 37), granite = Color3.fromRGB(30, 33, 38), cobalt = Color3.fromRGB(26, 31, 38), aurora = Color3.fromRGB(22, 30, 42), mocha = Color3.fromRGB(35, 35, 51), midnight = Color3.fromRGB(16, 20, 35), marine = Color3.fromRGB(15, 25, 38), nightfall = Color3.fromRGB(24, 26, 38), dawnbreak = Color3.fromRGB(30, 33, 42), mist = Color3.fromRGB(26, 30, 35), starlight = Color3.fromRGB(25, 30, 42), eclipse = Color3.fromRGB(22, 19, 30), daybreak = Color3.fromRGB(30, 27, 33), storm = Color3.fromRGB(27, 30, 35), moonlight = Color3.fromRGB(25, 27, 35), oscura = Color3.fromRGB(18, 18, 24), crimson = Color3.fromRGB(18, 18, 24), azure = Color3.fromRGB(18, 18, 24), emerald = Color3.fromRGB(18, 18, 24), amethyst = Color3.fromRGB(18, 18, 24), amber = Color3.fromRGB(18, 18, 24) }, stroke = { dark = Color3.fromRGB(31, 31, 31), twilight = Color3.fromRGB(42, 42, 52), shadow = Color3.fromRGB(38, 40, 48), dusk = Color3.fromRGB(43, 41, 48), obsidian = Color3.fromRGB(45, 45, 55), charcoal = Color3.fromRGB(55, 55, 58), slate = Color3.fromRGB(58, 62, 66), onyx = Color3.fromRGB(50, 50, 54), ash = Color3.fromRGB(48, 48, 56), granite = Color3.fromRGB(52, 55, 60), cobalt = Color3.fromRGB(45, 50, 58), aurora = Color3.fromRGB(38, 48, 62), mocha = Color3.fromRGB(50, 50, 66), midnight = Color3.fromRGB(30, 35, 55), marine = Color3.fromRGB(25, 40, 55), nightfall = Color3.fromRGB(38, 42, 58), dawnbreak = Color3.fromRGB(45, 48, 58), mist = Color3.fromRGB(40, 45, 50), starlight = Color3.fromRGB(40, 45, 60), eclipse = Color3.fromRGB(35, 30, 45), daybreak = Color3.fromRGB(45, 40, 48), storm = Color3.fromRGB(42, 45, 50), moonlight = Color3.fromRGB(40, 42, 50), oscura = Color3.fromRGB(35, 36, 44), crimson = Color3.fromRGB(35, 36, 44), azure = Color3.fromRGB(35, 36, 44), emerald = Color3.fromRGB(35, 36, 44), amethyst = Color3.fromRGB(35, 36, 44), amber = Color3.fromRGB(35, 36, 44) }, text = { dark = Color3.fromRGB(255, 255, 255), twilight = Color3.fromRGB(240, 240, 245), shadow = Color3.fromRGB(235, 235, 240), dusk = Color3.fromRGB(250, 250, 255), obsidian = Color3.fromRGB(230, 230, 235), charcoal = Color3.fromRGB(240, 240, 245), slate = Color3.fromRGB(235, 238, 240), onyx = Color3.fromRGB(245, 245, 250), ash = Color3.fromRGB(238, 238, 243), granite = Color3.fromRGB(233, 236, 240), cobalt = Color3.fromRGB(235, 240, 245), aurora = Color3.fromRGB(235, 245, 255), mocha = Color3.fromRGB(205, 214, 244), midnight = Color3.fromRGB(220, 230, 255), marine = Color3.fromRGB(210, 235, 255), nightfall = Color3.fromRGB(235, 238, 245), dawnbreak = Color3.fromRGB(240, 242, 248), mist = Color3.fromRGB(235, 240, 242), starlight = Color3.fromRGB(235, 240, 255), eclipse = Color3.fromRGB(230, 225, 245), daybreak = Color3.fromRGB(250, 245, 240), storm = Color3.fromRGB(235, 240, 245), moonlight = Color3.fromRGB(240, 245, 255), oscura = Color3.fromRGB(230, 230, 230), crimson = Color3.fromRGB(230, 230, 230), azure = Color3.fromRGB(230, 230, 230), emerald = Color3.fromRGB(230, 230, 230), amethyst = Color3.fromRGB(230, 230, 230), amber = Color3.fromRGB(230, 230, 230) }, secondary_text = { dark = Color3.fromRGB(150, 150, 150), twilight = Color3.fromRGB(130, 135, 155), shadow = Color3.fromRGB(125, 130, 150), dusk = Color3.fromRGB(145, 150, 170), obsidian = Color3.fromRGB(180, 180, 190), charcoal = Color3.fromRGB(190, 190, 195), slate = Color3.fromRGB(185, 188, 190), onyx = Color3.fromRGB(195, 195, 200), ash = Color3.fromRGB(175, 175, 185), granite = Color3.fromRGB(170, 175, 180), cobalt = Color3.fromRGB(165, 170, 180), aurora = Color3.fromRGB(165, 180, 195), mocha = Color3.fromRGB(166, 173, 200), midnight = Color3.fromRGB(140, 160, 200), marine = Color3.fromRGB(130, 170, 200), nightfall = Color3.fromRGB(135, 145, 175), dawnbreak = Color3.fromRGB(150, 160, 180), mist = Color3.fromRGB(140, 155, 165), starlight = Color3.fromRGB(140, 150, 180), eclipse = Color3.fromRGB(130, 120, 160), daybreak = Color3.fromRGB(160, 150, 140), storm = Color3.fromRGB(130, 140, 150), moonlight = Color3.fromRGB(150, 160, 180), oscura = Color3.fromRGB(170, 170, 180), crimson = Color3.fromRGB(170, 170, 180), azure = Color3.fromRGB(170, 170, 180), emerald = Color3.fromRGB(170, 170, 180), amethyst = Color3.fromRGB(170, 170, 180), amber = Color3.fromRGB(170, 170, 180) }, tertiary_text = { dark = Color3.fromRGB(100, 100, 100), twilight = Color3.fromRGB(85, 90, 105), shadow = Color3.fromRGB(80, 85, 100), dusk = Color3.fromRGB(100, 105, 120), obsidian = Color3.fromRGB(130, 130, 140), charcoal = Color3.fromRGB(140, 140, 145), slate = Color3.fromRGB(135, 138, 140), onyx = Color3.fromRGB(145, 145, 150), ash = Color3.fromRGB(125, 125, 135), granite = Color3.fromRGB(120, 125, 130), cobalt = Color3.fromRGB(115, 120, 130), aurora = Color3.fromRGB(120, 130, 145), mocha = Color3.fromRGB(146, 158, 184), midnight = Color3.fromRGB(90, 110, 150), marine = Color3.fromRGB(80, 120, 150), nightfall = Color3.fromRGB(90, 100, 135), dawnbreak = Color3.fromRGB(105, 115, 140), mist = Color3.fromRGB(95, 110, 120), starlight = Color3.fromRGB(90, 100, 120), eclipse = Color3.fromRGB(85, 75, 105), daybreak = Color3.fromRGB(105, 95, 90), storm = Color3.fromRGB(85, 95, 105), moonlight = Color3.fromRGB(95, 105, 125), oscura = Color3.fromRGB(120, 120, 135), crimson = Color3.fromRGB(120, 120, 135), azure = Color3.fromRGB(120, 120, 135), emerald = Color3.fromRGB(120, 120, 135), amethyst = Color3.fromRGB(120, 120, 135), amber = Color3.fromRGB(120, 120, 135) }, danger = { dark = Color3.fromRGB(220, 50, 47), twilight = Color3.fromRGB(210, 55, 70), shadow = Color3.fromRGB(205, 60, 75), dusk = Color3.fromRGB(225, 65, 50), obsidian = Color3.fromRGB(215, 45, 65), charcoal = Color3.fromRGB(200, 55, 60), slate = Color3.fromRGB(210, 50, 55), onyx = Color3.fromRGB(225, 55, 45), ash = Color3.fromRGB(205, 50, 65), granite = Color3.fromRGB(200, 45, 55), cobalt = Color3.fromRGB(215, 40, 50), aurora = Color3.fromRGB(195, 55, 70), mocha = Color3.fromRGB(210, 45, 60), midnight = Color3.fromRGB(235, 45, 65), marine = Color3.fromRGB(230, 50, 70), nightfall = Color3.fromRGB(215, 55, 75), dawnbreak = Color3.fromRGB(220, 65, 80), mist = Color3.fromRGB(210, 60, 70), starlight = Color3.fromRGB(220, 50, 47), eclipse = Color3.fromRGB(210, 55, 70), daybreak = Color3.fromRGB(225, 65, 50), storm = Color3.fromRGB(215, 45, 65), moonlight = Color3.fromRGB(220, 50, 47), oscura = Color3.fromRGB(255, 92, 92), crimson = Color3.fromRGB(255, 92, 92), azure = Color3.fromRGB(255, 92, 92), emerald = Color3.fromRGB(255, 92, 92), amethyst = Color3.fromRGB(255, 92, 92), amber = Color3.fromRGB(255, 92, 92) }, warning = { dark = Color3.fromRGB(215, 153, 33), twilight = Color3.fromRGB(210, 145, 40), shadow = Color3.fromRGB(205, 150, 45), dusk = Color3.fromRGB(220, 155, 35), obsidian = Color3.fromRGB(215, 140, 45), charcoal = Color3.fromRGB(200, 145, 40), slate = Color3.fromRGB(210, 150, 35), onyx = Color3.fromRGB(225, 155, 30), ash = Color3.fromRGB(205, 145, 45), granite = Color3.fromRGB(200, 140, 35), cobalt = Color3.fromRGB(215, 135, 30), aurora = Color3.fromRGB(195, 150, 45), mocha = Color3.fromRGB(210, 140, 40), midnight = Color3.fromRGB(235, 165, 25), marine = Color3.fromRGB(240, 170, 30), nightfall = Color3.fromRGB(215, 155, 45), dawnbreak = Color3.fromRGB(225, 160, 50), mist = Color3.fromRGB(210, 155, 40), starlight = Color3.fromRGB(215, 153, 33), eclipse = Color3.fromRGB(210, 145, 40), daybreak = Color3.fromRGB(220, 155, 35), storm = Color3.fromRGB(215, 140, 45), moonlight = Color3.fromRGB(215, 153, 33), oscura = Color3.fromRGB(230, 180, 80), crimson = Color3.fromRGB(230, 180, 80), azure = Color3.fromRGB(230, 180, 80), emerald = Color3.fromRGB(230, 180, 80), amethyst = Color3.fromRGB(230, 180, 80), amber = Color3.fromRGB(230, 180, 80) }, success = { dark = Color3.fromRGB(50, 200, 70), twilight = Color3.fromRGB(65, 195, 85), shadow = Color3.fromRGB(60, 210, 90), dusk = Color3.fromRGB(55, 205, 75), obsidian = Color3.fromRGB(70, 190, 80), charcoal = Color3.fromRGB(55, 195, 85), slate = Color3.fromRGB(60, 200, 70), onyx = Color3.fromRGB(65, 210, 75), ash = Color3.fromRGB(55, 185, 90), granite = Color3.fromRGB(50, 195, 85), cobalt = Color3.fromRGB(45, 205, 80), aurora = Color3.fromRGB(55, 210, 95), mocha = Color3.fromRGB(70, 185, 85), midnight = Color3.fromRGB(40, 190, 95), marine = Color3.fromRGB(35, 195, 110), nightfall = Color3.fromRGB(60, 195, 95), dawnbreak = Color3.fromRGB(70, 200, 100), mist = Color3.fromRGB(65, 190, 95), starlight = Color3.fromRGB(50, 200, 70), eclipse = Color3.fromRGB(65, 195, 85), daybreak = Color3.fromRGB(55, 205, 75), storm = Color3.fromRGB(70, 190, 80), moonlight = Color3.fromRGB(50, 200, 70), oscura = Color3.fromRGB(100, 210, 130), crimson = Color3.fromRGB(100, 210, 130), azure = Color3.fromRGB(100, 210, 130), emerald = Color3.fromRGB(100, 210, 130), amethyst = Color3.fromRGB(100, 210, 130), amber = Color3.fromRGB(100, 210, 130) } } local h, i = ak.Theme, {} for j, k in pairs(g) do if type(k) == "table" and type(k[next(k)]) == "table" then i[j] = {} for l, m in pairs(k) do i[j][l] = aj(function() return m[h:get()] end) end else i[j] = f(function() return k[h:get()] end, 45, 1) end end local j = function() local j = {} for k, l in pairs(g.accent) do table.insert(j, k) end table.sort(j) return j end i.GetSupportedThemes = j return i end)() end, [131] = function() local aa, ab, ac = a(131) local ad return (function(...) local ai = ac(ab.Parent.Parent.packages.fusion) local aj, ak = ai.Spring, ai.Computed return function(f, g, h) return aj(ak(f), g, h) end end)() end, [132] = function() local aa, ab, ac = a(132) local ad return (function(...) local ai = {} function ai.darkenRGB(aj, ak: number) return Color3.fromRGB((aj.R * 255) - ak, (aj.G * 255) - ak, (aj.B * 255) - ak) end function ai.lightenRGB(aj, ak: number) return Color3.fromRGB((aj.R * 255) + ak, (aj.G * 255) + ak, (aj.B * 255) + ak) end return ai end)() end, [133] = function() local aa, ab, ac = a(133) local ad return (function(...) local ai = ac(ab.Parent.unwrap) return function(aj, ak) local f = ai(aj) table.insert(f, ak) aj:set(f) end end)() end, [134] = function() local aa, ab, ac = a(134) local ad return (function(...) local ai, aj, ak, f = {}, game:GetService("Players"), { "HumanoidRootPart", "Torso", "UpperTorso", "LowerTorso", "Head" }, function(ai, aj) if string.sub(ai, 1, #aj) == aj then return true end return false end function ai.getCharacter() local g = aj.LocalPlayer local h = g.Character or g.CharacterAdded:Wait() return h end function ai.others() local g, h = aj:GetPlayers(), {} for i, j in g do if j ~= ai.me() then table.insert(h, j) end end return h end function ai.getByName(g: string) local h = aj:GetPlayers() for i, j in h do if f(string.lower(j.Name), g) or f(string.lower(j.DisplayName), g) then return j end end return nil end function ai.setPosition(g: CFrame) local h = ai.getCharacter() h:PivotTo(g) end function ai.getRoot(g) for h, i in g.Character:GetChildren() do if table.find(ak, i.Name) then return i end end return nil end function ai.getHumanoid() return ai.getCharacter():FindFirstChildWhichIsA("Humanoid") end return ai end)() end, [135] = function() local aa, ab, ac = a(135) local ad return (function(...) return function(ai: () -> ...any): thread local aj, ak = pcall(ai) if not aj then error(ak) end return ak end end)() end, [136] = function() local aa, ab, ac = a(136) local ad return (function(...) return setmetatable({}, { __index = function(ai, aj) local ak = game:GetService(aj) ai[aj] = ak return ak end, }) end)() end, [137] = function() local aa, ab, ac = a(137) local ad return (function(...) return function(ai: any, aj: boolean?): any if typeof(ai) == "table" and ai.type == "State" then return ai:get(aj) end return ai end end)() end, }, { { 1, 2, { "Therion" }, { { 130, 1, { "utils" }, { { 135, 2, { "safecallback" } }, { 137, 2, { "unwrap" } }, { 134, 2, { "player" } }, { 132, 2, { "color3" } }, { 136, 2, { "services" } }, { 133, 2, { "insertitem" } }, { 131, 2, { "animate" } } } }, { 128, 1, { "storage" }, { { 129, 2, { "theme" } } } }, { 14, 2, { "commandbar" } }, { 15, 1, { "components" }, { { 27, 1, { "window" }, { { 32, 2, { "window" } }, { 29, 2, { "dialog" } }, { 31, 2, { "tab" } }, { 28, 2, { "category" } }, { 30, 2, { "section" } } } }, { 16, 1, { "chat" }, { { 17, 2, { "chatwindow" } }, { 18, 2, { "input" } }, { 19, 2, { "message" } } } }, { 24, 1, { "notification" }, { { 25, 2, { "notification" } }, { 26, 2, { "notificationHolder" } } } }, { 20, 1, { "commandbar" }, { { 21, 2, { "bar" } }, { 22, 2, { "suggestion" } }, { 23, 2, { "suggestions" } } } } } }, { 59, 1, { "packages" }, { { 126, 2, { "states" } }, { 62, 2, { "damerau" } }, { 127, 2, { "viewport" } }, { 63, 2, { "fusion" }, { { 109, 1, { "Utility" }, { { 111, 2, { "cleanup" } }, { 113, 2, { "isSimilar" } }, { 110, 2, { "None" } }, { 112, 2, { "doNothing" } }, { 115, 2, { "restrictRead" } }, { 114, 2, { "needsDestruction" } }, { 116, 2, { "xtypeof" } } } }, { 76, 1, { "Dependencies" }, { { 81, 2, { "useDependency" } }, { 79, 2, { "sharedState" } }, { 80, 2, { "updateAll" } }, { 77, 2, { "captureDependencies" } }, { 78, 2, { "initDependency" } } } }, { 99, 2, { "PubTypes" } }, { 82, 1, { "Instances" }, { { 92, 2, { "defaultProps" } }, { 85, 2, { "Hydrate" } }, { 83, 2, { "Children" } }, { 89, 2, { "Out" } }, { 91, 2, { "applyInstanceProps" } }, { 84, 2, { "Cleanup" } }, { 87, 2, { "OnChange" } }, { 86, 2, { "New" } }, { 88, 2, { "OnEvent" } }, { 90, 2, { "Ref" } } } }, { 108, 2, { "Types" } }, { 64, 1, { "Animation" }, { { 71, 2, { "packType" } }, { 66, 2, { "SpringScheduler" } }, { 69, 2, { "getTweenRatio" } }, { 67, 2, { "Tween" } }, { 68, 2, { "TweenScheduler" } }, { 70, 2, { "lerpType" } }, { 73, 2, { "unpackType" } }, { 65, 2, { "Spring" } }, { 72, 2, { "springCoefficients" } } } }, { 74, 1, { "Colour" }, { { 75, 2, { "Oklab" } } } }, { 93, 1, { "Logging" }, { { 96, 2, { "logWarn" } }, { 95, 2, { "logErrorNonFatal" } }, { 94, 2, { "logError" } }, { 97, 2, { "messages" } }, { 98, 2, { "parseError" } } } }, { 100, 1, { "State" }, { { 105, 2, { "Observer" } }, { 102, 2, { "ForKeys" } }, { 101, 2, { "Computed" } }, { 106, 2, { "Value" } }, { 103, 2, { "ForPairs" } }, { 107, 2, { "unwrap" } }, { 104, 2, { "ForValues" } } } } } }, { 117, 2, { "maid" } }, { 118, 2, { "snapdragon" }, { { 120, 2, { "Signal" } }, { 124, 2, { "objectAssign" } }, { 123, 2, { "Symbol" } }, { 122, 2, { "SnapdragonRef" } }, { 121, 2, { "SnapdragonController" } }, { 119, 2, { "Maid" } }, { 125, 2, { "t" } } } }, { 60, 2, { "audio" } }, { 61, 2, { "cmdr" } } } }, { 34, 1, { "modules" }, { { 37, 2, { "copyjobid" } }, { 43, 2, { "goto" } }, { 44, 2, { "hipheight" } }, { 36, 2, { "copycframe" } }, { 57, 2, { "unview" } }, { 42, 2, { "gameid" } }, { 45, 2, { "joinserver" } }, { 38, 2, { "copypos" } }, { 58, 2, { "view" } }, { 35, 2, { "btools" } }, { 41, 2, { "freeze" } }, { 47, 2, { "notify" } }, { 56, 2, { "unfreeze" } }, { 55, 2, { "speed" } }, { 54, 2, { "sit" } }, { 46, 2, { "jump" } }, { 48, 2, { "placeid" } }, { 53, 2, { "serverhop" } }, { 52, 2, { "respawn" } }, { 49, 2, { "refresh" } }, { 51, 2, { "remotespy" } }, { 40, 2, { "fov" } }, { 39, 2, { "dex" } }, { 50, 2, { "rejoinserver" } } } }, { 33, 2, { "mock.story" } }, { 2, 2, { "Elements" }, { { 5, 2, { "dropdown" } }, { 9, 2, { "seperator" } }, { 8, 2, { "radio" } }, { 3, 2, { "button" } }, { 11, 2, { "table" } }, { 12, 2, { "text" } }, { 4, 2, { "colorpicker" } }, { 13, 2, { "toggle" } }, { 10, 2, { "slider" } }, { 6, 2, { "input" } }, { 7, 2, { "keybind" } } } } } } }, "0.4.1", "WaxRuntime", string, task, setmetatable, error, next, table, unpack, coroutine, script, type, require, pcall, tostring, tonumber, _VERSIONlocal s, t, u, v, w, x, y = h.insert, h.remove, h.freeze or function(s) return s end, j.wrap, ai.sub, ai.match, ai.gmatchif q and w(q, 1, 4) == "Lune" then local z, A = n(m, "@lune/task") if z and A then aj = A endendlocal z = aj and aj.deferlocal A, B, C, D, E, F, G, H, I = z or function(A, ...) v(A)(...) end, { [1] = "Folder", [2] = "ModuleScript", [3] = "Script", [4] = "LocalScript", [5] = "StringValue" }, {}, {}, {}, {}, {}, {}, {}local J, K = { GetFullName = { {}, function(J) local K, L = J.Name, J.Parent while L do K = L.Name .. "." .. K L = L.Parent end return K end, }, GetChildren = { {}, function(J) local K = {} for L in g, I[J] do s(K, L) end return K end, }, GetDescendants = { {}, function(J) local K = {} for L in g, I[J] do s(K, L) for M, N in g, L:GetDescendants() do s(K, N) end end return K end, }, FindFirstChild = { { "string", "boolean?" }, function(J, K, L) local M = I[J] for N in g, M do if N.Name == K then return N end end if L then for N in g, M do return N:FindFirstChild(K, true) end end end, }, FindFirstAncestor = { { "string" }, function(J, K) local L = J.Parent while L do if L.Name == K then return L end L = L.Parent end end, }, WaitForChild = { { "string", "number?" }, function(J, K) return J:FindFirstChild(K) end, } }, {}for L, M in g, J do local N, O, P = M[1], M[2], {} for Q, R in g, N do local S, T = x(R, "^([^%?]+)(%??)") P[Q] = { S, T } end K[L] = function(Q, ...) if not I[Q] then f("Expected ':' not '.' calling member function " .. L, 2) end local R = { ... } for S, T in g, P do local U = R[S] local V, W, X = l(U), T[1], T[2] if U == nil and not X then f("Argument " .. U .. " missing or nil", 3) end if W ~= "any" and V ~= W and not (V == "nil" and X) then f("Argument " .. S .. ' expects type "' .. W .. '", got "' .. V .. '"', 2) end end return O(Q, ...) endendlocal L = function(L, M, N) local O, P, Q, R, S, T = ak({}, { __mode = "k" }), function(O) f(O .. " is not a valid (virtual) member of " .. L .. ' "' .. M .. '"', 3) end, function(O) f("Unable to assign (virtual) property " .. O .. ". Property is read only", 3) end, {}, {} S.__metatable = false S.__index = function(U, V) if V == "ClassName" then return L elseif V == "Name" then return M elseif V == "Parent" then return N elseif L == "StringValue" and V == "Value" then return T else local W = K[V] if W then return W end end for W in g, O do if W.Name == V then return W end end P(V) end S.__newindex = function(U, V, W) if V == "ClassName" then Q(V) elseif V == "Name" then M = W elseif V == "Parent" then if W == R then return end if N ~= nil then I[N][R] = nil end N = W if W ~= nil then I[W][R] = true end elseif L == "StringValue" and V == "Value" then T = W else P(V) end end S.__tostring = function() return M end ak(R, S) I[R] = O if N ~= nil then I[N][R] = true end return Rendlocal function M(N, O) local P, Q, R, S = N[1], N[2], N[3], N[4] local T = B[Q] local U = R and t(R, 1) or T local V = L(T, U, O) C[P] = V if R then for W, X in g, R do V[W] = X end end if S then for W, X in g, S do M(X, V) end end return Vendlocal N = L("Folder", "[" .. ad .. "]")for O, P in g, ab do M(P, N)endfor O, P in g, aa do local Q = C[O] D[Q] = P E[Q] = O local R = Q.ClassName if R == "LocalScript" or R == "Script" then s(G, Q) endendlocal O = function(O) local P, Q = O.ClassName, F[O] if Q and P == "ModuleScript" then return i(Q) end local R, S = D[O], function(R) R = o(R) local S, T, U = O:GetFullName(), x(R, "[^:]+:(%d+): (.+)") if not T or not r then return S .. ":*: " .. (U or R) end T = p(T) local V = E[O] local W = r[V] local X = T - W + 1 if X < 0 then X = "?" end return S .. ":" .. X .. ": " .. U end if P == "LocalScript" or P == "Script" then local T, U = n(R) if not T then f(S(U), 0) end else local T = { n(R) } local U = t(T, 1) if not U then local V = t(T, 1) f(S(V), 0) end F[O] = T return i(T) endendfunction a(P) local Q, R, S = C[P], function(Q, ...) local R = { n(Q, ...) } local S = t(R, 1) if not S then f(R[1], 3) end return i(R) end, u(ak({}, { __index = H, __newindex = function(Q, R, S) H[R] = S end, __len = function() return #H end, __iter = function() return g, H end, })) local al, am, T = u({ version = ac, envname = ad, shared = S, script = k, require = m }), Q, function(T, ...) local U, V, W = l(T), "Attempted to call require with a non-ModuleScript", "Attempted to call require with self" if U == "table" and I[T] then if T.ClassName ~= "ModuleScript" then f(V, 2) elseif T == Q then f(W, 2) end return O(T) elseif U == "string" and w(T, 1, 1) ~= "@" then if #T == 0 then f("Attempted to call require with empty string", 2) end local X = Q if w(T, 1, 1) == "/" then X = N elseif w(T, 1, 2) == "./" then T = w(T, 3) end local Y for Z in y(T, "([^/]*)/?") do local _ = Z if Z == ".." then _ = "Parent" end if _ ~= "" then local al = X:FindFirstChild(_) if not al then local am = X.Parent if am then al = am:FindFirstChild(_) end end if al then X = al elseif Z ~= Y and Z ~= "init" and Z ~= "init.server" and Z ~= "init.client" then f('Virtual script path "' .. T .. '" not found', 2) end end Y = Z end if X.ClassName ~= "ModuleScript" then f(V, 2) elseif X == Q then f(W, 2) end return O(X) end return R(m, T, ...) end return al, am, Tendfor al, am in g, G do A(O, am)endreturn O(N:GetChildren()[1])
